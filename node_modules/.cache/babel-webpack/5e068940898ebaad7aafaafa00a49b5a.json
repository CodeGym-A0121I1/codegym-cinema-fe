{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, Inject, NgModule, Optional, SkipSelf } from '@angular/core';\nimport { ReplaySubject, AsyncSubject } from 'rxjs';\nimport { CommonModule } from '@angular/common';\nimport { __awaiter } from 'tslib';\n\nclass BaseLoginProvider {\n  constructor() {}\n\n  loadScript(id, src, onload, parentElement = null) {\n    // get document if platform is only browser\n    if (typeof document !== 'undefined' && !document.getElementById(id)) {\n      let signInJS = document.createElement('script');\n      signInJS.async = true;\n      signInJS.src = src;\n      signInJS.onload = onload;\n\n      if (!parentElement) {\n        parentElement = document.head;\n      }\n\n      parentElement.appendChild(signInJS);\n    }\n  }\n\n}\n\nclass SocialUser {}\n\nclass GoogleLoginProvider extends BaseLoginProvider {\n  constructor(clientId, initOptions = {\n    scope: 'email'\n  }) {\n    super();\n    this.clientId = clientId;\n    this.initOptions = initOptions;\n  }\n\n  initialize() {\n    return new Promise((resolve, reject) => {\n      try {\n        this.loadScript(GoogleLoginProvider.PROVIDER_ID, 'https://apis.google.com/js/platform.js', () => {\n          gapi.load('auth2', () => {\n            this.auth2 = gapi.auth2.init(Object.assign(Object.assign({}, this.initOptions), {\n              client_id: this.clientId\n            }));\n            this.auth2.then(() => {\n              resolve();\n            }).catch(err => {\n              reject(err);\n            });\n          });\n        });\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  getLoginStatus(loginStatusOptions) {\n    const options = Object.assign(Object.assign({}, this.initOptions), loginStatusOptions);\n    return new Promise((resolve, reject) => {\n      if (this.auth2.isSignedIn.get()) {\n        let user = new SocialUser();\n        const profile = this.auth2.currentUser.get().getBasicProfile();\n        const authResponse = this.auth2.currentUser.get().getAuthResponse(true); // get complete authResponse object\n\n        user.id = profile.getId();\n        user.name = profile.getName();\n        user.email = profile.getEmail();\n        user.photoUrl = profile.getImageUrl();\n        user.firstName = profile.getGivenName();\n        user.lastName = profile.getFamilyName();\n        user.response = authResponse;\n\n        const resolveUser = authResponse => {\n          user.authToken = authResponse.access_token;\n          user.idToken = authResponse.id_token;\n          resolve(user);\n        };\n\n        if (options.refreshToken) {\n          this.auth2.currentUser.get().reloadAuthResponse().then(resolveUser);\n        } else {\n          const authResponse = this.auth2.currentUser.get().getAuthResponse(true);\n          resolveUser(authResponse);\n        }\n      } else {\n        reject(`No user is currently logged in with ${GoogleLoginProvider.PROVIDER_ID}`);\n      }\n    });\n  }\n\n  signIn(signInOptions) {\n    const options = Object.assign(Object.assign({}, this.initOptions), signInOptions);\n    return new Promise((resolve, reject) => {\n      const offlineAccess = options && options.offline_access;\n      let promise = !offlineAccess ? this.auth2.signIn(signInOptions) : this.auth2.grantOfflineAccess(signInOptions);\n      promise.then(response => {\n        let user = new SocialUser();\n\n        if (response && response.code) {\n          user.authorizationCode = response.code;\n        } else {\n          let profile = this.auth2.currentUser.get().getBasicProfile();\n          let authResponse = this.auth2.currentUser.get().getAuthResponse(true);\n          let token = authResponse.access_token;\n          let backendToken = authResponse.id_token;\n          user.id = profile.getId();\n          user.name = profile.getName();\n          user.email = profile.getEmail();\n          user.photoUrl = profile.getImageUrl();\n          user.firstName = profile.getGivenName();\n          user.lastName = profile.getFamilyName();\n          user.authToken = token;\n          user.idToken = backendToken;\n          user.response = authResponse;\n        }\n\n        resolve(user);\n      }, closed => {\n        reject(closed);\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n  signOut(revoke) {\n    return new Promise((resolve, reject) => {\n      let signOutPromise;\n\n      if (revoke) {\n        signOutPromise = this.auth2.disconnect();\n      } else {\n        signOutPromise = this.auth2.signOut();\n      }\n\n      signOutPromise.then(err => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve();\n        }\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n}\n\nGoogleLoginProvider.PROVIDER_ID = 'GOOGLE';\n/**\n * The service encapsulating the social login functionality. Exposes methods like\n * `signIn`, `signOut`. Also, exposes an `authState` `Observable` that one can\n * subscribe to get the current logged in user information.\n *\n * @dynamic\n */\n\nclass SocialAuthService {\n  /**\n   * @param config A `SocialAuthServiceConfig` object or a `Promise` that resolves to a `SocialAuthServiceConfig` object\n   */\n  constructor(config) {\n    this.providers = new Map();\n    this.autoLogin = false;\n    this._user = null;\n    this._authState = new ReplaySubject(1);\n    /* Consider making this an enum comprising LOADING, LOADED, FAILED etc. */\n\n    this.initialized = false;\n    this._initState = new AsyncSubject();\n\n    if (config instanceof Promise) {\n      config.then(config => {\n        this.initialize(config);\n      });\n    } else {\n      this.initialize(config);\n    }\n  }\n  /** An `Observable` that one can subscribe to get the current logged in user information */\n\n\n  get authState() {\n    return this._authState.asObservable();\n  }\n  /** An `Observable` to communicate the readiness of the service and associated login providers */\n\n\n  get initState() {\n    return this._initState.asObservable();\n  }\n\n  initialize(config) {\n    this.autoLogin = config.autoLogin !== undefined ? config.autoLogin : false;\n    const {\n      onError = console.error\n    } = config;\n    config.providers.forEach(item => {\n      this.providers.set(item.id, item.provider);\n    });\n    Promise.all(Array.from(this.providers.values()).map(provider => provider.initialize())).then(() => {\n      if (this.autoLogin) {\n        const loginStatusPromises = [];\n        let loggedIn = false;\n        this.providers.forEach((provider, key) => {\n          let promise = provider.getLoginStatus();\n          loginStatusPromises.push(promise);\n          promise.then(user => {\n            user.provider = key;\n            this._user = user;\n\n            this._authState.next(user);\n\n            loggedIn = true;\n          }).catch(console.debug);\n        });\n        Promise.all(loginStatusPromises).catch(() => {\n          if (!loggedIn) {\n            this._user = null;\n\n            this._authState.next(null);\n          }\n        });\n      }\n    }).catch(error => {\n      onError(error);\n    }).finally(() => {\n      this.initialized = true;\n\n      this._initState.next(this.initialized);\n\n      this._initState.complete();\n    });\n  }\n\n  refreshAuthToken(providerId) {\n    return new Promise((resolve, reject) => {\n      if (!this.initialized) {\n        reject(SocialAuthService.ERR_NOT_INITIALIZED);\n      } else if (providerId !== GoogleLoginProvider.PROVIDER_ID) {\n        reject(SocialAuthService.ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN);\n      } else {\n        const providerObject = this.providers.get(providerId);\n\n        if (providerObject) {\n          providerObject.getLoginStatus({\n            refreshToken: true\n          }).then(user => {\n            user.provider = providerId;\n            this._user = user;\n\n            this._authState.next(user);\n\n            resolve();\n          }).catch(err => {\n            reject(err);\n          });\n        } else {\n          reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n        }\n      }\n    });\n  }\n  /**\n   * A method used to sign in a user with a specific `LoginProvider`.\n   *\n   * @param providerId Id with which the `LoginProvider` has been registered with the service\n   * @param signInOptions Optional `LoginProvider` specific arguments\n   * @returns A `Promise` that resolves to the authenticated user information\n   */\n\n\n  signIn(providerId, signInOptions) {\n    return new Promise((resolve, reject) => {\n      if (!this.initialized) {\n        reject(SocialAuthService.ERR_NOT_INITIALIZED);\n      } else {\n        let providerObject = this.providers.get(providerId);\n\n        if (providerObject) {\n          providerObject.signIn(signInOptions).then(user => {\n            user.provider = providerId;\n            resolve(user);\n            this._user = user;\n\n            this._authState.next(user);\n          }).catch(err => {\n            reject(err);\n          });\n        } else {\n          reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n        }\n      }\n    });\n  }\n  /**\n   * A method used to sign out the currently loggen in user.\n   *\n   * @param revoke Optional parameter to specify whether a hard sign out is to be performed\n   * @returns A `Promise` that resolves if the operation is successful, rejects otherwise\n   */\n\n\n  signOut(revoke = false) {\n    return new Promise((resolve, reject) => {\n      if (!this.initialized) {\n        reject(SocialAuthService.ERR_NOT_INITIALIZED);\n      } else if (!this._user) {\n        reject(SocialAuthService.ERR_NOT_LOGGED_IN);\n      } else {\n        let providerId = this._user.provider;\n        let providerObject = this.providers.get(providerId);\n\n        if (providerObject) {\n          providerObject.signOut(revoke).then(() => {\n            resolve();\n            this._user = null;\n\n            this._authState.next(null);\n          }).catch(err => {\n            reject(err);\n          });\n        } else {\n          reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n        }\n      }\n    });\n  }\n\n}\n\nSocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND = 'Login provider not found';\nSocialAuthService.ERR_NOT_LOGGED_IN = 'Not logged in';\nSocialAuthService.ERR_NOT_INITIALIZED = 'Login providers not ready yet. Are there errors on your console?';\nSocialAuthService.ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN = 'Chosen login provider is not supported for refreshing a token';\n\nSocialAuthService.ɵfac = function SocialAuthService_Factory(t) {\n  return new (t || SocialAuthService)(i0.ɵɵinject('SocialAuthServiceConfig'));\n};\n\nSocialAuthService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: SocialAuthService,\n  factory: SocialAuthService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SocialAuthService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: ['SocialAuthServiceConfig']\n      }]\n    }];\n  }, null);\n})();\n/**\n * The main module of angularx-social-login library.\n */\n\n\nclass SocialLoginModule {\n  constructor(parentModule) {\n    if (parentModule) {\n      throw new Error('SocialLoginModule is already loaded. Import it in the AppModule only');\n    }\n  }\n\n  static initialize(config) {\n    return {\n      ngModule: SocialLoginModule,\n      providers: [SocialAuthService, {\n        provide: 'SocialAuthServiceConfig',\n        useValue: config\n      }]\n    };\n  }\n\n}\n\nSocialLoginModule.ɵfac = function SocialLoginModule_Factory(t) {\n  return new (t || SocialLoginModule)(i0.ɵɵinject(SocialLoginModule, 12));\n};\n\nSocialLoginModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: SocialLoginModule\n});\nSocialLoginModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [SocialAuthService],\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SocialLoginModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      providers: [SocialAuthService]\n    }]\n  }], function () {\n    return [{\n      type: SocialLoginModule,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }];\n  }, null);\n})(); // Simulates login / logout without actually requiring an Internet connection.\n//\n// Useful for certain development situations.\n//\n// For example, if you want to simulate the greatest football referee England has ever produced:\n//\n//  const dummyUser: SocialUser = {\n//     id: '0123456789',\n//     name: 'Howard Webb',\n//     email: 'howard@webb.com',\n//     firstName: 'Howard',\n//     lastName: 'Webb',\n//     authToken: 'dummyAuthToken',\n//     photoUrl: 'https://en.wikipedia.org/wiki/Howard_Webb#/media/File:Howard_Webb_march11.jpg',\n//     provider: 'DUMMY',\n//     idToken: 'dummyIdToken',\n//     authorizationCode: 'dummyAuthCode'\n// };\n//\n//  let config = new AuthServiceConfig([\n//  { ... },\n//  {\n//       id: DummyLoginProvider.PROVIDER_ID,\n//       provider: new DummyLoginProvider(dummyUser)  // Pass your user into the constructor\n//   },\n//  { ... }\n//  ]);\n\n\nclass DummyLoginProvider extends BaseLoginProvider {\n  constructor(dummy) {\n    super();\n\n    if (dummy) {\n      this.dummy = dummy;\n    } else {\n      this.dummy = DummyLoginProvider.DEFAULT_USER;\n    } // Start not logged in\n\n\n    this.loggedIn = false;\n  }\n\n  getLoginStatus() {\n    return new Promise((resolve, reject) => {\n      if (this.loggedIn) {\n        resolve(this.dummy);\n      } else {\n        reject('No user is currently logged in.');\n      }\n    });\n  }\n\n  initialize() {\n    return new Promise((resolve, reject) => {\n      resolve();\n    });\n  }\n\n  signIn() {\n    return new Promise((resolve, reject) => {\n      this.loggedIn = true;\n      resolve(this.dummy);\n    });\n  }\n\n  signOut(revoke) {\n    return new Promise((resolve, reject) => {\n      this.loggedIn = false;\n      resolve();\n    });\n  }\n\n}\n\nDummyLoginProvider.PROVIDER_ID = 'DUMMY';\nDummyLoginProvider.DEFAULT_USER = {\n  id: '1234567890',\n  name: 'Mickey Mouse',\n  email: 'mickey@mouse.com',\n  firstName: 'Mickey',\n  lastName: 'Mouse',\n  authToken: 'dummyAuthToken',\n  photoUrl: 'https://en.wikipedia.org/wiki/File:Mickey_Mouse.png',\n  provider: 'DUMMY',\n  idToken: 'dummyIdToken',\n  authorizationCode: 'dummyAuthCode',\n  response: {}\n};\n\nclass FacebookLoginProvider extends BaseLoginProvider {\n  constructor(clientId, initOptions = {}) {\n    super();\n    this.clientId = clientId;\n    this.requestOptions = {\n      scope: 'email,public_profile',\n      locale: 'en_US',\n      fields: 'name,email,picture,first_name,last_name',\n      version: 'v10.0'\n    };\n    this.requestOptions = Object.assign(Object.assign({}, this.requestOptions), initOptions);\n  }\n\n  initialize() {\n    return new Promise((resolve, reject) => {\n      try {\n        this.loadScript(FacebookLoginProvider.PROVIDER_ID, `//connect.facebook.net/${this.requestOptions.locale}/sdk.js`, () => {\n          FB.init({\n            appId: this.clientId,\n            autoLogAppEvents: true,\n            cookie: true,\n            xfbml: true,\n            version: this.requestOptions.version\n          });\n          resolve();\n        });\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  getLoginStatus() {\n    return new Promise((resolve, reject) => {\n      FB.getLoginStatus(response => {\n        if (response.status === 'connected') {\n          let authResponse = response.authResponse;\n          FB.api(`/me?fields=${this.requestOptions.fields}`, fbUser => {\n            let user = new SocialUser();\n            user.id = fbUser.id;\n            user.name = fbUser.name;\n            user.email = fbUser.email;\n            user.photoUrl = 'https://graph.facebook.com/' + fbUser.id + '/picture?type=normal&access_token=' + authResponse.accessToken;\n            user.firstName = fbUser.first_name;\n            user.lastName = fbUser.last_name;\n            user.authToken = authResponse.accessToken;\n            user.response = fbUser;\n            resolve(user);\n          });\n        } else {\n          reject(`No user is currently logged in with ${FacebookLoginProvider.PROVIDER_ID}`);\n        }\n      });\n    });\n  }\n\n  signIn(signInOptions) {\n    const options = Object.assign(Object.assign({}, this.requestOptions), signInOptions);\n    return new Promise((resolve, reject) => {\n      FB.login(response => {\n        if (response.authResponse) {\n          let authResponse = response.authResponse;\n          FB.api(`/me?fields=${options.fields}`, fbUser => {\n            let user = new SocialUser();\n            user.id = fbUser.id;\n            user.name = fbUser.name;\n            user.email = fbUser.email;\n            user.photoUrl = 'https://graph.facebook.com/' + fbUser.id + '/picture?type=normal';\n            user.firstName = fbUser.first_name;\n            user.lastName = fbUser.last_name;\n            user.authToken = authResponse.accessToken;\n            user.response = fbUser;\n            resolve(user);\n          });\n        } else {\n          reject('User cancelled login or did not fully authorize.');\n        }\n      }, options);\n    });\n  }\n\n  signOut() {\n    return new Promise((resolve, reject) => {\n      FB.logout(response => {\n        resolve();\n      });\n    });\n  }\n\n}\n\nFacebookLoginProvider.PROVIDER_ID = 'FACEBOOK';\n\nclass AmazonLoginProvider extends BaseLoginProvider {\n  constructor(clientId, initOptions = {\n    scope: 'profile',\n    scope_data: {\n      profile: {\n        essential: false\n      }\n    },\n    redirect_uri: location.origin\n  }) {\n    super();\n    this.clientId = clientId;\n    this.initOptions = initOptions;\n  }\n\n  initialize() {\n    let amazonRoot = null;\n\n    if (document) {\n      amazonRoot = document.createElement('div');\n      amazonRoot.id = 'amazon-root';\n      document.body.appendChild(amazonRoot);\n    }\n\n    window.onAmazonLoginReady = () => {\n      amazon.Login.setClientId(this.clientId);\n    };\n\n    return new Promise((resolve, reject) => {\n      try {\n        this.loadScript('amazon-login-sdk', 'https://assets.loginwithamazon.com/sdk/na/login1.js', () => {\n          resolve();\n        }, amazonRoot);\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  getLoginStatus() {\n    return new Promise((resolve, reject) => {\n      let token = this.retrieveToken();\n\n      if (token) {\n        amazon.Login.retrieveProfile(token, response => {\n          if (response.success) {\n            let user = new SocialUser();\n            user.id = response.profile.CustomerId;\n            user.name = response.profile.Name;\n            user.email = response.profile.PrimaryEmail;\n            user.response = response.profile;\n            resolve(user);\n          } else {\n            reject(response.error);\n          }\n        });\n      } else {\n        reject(`No user is currently logged in with ${AmazonLoginProvider.PROVIDER_ID}`);\n      }\n    });\n  }\n\n  signIn(signInOptions) {\n    const options = Object.assign(Object.assign({}, this.initOptions), signInOptions);\n    return new Promise((resolve, reject) => {\n      amazon.Login.authorize(options, authResponse => {\n        if (authResponse.error) {\n          reject(authResponse.error);\n        } else {\n          amazon.Login.retrieveProfile(authResponse.access_token, response => {\n            let user = new SocialUser();\n            user.id = response.profile.CustomerId;\n            user.name = response.profile.Name;\n            user.email = response.profile.PrimaryEmail;\n            user.authToken = authResponse.access_token;\n            user.response = response.profile;\n            this.persistToken(authResponse.access_token);\n            resolve(user);\n          });\n        }\n      });\n    });\n  }\n\n  signOut() {\n    return new Promise((resolve, reject) => {\n      try {\n        amazon.Login.logout();\n        this.clearToken();\n        resolve();\n      } catch (err) {\n        reject(err.message);\n      }\n    });\n  }\n\n  persistToken(token) {\n    localStorage.setItem(`${AmazonLoginProvider.PROVIDER_ID}_token`, token);\n  }\n\n  retrieveToken() {\n    return localStorage.getItem(`${AmazonLoginProvider.PROVIDER_ID}_token`);\n  }\n\n  clearToken() {\n    localStorage.removeItem(`${AmazonLoginProvider.PROVIDER_ID}_token`);\n  }\n\n}\n\nAmazonLoginProvider.PROVIDER_ID = 'AMAZON';\n\nclass VKLoginProvider extends BaseLoginProvider {\n  constructor(clientId, initOptions = {\n    fields: 'photo_max,contacts',\n    version: '5.124'\n  }) {\n    super();\n    this.clientId = clientId;\n    this.initOptions = initOptions;\n    this.VK_API_URL = '//vk.com/js/api/openapi.js';\n    this.VK_API_GET_USER = 'users.get';\n  }\n\n  initialize() {\n    return new Promise((resolve, reject) => {\n      try {\n        this.loadScript(VKLoginProvider.PROVIDER_ID, this.VK_API_URL, () => {\n          VK.init({\n            apiId: this.clientId\n          });\n          resolve();\n        });\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  getLoginStatus() {\n    return new Promise((resolve, reject) => this.getLoginStatusInternal(resolve, reject));\n  }\n\n  signIn() {\n    return new Promise((resolve, reject) => this.signInInternal(resolve, reject));\n  }\n\n  signOut() {\n    return new Promise((resolve, reject) => {\n      VK.Auth.logout(response => {\n        resolve();\n      });\n    });\n  }\n\n  signInInternal(resolve, reject) {\n    VK.Auth.login(loginResponse => {\n      if (loginResponse.status === 'connected') {\n        this.getUser(loginResponse.session.mid, loginResponse.session.sid, resolve);\n      }\n    });\n  }\n\n  getUser(userId, token, resolve) {\n    VK.Api.call(this.VK_API_GET_USER, {\n      user_id: userId,\n      fields: this.initOptions.fields,\n      v: this.initOptions.version\n    }, userResponse => {\n      resolve(this.createUser(Object.assign({}, {\n        token\n      }, userResponse.response[0])));\n    });\n  }\n\n  getLoginStatusInternal(resolve, reject) {\n    VK.Auth.getLoginStatus(loginResponse => {\n      if (loginResponse.status === 'connected') {\n        this.getUser(loginResponse.session.mid, loginResponse.session.sid, resolve);\n      }\n    });\n  }\n\n  createUser(response) {\n    const user = new SocialUser();\n    user.id = response.id;\n    user.name = `${response.first_name} ${response.last_name}`;\n    user.photoUrl = response.photo_max;\n    user.authToken = response.token;\n    return user;\n  }\n\n}\n\nVKLoginProvider.PROVIDER_ID = 'VK';\n/**\n * Protocol modes supported by MSAL.\n */\n\nvar ProtocolMode;\n\n(function (ProtocolMode) {\n  ProtocolMode[\"AAD\"] = \"AAD\";\n  ProtocolMode[\"OIDC\"] = \"OIDC\";\n})(ProtocolMode || (ProtocolMode = {}));\n\nconst COMMON_AUTHORITY = 'https://login.microsoftonline.com/common/';\n/**\n * Microsoft Authentication using MSAL v2: https://github.com/AzureAD/microsoft-authentication-library-for-js/tree/dev/lib/msal-browser\n */\n\nclass MicrosoftLoginProvider extends BaseLoginProvider {\n  constructor(clientId, initOptions) {\n    super();\n    this.clientId = clientId;\n    this.initOptions = {\n      authority: COMMON_AUTHORITY,\n      scopes: ['openid', 'email', 'profile', 'User.Read'],\n      knownAuthorities: [],\n      protocolMode: ProtocolMode.AAD,\n      clientCapabilities: [],\n      cacheLocation: 'sessionStorage'\n    };\n    this.initOptions = Object.assign(Object.assign({}, this.initOptions), initOptions);\n  }\n\n  initialize() {\n    return new Promise((resolve, reject) => {\n      this.loadScript(MicrosoftLoginProvider.PROVIDER_ID, 'https://alcdn.msauth.net/browser/2.13.1/js/msal-browser.js', () => {\n        var _a;\n\n        try {\n          const config = {\n            auth: {\n              clientId: this.clientId,\n              redirectUri: (_a = this.initOptions.redirect_uri) !== null && _a !== void 0 ? _a : location.origin,\n              authority: this.initOptions.authority,\n              knownAuthorities: this.initOptions.knownAuthorities,\n              protocolMode: this.initOptions.protocolMode,\n              clientCapabilities: this.initOptions.clientCapabilities\n            },\n            cache: !this.initOptions.cacheLocation ? null : {\n              cacheLocation: this.initOptions.cacheLocation\n            }\n          };\n          this._instance = new msal.PublicClientApplication(config);\n          resolve();\n        } catch (e) {\n          reject(e);\n        }\n      });\n    });\n  }\n\n  getSocialUser(loginResponse) {\n    return new Promise((resolve, reject) => {\n      //After login, use Microsoft Graph API to get user info\n      let meRequest = new XMLHttpRequest();\n\n      meRequest.onreadystatechange = () => {\n        if (meRequest.readyState == 4) {\n          try {\n            if (meRequest.status == 200) {\n              let userInfo = JSON.parse(meRequest.responseText);\n              let user = new SocialUser();\n              user.provider = MicrosoftLoginProvider.PROVIDER_ID;\n              user.id = loginResponse.idToken;\n              user.authToken = loginResponse.accessToken;\n              user.name = loginResponse.idTokenClaims.name;\n              user.email = loginResponse.account.username;\n              user.idToken = loginResponse.idToken;\n              user.response = loginResponse;\n              user.firstName = userInfo.givenName;\n              user.lastName = userInfo.surname;\n              resolve(user);\n            } else {\n              reject(`Error retrieving user info: ${meRequest.status}`);\n            }\n          } catch (err) {\n            reject(err);\n          }\n        }\n      }; //Microsoft Graph ME Endpoint: https://docs.microsoft.com/en-us/graph/api/user-get?view=graph-rest-1.0&tabs=http\n\n\n      meRequest.open('GET', 'https://graph.microsoft.com/v1.0/me');\n      meRequest.setRequestHeader('Authorization', `Bearer ${loginResponse.accessToken}`);\n\n      try {\n        meRequest.send();\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  getLoginStatus() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const accounts = this._instance.getAllAccounts();\n\n      if ((accounts === null || accounts === void 0 ? void 0 : accounts.length) > 0) {\n        const loginResponse = yield this._instance.ssoSilent({\n          scopes: this.initOptions.scopes,\n          loginHint: accounts[0].username\n        });\n        return yield this.getSocialUser(loginResponse);\n      } else {\n        throw `No user is currently logged in with ${MicrosoftLoginProvider.PROVIDER_ID}`;\n      }\n    });\n  }\n\n  signIn() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const loginResponse = yield this._instance.loginPopup({\n        scopes: this.initOptions.scopes\n      });\n      return yield this.getSocialUser(loginResponse);\n    });\n  }\n\n  signOut(revoke) {\n    var _a, _b;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      const accounts = this._instance.getAllAccounts();\n\n      if ((accounts === null || accounts === void 0 ? void 0 : accounts.length) > 0) {\n        yield this._instance.logoutPopup({\n          account: accounts[0],\n          postLogoutRedirectUri: (_b = (_a = this.initOptions.logout_redirect_uri) !== null && _a !== void 0 ? _a : this.initOptions.redirect_uri) !== null && _b !== void 0 ? _b : location.href\n        });\n      }\n    });\n  }\n\n}\n\nMicrosoftLoginProvider.PROVIDER_ID = 'MICROSOFT';\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AmazonLoginProvider, BaseLoginProvider, DummyLoginProvider, FacebookLoginProvider, GoogleLoginProvider, MicrosoftLoginProvider, SocialAuthService, SocialLoginModule, SocialUser, VKLoginProvider };","map":{"version":3,"sources":["E:/project_2/codee/fe/codegym-cinema-fe/node_modules/angularx-social-login/fesm2015/angularx-social-login.js"],"names":["i0","Injectable","Inject","NgModule","Optional","SkipSelf","ReplaySubject","AsyncSubject","CommonModule","__awaiter","BaseLoginProvider","constructor","loadScript","id","src","onload","parentElement","document","getElementById","signInJS","createElement","async","head","appendChild","SocialUser","GoogleLoginProvider","clientId","initOptions","scope","initialize","Promise","resolve","reject","PROVIDER_ID","gapi","load","auth2","init","Object","assign","client_id","then","catch","err","getLoginStatus","loginStatusOptions","options","isSignedIn","get","user","profile","currentUser","getBasicProfile","authResponse","getAuthResponse","getId","name","getName","email","getEmail","photoUrl","getImageUrl","firstName","getGivenName","lastName","getFamilyName","response","resolveUser","authToken","access_token","idToken","id_token","refreshToken","reloadAuthResponse","signIn","signInOptions","offlineAccess","offline_access","promise","grantOfflineAccess","code","authorizationCode","token","backendToken","closed","signOut","revoke","signOutPromise","disconnect","SocialAuthService","config","providers","Map","autoLogin","_user","_authState","initialized","_initState","authState","asObservable","initState","undefined","onError","console","error","forEach","item","set","provider","all","Array","from","values","map","loginStatusPromises","loggedIn","key","push","next","debug","finally","complete","refreshAuthToken","providerId","ERR_NOT_INITIALIZED","ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN","providerObject","ERR_LOGIN_PROVIDER_NOT_FOUND","ERR_NOT_LOGGED_IN","ɵfac","ɵprov","type","decorators","args","SocialLoginModule","parentModule","Error","ngModule","provide","useValue","ɵmod","ɵinj","imports","DummyLoginProvider","dummy","DEFAULT_USER","FacebookLoginProvider","requestOptions","locale","fields","version","FB","appId","autoLogAppEvents","cookie","xfbml","status","api","fbUser","accessToken","first_name","last_name","login","logout","AmazonLoginProvider","scope_data","essential","redirect_uri","location","origin","amazonRoot","body","window","onAmazonLoginReady","amazon","Login","setClientId","retrieveToken","retrieveProfile","success","CustomerId","Name","PrimaryEmail","authorize","persistToken","clearToken","message","localStorage","setItem","getItem","removeItem","VKLoginProvider","VK_API_URL","VK_API_GET_USER","VK","apiId","getLoginStatusInternal","signInInternal","Auth","loginResponse","getUser","session","mid","sid","userId","Api","call","user_id","v","userResponse","createUser","photo_max","ProtocolMode","COMMON_AUTHORITY","MicrosoftLoginProvider","authority","scopes","knownAuthorities","protocolMode","AAD","clientCapabilities","cacheLocation","_a","auth","redirectUri","cache","_instance","msal","PublicClientApplication","e","getSocialUser","meRequest","XMLHttpRequest","onreadystatechange","readyState","userInfo","JSON","parse","responseText","idTokenClaims","account","username","givenName","surname","open","setRequestHeader","send","accounts","getAllAccounts","length","ssoSilent","loginHint","loginPopup","_b","logoutPopup","postLogoutRedirectUri","logout_redirect_uri","href"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, Inject, NgModule, Optional, SkipSelf } from '@angular/core';\nimport { ReplaySubject, AsyncSubject } from 'rxjs';\nimport { CommonModule } from '@angular/common';\nimport { __awaiter } from 'tslib';\n\nclass BaseLoginProvider {\n    constructor() { }\n    loadScript(id, src, onload, parentElement = null) {\n        // get document if platform is only browser\n        if (typeof document !== 'undefined' && !document.getElementById(id)) {\n            let signInJS = document.createElement('script');\n            signInJS.async = true;\n            signInJS.src = src;\n            signInJS.onload = onload;\n            if (!parentElement) {\n                parentElement = document.head;\n            }\n            parentElement.appendChild(signInJS);\n        }\n    }\n}\n\nclass SocialUser {\n}\n\nclass GoogleLoginProvider extends BaseLoginProvider {\n    constructor(clientId, initOptions = { scope: 'email' }) {\n        super();\n        this.clientId = clientId;\n        this.initOptions = initOptions;\n    }\n    initialize() {\n        return new Promise((resolve, reject) => {\n            try {\n                this.loadScript(GoogleLoginProvider.PROVIDER_ID, 'https://apis.google.com/js/platform.js', () => {\n                    gapi.load('auth2', () => {\n                        this.auth2 = gapi.auth2.init(Object.assign(Object.assign({}, this.initOptions), { client_id: this.clientId }));\n                        this.auth2\n                            .then(() => {\n                            resolve();\n                        })\n                            .catch((err) => {\n                            reject(err);\n                        });\n                    });\n                });\n            }\n            catch (err) {\n                reject(err);\n            }\n        });\n    }\n    getLoginStatus(loginStatusOptions) {\n        const options = Object.assign(Object.assign({}, this.initOptions), loginStatusOptions);\n        return new Promise((resolve, reject) => {\n            if (this.auth2.isSignedIn.get()) {\n                let user = new SocialUser();\n                const profile = this.auth2.currentUser.get().getBasicProfile();\n                const authResponse = this.auth2.currentUser.get().getAuthResponse(true); // get complete authResponse object\n                user.id = profile.getId();\n                user.name = profile.getName();\n                user.email = profile.getEmail();\n                user.photoUrl = profile.getImageUrl();\n                user.firstName = profile.getGivenName();\n                user.lastName = profile.getFamilyName();\n                user.response = authResponse;\n                const resolveUser = authResponse => {\n                    user.authToken = authResponse.access_token;\n                    user.idToken = authResponse.id_token;\n                    resolve(user);\n                };\n                if (options.refreshToken) {\n                    this.auth2.currentUser.get().reloadAuthResponse().then(resolveUser);\n                }\n                else {\n                    const authResponse = this.auth2.currentUser.get().getAuthResponse(true);\n                    resolveUser(authResponse);\n                }\n            }\n            else {\n                reject(`No user is currently logged in with ${GoogleLoginProvider.PROVIDER_ID}`);\n            }\n        });\n    }\n    signIn(signInOptions) {\n        const options = Object.assign(Object.assign({}, this.initOptions), signInOptions);\n        return new Promise((resolve, reject) => {\n            const offlineAccess = options && options.offline_access;\n            let promise = !offlineAccess\n                ? this.auth2.signIn(signInOptions)\n                : this.auth2.grantOfflineAccess(signInOptions);\n            promise\n                .then((response) => {\n                let user = new SocialUser();\n                if (response && response.code) {\n                    user.authorizationCode = response.code;\n                }\n                else {\n                    let profile = this.auth2.currentUser.get().getBasicProfile();\n                    let authResponse = this.auth2.currentUser.get().getAuthResponse(true);\n                    let token = authResponse.access_token;\n                    let backendToken = authResponse.id_token;\n                    user.id = profile.getId();\n                    user.name = profile.getName();\n                    user.email = profile.getEmail();\n                    user.photoUrl = profile.getImageUrl();\n                    user.firstName = profile.getGivenName();\n                    user.lastName = profile.getFamilyName();\n                    user.authToken = token;\n                    user.idToken = backendToken;\n                    user.response = authResponse;\n                }\n                resolve(user);\n            }, (closed) => {\n                reject(closed);\n            })\n                .catch((err) => {\n                reject(err);\n            });\n        });\n    }\n    signOut(revoke) {\n        return new Promise((resolve, reject) => {\n            let signOutPromise;\n            if (revoke) {\n                signOutPromise = this.auth2.disconnect();\n            }\n            else {\n                signOutPromise = this.auth2.signOut();\n            }\n            signOutPromise\n                .then((err) => {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    resolve();\n                }\n            })\n                .catch((err) => {\n                reject(err);\n            });\n        });\n    }\n}\nGoogleLoginProvider.PROVIDER_ID = 'GOOGLE';\n\n/**\n * The service encapsulating the social login functionality. Exposes methods like\n * `signIn`, `signOut`. Also, exposes an `authState` `Observable` that one can\n * subscribe to get the current logged in user information.\n *\n * @dynamic\n */\nclass SocialAuthService {\n    /**\n     * @param config A `SocialAuthServiceConfig` object or a `Promise` that resolves to a `SocialAuthServiceConfig` object\n     */\n    constructor(config) {\n        this.providers = new Map();\n        this.autoLogin = false;\n        this._user = null;\n        this._authState = new ReplaySubject(1);\n        /* Consider making this an enum comprising LOADING, LOADED, FAILED etc. */\n        this.initialized = false;\n        this._initState = new AsyncSubject();\n        if (config instanceof Promise) {\n            config.then((config) => {\n                this.initialize(config);\n            });\n        }\n        else {\n            this.initialize(config);\n        }\n    }\n    /** An `Observable` that one can subscribe to get the current logged in user information */\n    get authState() {\n        return this._authState.asObservable();\n    }\n    /** An `Observable` to communicate the readiness of the service and associated login providers */\n    get initState() {\n        return this._initState.asObservable();\n    }\n    initialize(config) {\n        this.autoLogin = config.autoLogin !== undefined ? config.autoLogin : false;\n        const { onError = console.error } = config;\n        config.providers.forEach((item) => {\n            this.providers.set(item.id, item.provider);\n        });\n        Promise.all(Array.from(this.providers.values()).map((provider) => provider.initialize()))\n            .then(() => {\n            if (this.autoLogin) {\n                const loginStatusPromises = [];\n                let loggedIn = false;\n                this.providers.forEach((provider, key) => {\n                    let promise = provider.getLoginStatus();\n                    loginStatusPromises.push(promise);\n                    promise\n                        .then((user) => {\n                        user.provider = key;\n                        this._user = user;\n                        this._authState.next(user);\n                        loggedIn = true;\n                    })\n                        .catch(console.debug);\n                });\n                Promise.all(loginStatusPromises).catch(() => {\n                    if (!loggedIn) {\n                        this._user = null;\n                        this._authState.next(null);\n                    }\n                });\n            }\n        })\n            .catch((error) => {\n            onError(error);\n        })\n            .finally(() => {\n            this.initialized = true;\n            this._initState.next(this.initialized);\n            this._initState.complete();\n        });\n    }\n    refreshAuthToken(providerId) {\n        return new Promise((resolve, reject) => {\n            if (!this.initialized) {\n                reject(SocialAuthService.ERR_NOT_INITIALIZED);\n            }\n            else if (providerId !== GoogleLoginProvider.PROVIDER_ID) {\n                reject(SocialAuthService.ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN);\n            }\n            else {\n                const providerObject = this.providers.get(providerId);\n                if (providerObject) {\n                    providerObject\n                        .getLoginStatus({ refreshToken: true })\n                        .then((user) => {\n                        user.provider = providerId;\n                        this._user = user;\n                        this._authState.next(user);\n                        resolve();\n                    })\n                        .catch((err) => {\n                        reject(err);\n                    });\n                }\n                else {\n                    reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n                }\n            }\n        });\n    }\n    /**\n     * A method used to sign in a user with a specific `LoginProvider`.\n     *\n     * @param providerId Id with which the `LoginProvider` has been registered with the service\n     * @param signInOptions Optional `LoginProvider` specific arguments\n     * @returns A `Promise` that resolves to the authenticated user information\n     */\n    signIn(providerId, signInOptions) {\n        return new Promise((resolve, reject) => {\n            if (!this.initialized) {\n                reject(SocialAuthService.ERR_NOT_INITIALIZED);\n            }\n            else {\n                let providerObject = this.providers.get(providerId);\n                if (providerObject) {\n                    providerObject\n                        .signIn(signInOptions)\n                        .then((user) => {\n                        user.provider = providerId;\n                        resolve(user);\n                        this._user = user;\n                        this._authState.next(user);\n                    })\n                        .catch((err) => {\n                        reject(err);\n                    });\n                }\n                else {\n                    reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n                }\n            }\n        });\n    }\n    /**\n     * A method used to sign out the currently loggen in user.\n     *\n     * @param revoke Optional parameter to specify whether a hard sign out is to be performed\n     * @returns A `Promise` that resolves if the operation is successful, rejects otherwise\n     */\n    signOut(revoke = false) {\n        return new Promise((resolve, reject) => {\n            if (!this.initialized) {\n                reject(SocialAuthService.ERR_NOT_INITIALIZED);\n            }\n            else if (!this._user) {\n                reject(SocialAuthService.ERR_NOT_LOGGED_IN);\n            }\n            else {\n                let providerId = this._user.provider;\n                let providerObject = this.providers.get(providerId);\n                if (providerObject) {\n                    providerObject\n                        .signOut(revoke)\n                        .then(() => {\n                        resolve();\n                        this._user = null;\n                        this._authState.next(null);\n                    })\n                        .catch((err) => {\n                        reject(err);\n                    });\n                }\n                else {\n                    reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n                }\n            }\n        });\n    }\n}\nSocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND = 'Login provider not found';\nSocialAuthService.ERR_NOT_LOGGED_IN = 'Not logged in';\nSocialAuthService.ERR_NOT_INITIALIZED = 'Login providers not ready yet. Are there errors on your console?';\nSocialAuthService.ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN = 'Chosen login provider is not supported for refreshing a token';\nSocialAuthService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.1\", ngImport: i0, type: SocialAuthService, deps: [{ token: 'SocialAuthServiceConfig' }], target: i0.ɵɵFactoryTarget.Injectable });\nSocialAuthService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.0.1\", ngImport: i0, type: SocialAuthService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.1\", ngImport: i0, type: SocialAuthService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: ['SocialAuthServiceConfig']\n                }] }]; } });\n\n/**\n * The main module of angularx-social-login library.\n */\nclass SocialLoginModule {\n    constructor(parentModule) {\n        if (parentModule) {\n            throw new Error('SocialLoginModule is already loaded. Import it in the AppModule only');\n        }\n    }\n    static initialize(config) {\n        return {\n            ngModule: SocialLoginModule,\n            providers: [\n                SocialAuthService,\n                {\n                    provide: 'SocialAuthServiceConfig',\n                    useValue: config\n                }\n            ]\n        };\n    }\n}\nSocialLoginModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.1\", ngImport: i0, type: SocialLoginModule, deps: [{ token: SocialLoginModule, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.NgModule });\nSocialLoginModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.0.1\", ngImport: i0, type: SocialLoginModule, imports: [CommonModule] });\nSocialLoginModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.0.1\", ngImport: i0, type: SocialLoginModule, providers: [\n        SocialAuthService\n    ], imports: [[\n            CommonModule\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.1\", ngImport: i0, type: SocialLoginModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule\n                    ],\n                    providers: [\n                        SocialAuthService\n                    ]\n                }]\n        }], ctorParameters: function () { return [{ type: SocialLoginModule, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }]; } });\n\n// Simulates login / logout without actually requiring an Internet connection.\n//\n// Useful for certain development situations.\n//\n// For example, if you want to simulate the greatest football referee England has ever produced:\n//\n//  const dummyUser: SocialUser = {\n//     id: '0123456789',\n//     name: 'Howard Webb',\n//     email: 'howard@webb.com',\n//     firstName: 'Howard',\n//     lastName: 'Webb',\n//     authToken: 'dummyAuthToken',\n//     photoUrl: 'https://en.wikipedia.org/wiki/Howard_Webb#/media/File:Howard_Webb_march11.jpg',\n//     provider: 'DUMMY',\n//     idToken: 'dummyIdToken',\n//     authorizationCode: 'dummyAuthCode'\n// };\n//\n//  let config = new AuthServiceConfig([\n//  { ... },\n//  {\n//       id: DummyLoginProvider.PROVIDER_ID,\n//       provider: new DummyLoginProvider(dummyUser)  // Pass your user into the constructor\n//   },\n//  { ... }\n//  ]);\nclass DummyLoginProvider extends BaseLoginProvider {\n    constructor(dummy) {\n        super();\n        if (dummy) {\n            this.dummy = dummy;\n        }\n        else {\n            this.dummy = DummyLoginProvider.DEFAULT_USER;\n        }\n        // Start not logged in\n        this.loggedIn = false;\n    }\n    getLoginStatus() {\n        return new Promise((resolve, reject) => {\n            if (this.loggedIn) {\n                resolve(this.dummy);\n            }\n            else {\n                reject('No user is currently logged in.');\n            }\n        });\n    }\n    initialize() {\n        return new Promise((resolve, reject) => {\n            resolve();\n        });\n    }\n    signIn() {\n        return new Promise((resolve, reject) => {\n            this.loggedIn = true;\n            resolve(this.dummy);\n        });\n    }\n    signOut(revoke) {\n        return new Promise((resolve, reject) => {\n            this.loggedIn = false;\n            resolve();\n        });\n    }\n}\nDummyLoginProvider.PROVIDER_ID = 'DUMMY';\nDummyLoginProvider.DEFAULT_USER = {\n    id: '1234567890',\n    name: 'Mickey Mouse',\n    email: 'mickey@mouse.com',\n    firstName: 'Mickey',\n    lastName: 'Mouse',\n    authToken: 'dummyAuthToken',\n    photoUrl: 'https://en.wikipedia.org/wiki/File:Mickey_Mouse.png',\n    provider: 'DUMMY',\n    idToken: 'dummyIdToken',\n    authorizationCode: 'dummyAuthCode',\n    response: {},\n};\n\nclass FacebookLoginProvider extends BaseLoginProvider {\n    constructor(clientId, initOptions = {}) {\n        super();\n        this.clientId = clientId;\n        this.requestOptions = {\n            scope: 'email,public_profile',\n            locale: 'en_US',\n            fields: 'name,email,picture,first_name,last_name',\n            version: 'v10.0',\n        };\n        this.requestOptions = Object.assign(Object.assign({}, this.requestOptions), initOptions);\n    }\n    initialize() {\n        return new Promise((resolve, reject) => {\n            try {\n                this.loadScript(FacebookLoginProvider.PROVIDER_ID, `//connect.facebook.net/${this.requestOptions.locale}/sdk.js`, () => {\n                    FB.init({\n                        appId: this.clientId,\n                        autoLogAppEvents: true,\n                        cookie: true,\n                        xfbml: true,\n                        version: this.requestOptions.version,\n                    });\n                    resolve();\n                });\n            }\n            catch (err) {\n                reject(err);\n            }\n        });\n    }\n    getLoginStatus() {\n        return new Promise((resolve, reject) => {\n            FB.getLoginStatus((response) => {\n                if (response.status === 'connected') {\n                    let authResponse = response.authResponse;\n                    FB.api(`/me?fields=${this.requestOptions.fields}`, (fbUser) => {\n                        let user = new SocialUser();\n                        user.id = fbUser.id;\n                        user.name = fbUser.name;\n                        user.email = fbUser.email;\n                        user.photoUrl =\n                            'https://graph.facebook.com/' +\n                                fbUser.id +\n                                '/picture?type=normal&access_token=' +\n                                authResponse.accessToken;\n                        user.firstName = fbUser.first_name;\n                        user.lastName = fbUser.last_name;\n                        user.authToken = authResponse.accessToken;\n                        user.response = fbUser;\n                        resolve(user);\n                    });\n                }\n                else {\n                    reject(`No user is currently logged in with ${FacebookLoginProvider.PROVIDER_ID}`);\n                }\n            });\n        });\n    }\n    signIn(signInOptions) {\n        const options = Object.assign(Object.assign({}, this.requestOptions), signInOptions);\n        return new Promise((resolve, reject) => {\n            FB.login((response) => {\n                if (response.authResponse) {\n                    let authResponse = response.authResponse;\n                    FB.api(`/me?fields=${options.fields}`, (fbUser) => {\n                        let user = new SocialUser();\n                        user.id = fbUser.id;\n                        user.name = fbUser.name;\n                        user.email = fbUser.email;\n                        user.photoUrl =\n                            'https://graph.facebook.com/' +\n                                fbUser.id +\n                                '/picture?type=normal';\n                        user.firstName = fbUser.first_name;\n                        user.lastName = fbUser.last_name;\n                        user.authToken = authResponse.accessToken;\n                        user.response = fbUser;\n                        resolve(user);\n                    });\n                }\n                else {\n                    reject('User cancelled login or did not fully authorize.');\n                }\n            }, options);\n        });\n    }\n    signOut() {\n        return new Promise((resolve, reject) => {\n            FB.logout((response) => {\n                resolve();\n            });\n        });\n    }\n}\nFacebookLoginProvider.PROVIDER_ID = 'FACEBOOK';\n\nclass AmazonLoginProvider extends BaseLoginProvider {\n    constructor(clientId, initOptions = {\n        scope: 'profile',\n        scope_data: {\n            profile: { essential: false },\n        },\n        redirect_uri: location.origin,\n    }) {\n        super();\n        this.clientId = clientId;\n        this.initOptions = initOptions;\n    }\n    initialize() {\n        let amazonRoot = null;\n        if (document) {\n            amazonRoot = document.createElement('div');\n            amazonRoot.id = 'amazon-root';\n            document.body.appendChild(amazonRoot);\n        }\n        window.onAmazonLoginReady = () => {\n            amazon.Login.setClientId(this.clientId);\n        };\n        return new Promise((resolve, reject) => {\n            try {\n                this.loadScript('amazon-login-sdk', 'https://assets.loginwithamazon.com/sdk/na/login1.js', () => {\n                    resolve();\n                }, amazonRoot);\n            }\n            catch (err) {\n                reject(err);\n            }\n        });\n    }\n    getLoginStatus() {\n        return new Promise((resolve, reject) => {\n            let token = this.retrieveToken();\n            if (token) {\n                amazon.Login.retrieveProfile(token, (response) => {\n                    if (response.success) {\n                        let user = new SocialUser();\n                        user.id = response.profile.CustomerId;\n                        user.name = response.profile.Name;\n                        user.email = response.profile.PrimaryEmail;\n                        user.response = response.profile;\n                        resolve(user);\n                    }\n                    else {\n                        reject(response.error);\n                    }\n                });\n            }\n            else {\n                reject(`No user is currently logged in with ${AmazonLoginProvider.PROVIDER_ID}`);\n            }\n        });\n    }\n    signIn(signInOptions) {\n        const options = Object.assign(Object.assign({}, this.initOptions), signInOptions);\n        return new Promise((resolve, reject) => {\n            amazon.Login.authorize(options, (authResponse) => {\n                if (authResponse.error) {\n                    reject(authResponse.error);\n                }\n                else {\n                    amazon.Login.retrieveProfile(authResponse.access_token, (response) => {\n                        let user = new SocialUser();\n                        user.id = response.profile.CustomerId;\n                        user.name = response.profile.Name;\n                        user.email = response.profile.PrimaryEmail;\n                        user.authToken = authResponse.access_token;\n                        user.response = response.profile;\n                        this.persistToken(authResponse.access_token);\n                        resolve(user);\n                    });\n                }\n            });\n        });\n    }\n    signOut() {\n        return new Promise((resolve, reject) => {\n            try {\n                amazon.Login.logout();\n                this.clearToken();\n                resolve();\n            }\n            catch (err) {\n                reject(err.message);\n            }\n        });\n    }\n    persistToken(token) {\n        localStorage.setItem(`${AmazonLoginProvider.PROVIDER_ID}_token`, token);\n    }\n    retrieveToken() {\n        return localStorage.getItem(`${AmazonLoginProvider.PROVIDER_ID}_token`);\n    }\n    clearToken() {\n        localStorage.removeItem(`${AmazonLoginProvider.PROVIDER_ID}_token`);\n    }\n}\nAmazonLoginProvider.PROVIDER_ID = 'AMAZON';\n\nclass VKLoginProvider extends BaseLoginProvider {\n    constructor(clientId, initOptions = {\n        fields: 'photo_max,contacts',\n        version: '5.124',\n    }) {\n        super();\n        this.clientId = clientId;\n        this.initOptions = initOptions;\n        this.VK_API_URL = '//vk.com/js/api/openapi.js';\n        this.VK_API_GET_USER = 'users.get';\n    }\n    initialize() {\n        return new Promise((resolve, reject) => {\n            try {\n                this.loadScript(VKLoginProvider.PROVIDER_ID, this.VK_API_URL, () => {\n                    VK.init({\n                        apiId: this.clientId,\n                    });\n                    resolve();\n                });\n            }\n            catch (err) {\n                reject(err);\n            }\n        });\n    }\n    getLoginStatus() {\n        return new Promise((resolve, reject) => this.getLoginStatusInternal(resolve, reject));\n    }\n    signIn() {\n        return new Promise((resolve, reject) => this.signInInternal(resolve, reject));\n    }\n    signOut() {\n        return new Promise((resolve, reject) => {\n            VK.Auth.logout((response) => {\n                resolve();\n            });\n        });\n    }\n    signInInternal(resolve, reject) {\n        VK.Auth.login((loginResponse) => {\n            if (loginResponse.status === 'connected') {\n                this.getUser(loginResponse.session.mid, loginResponse.session.sid, resolve);\n            }\n        });\n    }\n    getUser(userId, token, resolve) {\n        VK.Api.call(this.VK_API_GET_USER, {\n            user_id: userId,\n            fields: this.initOptions.fields,\n            v: this.initOptions.version,\n        }, (userResponse) => {\n            resolve(this.createUser(Object.assign({}, { token }, userResponse.response[0])));\n        });\n    }\n    getLoginStatusInternal(resolve, reject) {\n        VK.Auth.getLoginStatus((loginResponse) => {\n            if (loginResponse.status === 'connected') {\n                this.getUser(loginResponse.session.mid, loginResponse.session.sid, resolve);\n            }\n        });\n    }\n    createUser(response) {\n        const user = new SocialUser();\n        user.id = response.id;\n        user.name = `${response.first_name} ${response.last_name}`;\n        user.photoUrl = response.photo_max;\n        user.authToken = response.token;\n        return user;\n    }\n}\nVKLoginProvider.PROVIDER_ID = 'VK';\n\n/**\n * Protocol modes supported by MSAL.\n */\nvar ProtocolMode;\n(function (ProtocolMode) {\n    ProtocolMode[\"AAD\"] = \"AAD\";\n    ProtocolMode[\"OIDC\"] = \"OIDC\";\n})(ProtocolMode || (ProtocolMode = {}));\nconst COMMON_AUTHORITY = 'https://login.microsoftonline.com/common/';\n/**\n * Microsoft Authentication using MSAL v2: https://github.com/AzureAD/microsoft-authentication-library-for-js/tree/dev/lib/msal-browser\n */\nclass MicrosoftLoginProvider extends BaseLoginProvider {\n    constructor(clientId, initOptions) {\n        super();\n        this.clientId = clientId;\n        this.initOptions = {\n            authority: COMMON_AUTHORITY,\n            scopes: ['openid', 'email', 'profile', 'User.Read'],\n            knownAuthorities: [],\n            protocolMode: ProtocolMode.AAD,\n            clientCapabilities: [],\n            cacheLocation: 'sessionStorage'\n        };\n        this.initOptions = Object.assign(Object.assign({}, this.initOptions), initOptions);\n    }\n    initialize() {\n        return new Promise((resolve, reject) => {\n            this.loadScript(MicrosoftLoginProvider.PROVIDER_ID, 'https://alcdn.msauth.net/browser/2.13.1/js/msal-browser.js', () => {\n                var _a;\n                try {\n                    const config = {\n                        auth: {\n                            clientId: this.clientId,\n                            redirectUri: (_a = this.initOptions.redirect_uri) !== null && _a !== void 0 ? _a : location.origin,\n                            authority: this.initOptions.authority,\n                            knownAuthorities: this.initOptions.knownAuthorities,\n                            protocolMode: this.initOptions.protocolMode,\n                            clientCapabilities: this.initOptions.clientCapabilities\n                        },\n                        cache: !this.initOptions.cacheLocation ? null : {\n                            cacheLocation: this.initOptions.cacheLocation\n                        }\n                    };\n                    this._instance = new msal.PublicClientApplication(config);\n                    resolve();\n                }\n                catch (e) {\n                    reject(e);\n                }\n            });\n        });\n    }\n    getSocialUser(loginResponse) {\n        return new Promise((resolve, reject) => {\n            //After login, use Microsoft Graph API to get user info\n            let meRequest = new XMLHttpRequest();\n            meRequest.onreadystatechange = () => {\n                if (meRequest.readyState == 4) {\n                    try {\n                        if (meRequest.status == 200) {\n                            let userInfo = JSON.parse(meRequest.responseText);\n                            let user = new SocialUser();\n                            user.provider = MicrosoftLoginProvider.PROVIDER_ID;\n                            user.id = loginResponse.idToken;\n                            user.authToken = loginResponse.accessToken;\n                            user.name = loginResponse.idTokenClaims.name;\n                            user.email = loginResponse.account.username;\n                            user.idToken = loginResponse.idToken;\n                            user.response = loginResponse;\n                            user.firstName = userInfo.givenName;\n                            user.lastName = userInfo.surname;\n                            resolve(user);\n                        }\n                        else {\n                            reject(`Error retrieving user info: ${meRequest.status}`);\n                        }\n                    }\n                    catch (err) {\n                        reject(err);\n                    }\n                }\n            };\n            //Microsoft Graph ME Endpoint: https://docs.microsoft.com/en-us/graph/api/user-get?view=graph-rest-1.0&tabs=http\n            meRequest.open('GET', 'https://graph.microsoft.com/v1.0/me');\n            meRequest.setRequestHeader('Authorization', `Bearer ${loginResponse.accessToken}`);\n            try {\n                meRequest.send();\n            }\n            catch (err) {\n                reject(err);\n            }\n        });\n    }\n    getLoginStatus() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const accounts = this._instance.getAllAccounts();\n            if ((accounts === null || accounts === void 0 ? void 0 : accounts.length) > 0) {\n                const loginResponse = yield this._instance.ssoSilent({\n                    scopes: this.initOptions.scopes,\n                    loginHint: accounts[0].username\n                });\n                return yield this.getSocialUser(loginResponse);\n            }\n            else {\n                throw `No user is currently logged in with ${MicrosoftLoginProvider.PROVIDER_ID}`;\n            }\n        });\n    }\n    signIn() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const loginResponse = yield this._instance.loginPopup({\n                scopes: this.initOptions.scopes\n            });\n            return yield this.getSocialUser(loginResponse);\n        });\n    }\n    signOut(revoke) {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            const accounts = this._instance.getAllAccounts();\n            if ((accounts === null || accounts === void 0 ? void 0 : accounts.length) > 0) {\n                yield this._instance.logoutPopup({\n                    account: accounts[0],\n                    postLogoutRedirectUri: (_b = (_a = this.initOptions.logout_redirect_uri) !== null && _a !== void 0 ? _a : this.initOptions.redirect_uri) !== null && _b !== void 0 ? _b : location.href\n                });\n            }\n        });\n    }\n}\nMicrosoftLoginProvider.PROVIDER_ID = 'MICROSOFT';\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AmazonLoginProvider, BaseLoginProvider, DummyLoginProvider, FacebookLoginProvider, GoogleLoginProvider, MicrosoftLoginProvider, SocialAuthService, SocialLoginModule, SocialUser, VKLoginProvider };\n"]},"metadata":{},"sourceType":"module"}