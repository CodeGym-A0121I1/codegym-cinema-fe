{"ast":null,"code":"import { getApps as getApps$1, getApp as getApp$1, registerVersion as registerVersion$1, deleteApp as deleteApp$1, initializeApp as initializeApp$1, onLog as onLog$1, setLogLevel as setLogLevel$1 } from 'firebase/app';\nexport * from 'firebase/app';\nimport { timer, from } from 'rxjs';\nimport { concatMap, distinct } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Optional, VERSION as VERSION$1, PLATFORM_ID, NgModule, Inject, NgZone, Injector } from '@angular/core';\nimport { VERSION, ɵAngularFireSchedulers, ɵzoneWrap } from '@angular/fire';\n\nclass FirebaseApp {\n  constructor(app) {\n    return app;\n  }\n\n}\n\nclass FirebaseApps {\n  constructor() {\n    return getApps$1();\n  }\n\n}\n\nconst firebaseApp$ = timer(0, 300).pipe(concatMap(() => from(getApps$1())), distinct());\n\nfunction defaultFirebaseAppFactory(provided) {\n  // Use the provided app, if there is only one, otherwise fetch the default app\n  if (provided && provided.length === 1) {\n    return provided[0];\n  }\n\n  return new FirebaseApp(getApp$1());\n} // With FIREBASE_APPS I wanted to capture the default app instance, if it is initialized by\n// the reserved URL; ɵPROVIDED_FIREBASE_APPS is not for public consumption and serves to ensure that all\n// provideFirebaseApp(...) calls are satisfied before FirebaseApp$ or FirebaseApp is resolved\n\n\nconst PROVIDED_FIREBASE_APPS = new InjectionToken('angularfire2._apps'); // Injecting FirebaseApp will now only inject the default Firebase App\n// this allows allows beginners to import /__/firebase/init.js to auto initialize Firebase App\n// from the reserved URL.\n\nconst DEFAULT_FIREBASE_APP_PROVIDER = {\n  provide: FirebaseApp,\n  useFactory: defaultFirebaseAppFactory,\n  deps: [[new Optional(), PROVIDED_FIREBASE_APPS]]\n};\nconst FIREBASE_APPS_PROVIDER = {\n  provide: FirebaseApps,\n  deps: [[new Optional(), PROVIDED_FIREBASE_APPS]]\n};\n\nfunction firebaseAppFactory(fn) {\n  return (zone, injector) => {\n    const app = zone.runOutsideAngular(() => fn(injector));\n    return new FirebaseApp(app);\n  };\n}\n\nclass FirebaseAppModule {\n  // tslint:disable-next-line:ban-types\n  constructor(platformId) {\n    registerVersion$1('angularfire', VERSION.full, 'core');\n    registerVersion$1('angularfire', VERSION.full, 'app');\n    registerVersion$1('angular', VERSION$1.full, platformId.toString());\n  }\n\n}\n\nFirebaseAppModule.ɵfac = function FirebaseAppModule_Factory(t) {\n  return new (t || FirebaseAppModule)(i0.ɵɵinject(PLATFORM_ID));\n};\n\nFirebaseAppModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: FirebaseAppModule\n});\nFirebaseAppModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [DEFAULT_FIREBASE_APP_PROVIDER, FIREBASE_APPS_PROVIDER]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FirebaseAppModule, [{\n    type: NgModule,\n    args: [{\n      providers: [DEFAULT_FIREBASE_APP_PROVIDER, FIREBASE_APPS_PROVIDER]\n    }]\n  }], function () {\n    return [{\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, null);\n})(); // Calling initializeApp({ ... }, 'name') multiple times will add more FirebaseApps into the FIREBASE_APPS\n// injection scope. This allows developers to more easily work with multiple Firebase Applications. Downside\n// is that DI for app name and options doesn't really make sense anymore.\n\n\nfunction provideFirebaseApp(fn, ...deps) {\n  return {\n    ngModule: FirebaseAppModule,\n    providers: [{\n      provide: PROVIDED_FIREBASE_APPS,\n      useFactory: firebaseAppFactory(fn),\n      multi: true,\n      deps: [NgZone, Injector, ɵAngularFireSchedulers, ...deps]\n    }]\n  };\n} // DO NOT MODIFY, this file is autogenerated by tools/build.ts\n\n\nconst deleteApp = ɵzoneWrap(deleteApp$1, true);\nconst getApp = ɵzoneWrap(getApp$1, true);\nconst getApps = ɵzoneWrap(getApps$1, true);\nconst initializeApp = ɵzoneWrap(initializeApp$1, true);\nconst onLog = ɵzoneWrap(onLog$1, true);\nconst registerVersion = ɵzoneWrap(registerVersion$1, true);\nconst setLogLevel = ɵzoneWrap(setLogLevel$1, true);\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { FirebaseApp, FirebaseAppModule, FirebaseApps, deleteApp, firebaseApp$, getApp, getApps, initializeApp, onLog, provideFirebaseApp, registerVersion, setLogLevel };","map":{"version":3,"sources":["C:/Users/SQ/OneDrive/Documents/GitHub/codegym-cinema-fe/node_modules/@angular/fire/fesm2015/angular-fire-app.js"],"names":["getApps","getApps$1","getApp","getApp$1","registerVersion","registerVersion$1","deleteApp","deleteApp$1","initializeApp","initializeApp$1","onLog","onLog$1","setLogLevel","setLogLevel$1","timer","from","concatMap","distinct","i0","InjectionToken","Optional","VERSION","VERSION$1","PLATFORM_ID","NgModule","Inject","NgZone","Injector","ɵAngularFireSchedulers","ɵzoneWrap","FirebaseApp","constructor","app","FirebaseApps","firebaseApp$","pipe","defaultFirebaseAppFactory","provided","length","PROVIDED_FIREBASE_APPS","DEFAULT_FIREBASE_APP_PROVIDER","provide","useFactory","deps","FIREBASE_APPS_PROVIDER","firebaseAppFactory","fn","zone","injector","runOutsideAngular","FirebaseAppModule","platformId","full","toString","ɵfac","ɵmod","ɵinj","type","args","providers","Object","decorators","provideFirebaseApp","ngModule","multi"],"mappings":"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","sourcesContent":["import { getApps as getApps$1, getApp as getApp$1, registerVersion as registerVersion$1, deleteApp as deleteApp$1, initializeApp as initializeApp$1, onLog as onLog$1, setLogLevel as setLogLevel$1 } from 'firebase/app';\r\nexport * from 'firebase/app';\r\nimport { timer, from } from 'rxjs';\r\nimport { concatMap, distinct } from 'rxjs/operators';\r\nimport * as i0 from '@angular/core';\r\nimport { InjectionToken, Optional, VERSION as VERSION$1, PLATFORM_ID, NgModule, Inject, NgZone, Injector } from '@angular/core';\r\nimport { VERSION, ɵAngularFireSchedulers, ɵzoneWrap } from '@angular/fire';\r\n\r\nclass FirebaseApp {\r\n    constructor(app) {\r\n        return app;\r\n    }\r\n}\r\nclass FirebaseApps {\r\n    constructor() {\r\n        return getApps$1();\r\n    }\r\n}\r\nconst firebaseApp$ = timer(0, 300).pipe(concatMap(() => from(getApps$1())), distinct());\r\n\r\nfunction defaultFirebaseAppFactory(provided) {\r\n    // Use the provided app, if there is only one, otherwise fetch the default app\r\n    if (provided && provided.length === 1) {\r\n        return provided[0];\r\n    }\r\n    return new FirebaseApp(getApp$1());\r\n}\r\n// With FIREBASE_APPS I wanted to capture the default app instance, if it is initialized by\r\n// the reserved URL; ɵPROVIDED_FIREBASE_APPS is not for public consumption and serves to ensure that all\r\n// provideFirebaseApp(...) calls are satisfied before FirebaseApp$ or FirebaseApp is resolved\r\nconst PROVIDED_FIREBASE_APPS = new InjectionToken('angularfire2._apps');\r\n// Injecting FirebaseApp will now only inject the default Firebase App\r\n// this allows allows beginners to import /__/firebase/init.js to auto initialize Firebase App\r\n// from the reserved URL.\r\nconst DEFAULT_FIREBASE_APP_PROVIDER = {\r\n    provide: FirebaseApp,\r\n    useFactory: defaultFirebaseAppFactory,\r\n    deps: [\r\n        [new Optional(), PROVIDED_FIREBASE_APPS],\r\n    ],\r\n};\r\nconst FIREBASE_APPS_PROVIDER = {\r\n    provide: FirebaseApps,\r\n    deps: [\r\n        [new Optional(), PROVIDED_FIREBASE_APPS],\r\n    ],\r\n};\r\nfunction firebaseAppFactory(fn) {\r\n    return (zone, injector) => {\r\n        const app = zone.runOutsideAngular(() => fn(injector));\r\n        return new FirebaseApp(app);\r\n    };\r\n}\r\nclass FirebaseAppModule {\r\n    // tslint:disable-next-line:ban-types\r\n    constructor(platformId) {\r\n        registerVersion$1('angularfire', VERSION.full, 'core');\r\n        registerVersion$1('angularfire', VERSION.full, 'app');\r\n        registerVersion$1('angular', VERSION$1.full, platformId.toString());\r\n    }\r\n}\r\nFirebaseAppModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: FirebaseAppModule, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.NgModule });\r\nFirebaseAppModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: FirebaseAppModule });\r\nFirebaseAppModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: FirebaseAppModule, providers: [\r\n        DEFAULT_FIREBASE_APP_PROVIDER,\r\n        FIREBASE_APPS_PROVIDER,\r\n    ] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: FirebaseAppModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    providers: [\r\n                        DEFAULT_FIREBASE_APP_PROVIDER,\r\n                        FIREBASE_APPS_PROVIDER,\r\n                    ]\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: Object, decorators: [{\r\n                    type: Inject,\r\n                    args: [PLATFORM_ID]\r\n                }] }]; } });\r\n// Calling initializeApp({ ... }, 'name') multiple times will add more FirebaseApps into the FIREBASE_APPS\r\n// injection scope. This allows developers to more easily work with multiple Firebase Applications. Downside\r\n// is that DI for app name and options doesn't really make sense anymore.\r\nfunction provideFirebaseApp(fn, ...deps) {\r\n    return {\r\n        ngModule: FirebaseAppModule,\r\n        providers: [{\r\n                provide: PROVIDED_FIREBASE_APPS,\r\n                useFactory: firebaseAppFactory(fn),\r\n                multi: true,\r\n                deps: [\r\n                    NgZone,\r\n                    Injector,\r\n                    ɵAngularFireSchedulers,\r\n                    ...deps,\r\n                ],\r\n            }],\r\n    };\r\n}\r\n\r\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\r\nconst deleteApp = ɵzoneWrap(deleteApp$1, true);\r\nconst getApp = ɵzoneWrap(getApp$1, true);\r\nconst getApps = ɵzoneWrap(getApps$1, true);\r\nconst initializeApp = ɵzoneWrap(initializeApp$1, true);\r\nconst onLog = ɵzoneWrap(onLog$1, true);\r\nconst registerVersion = ɵzoneWrap(registerVersion$1, true);\r\nconst setLogLevel = ɵzoneWrap(setLogLevel$1, true);\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { FirebaseApp, FirebaseAppModule, FirebaseApps, deleteApp, firebaseApp$, getApp, getApps, initializeApp, onLog, provideFirebaseApp, registerVersion, setLogLevel };\r\n\n"]},"metadata":{},"sourceType":"module"}