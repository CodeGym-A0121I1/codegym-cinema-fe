{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, PLATFORM_ID, Injectable, Inject, Optional, NgModule } from '@angular/core';\nimport { asyncScheduler, Observable, from, of } from 'rxjs';\nimport * as i1 from '@angular/fire';\nimport { keepUnstableUntilFirst, VERSION } from '@angular/fire';\nimport { startWith, pairwise, map, scan, distinctUntilChanged, filter } from 'rxjs/operators';\nimport { ɵfirebaseAppFactory, ɵcacheInstance, FIREBASE_OPTIONS, FIREBASE_APP_NAME } from '@angular/fire/compat';\nimport { isPlatformServer } from '@angular/common';\nimport 'firebase/compat/auth';\nimport 'firebase/compat/firestore';\nimport * as i2 from '@angular/fire/compat/auth';\nimport { ɵauthFactory, USE_EMULATOR as USE_EMULATOR$1, SETTINGS as SETTINGS$1, TENANT_ID, LANGUAGE_CODE, USE_DEVICE_LANGUAGE, PERSISTENCE } from '@angular/fire/compat/auth';\nimport * as i3 from '@angular/fire/app-check';\nimport firebase from 'firebase/compat/app';\n\nfunction _fromRef(ref, scheduler = asyncScheduler) {\n  return new Observable(subscriber => {\n    let unsubscribe;\n\n    if (scheduler != null) {\n      scheduler.schedule(() => {\n        unsubscribe = ref.onSnapshot({\n          includeMetadataChanges: true\n        }, subscriber);\n      });\n    } else {\n      unsubscribe = ref.onSnapshot({\n        includeMetadataChanges: true\n      }, subscriber);\n    }\n\n    return () => {\n      if (unsubscribe != null) {\n        unsubscribe();\n      }\n    };\n  });\n}\n\nfunction fromRef(ref, scheduler) {\n  return _fromRef(ref, scheduler);\n}\n\nfunction fromDocRef(ref, scheduler) {\n  return fromRef(ref, scheduler).pipe(startWith(undefined), pairwise(), map(([priorPayload, payload]) => {\n    if (!payload.exists) {\n      return {\n        payload,\n        type: 'removed'\n      };\n    }\n\n    if (!(priorPayload === null || priorPayload === void 0 ? void 0 : priorPayload.exists)) {\n      return {\n        payload,\n        type: 'added'\n      };\n    }\n\n    return {\n      payload,\n      type: 'modified'\n    };\n  }));\n}\n\nfunction fromCollectionRef(ref, scheduler) {\n  return fromRef(ref, scheduler).pipe(map(payload => ({\n    payload,\n    type: 'query'\n  })));\n}\n/**\r\n * Return a stream of document changes on a query. These results are not in sort order but in\r\n * order of occurence.\r\n */\n\n\nfunction docChanges(query, scheduler) {\n  return fromCollectionRef(query, scheduler).pipe(startWith(undefined), pairwise(), map(([priorAction, action]) => {\n    const docChanges = action.payload.docChanges();\n    const actions = docChanges.map(change => ({\n      type: change.type,\n      payload: change\n    })); // the metadata has changed from the prior emission\n\n    if (priorAction && JSON.stringify(priorAction.payload.metadata) !== JSON.stringify(action.payload.metadata)) {\n      // go through all the docs in payload and figure out which ones changed\n      action.payload.docs.forEach((currentDoc, currentIndex) => {\n        const docChange = docChanges.find(d => d.doc.ref.isEqual(currentDoc.ref));\n        const priorDoc = priorAction === null || priorAction === void 0 ? void 0 : priorAction.payload.docs.find(d => d.ref.isEqual(currentDoc.ref));\n\n        if (docChange && JSON.stringify(docChange.doc.metadata) === JSON.stringify(currentDoc.metadata) || !docChange && priorDoc && JSON.stringify(priorDoc.metadata) === JSON.stringify(currentDoc.metadata)) {// document doesn't appear to have changed, don't log another action\n        } else {\n          // since the actions are processed in order just push onto the array\n          actions.push({\n            type: 'modified',\n            payload: {\n              oldIndex: currentIndex,\n              newIndex: currentIndex,\n              type: 'modified',\n              doc: currentDoc\n            }\n          });\n        }\n      });\n    }\n\n    return actions;\n  }));\n}\n/**\r\n * Return a stream of document changes on a query. These results are in sort order.\r\n */\n\n\nfunction sortedChanges(query, events, scheduler) {\n  return docChanges(query, scheduler).pipe(scan((current, changes) => combineChanges(current, changes.map(it => it.payload), events), []), distinctUntilChanged(), // cut down on unneed change cycles\n  map(changes => changes.map(c => ({\n    type: c.type,\n    payload: c\n  }))));\n}\n/**\r\n * Combines the total result set from the current set of changes from an incoming set\r\n * of changes.\r\n */\n\n\nfunction combineChanges(current, changes, events) {\n  changes.forEach(change => {\n    // skip unwanted change types\n    if (events.indexOf(change.type) > -1) {\n      current = combineChange(current, change);\n    }\n  });\n  return current;\n}\n/**\r\n * Splice arguments on top of a sliced array, to break top-level ===\r\n * this is useful for change-detection\r\n */\n\n\nfunction sliceAndSplice(original, start, deleteCount, ...args) {\n  const returnArray = original.slice();\n  returnArray.splice(start, deleteCount, ...args);\n  return returnArray;\n}\n/**\r\n * Creates a new sorted array from a new change.\r\n * Build our own because we allow filtering of action types ('added', 'removed', 'modified') before scanning\r\n * and so we have greater control over change detection (by breaking ===)\r\n */\n\n\nfunction combineChange(combined, change) {\n  switch (change.type) {\n    case 'added':\n      if (combined[change.newIndex] && combined[change.newIndex].doc.ref.isEqual(change.doc.ref)) {// Not sure why the duplicates are getting fired\n      } else {\n        return sliceAndSplice(combined, change.newIndex, 0, change);\n      }\n\n      break;\n\n    case 'modified':\n      if (combined[change.oldIndex] == null || combined[change.oldIndex].doc.ref.isEqual(change.doc.ref)) {\n        // When an item changes position we first remove it\n        // and then add it's new position\n        if (change.oldIndex !== change.newIndex) {\n          const copiedArray = combined.slice();\n          copiedArray.splice(change.oldIndex, 1);\n          copiedArray.splice(change.newIndex, 0, change);\n          return copiedArray;\n        } else {\n          return sliceAndSplice(combined, change.newIndex, 1, change);\n        }\n      }\n\n      break;\n\n    case 'removed':\n      if (combined[change.oldIndex] && combined[change.oldIndex].doc.ref.isEqual(change.doc.ref)) {\n        return sliceAndSplice(combined, change.oldIndex, 1);\n      }\n\n      break;\n  }\n\n  return combined;\n}\n\nfunction validateEventsArray(events) {\n  if (!events || events.length === 0) {\n    events = ['added', 'removed', 'modified'];\n  }\n\n  return events;\n}\n/**\r\n * AngularFirestoreCollection service\r\n *\r\n * This class creates a reference to a Firestore Collection. A reference and a query are provided in\r\n * in the constructor. The query can be the unqueried reference if no query is desired.The class\r\n * is generic which gives you type safety for data update methods and data streaming.\r\n *\r\n * This class uses Symbol.observable to transform into Observable using Observable.from().\r\n *\r\n * This class is rarely used directly and should be created from the AngularFirestore service.\r\n *\r\n * Example:\r\n *\r\n * const collectionRef = firebase.firestore.collection('stocks');\r\n * const query = collectionRef.where('price', '>', '0.01');\r\n * const fakeStock = new AngularFirestoreCollection<Stock>(collectionRef, query);\r\n *\r\n * // NOTE!: the updates are performed on the reference not the query\r\n * await fakeStock.add({ name: 'FAKE', price: 0.01 });\r\n *\r\n * // Subscribe to changes as snapshots. This provides you data updates as well as delta updates.\r\n * fakeStock.valueChanges().subscribe(value => console.log(value));\r\n */\n\n\nclass AngularFirestoreCollection {\n  /**\r\n   * The constructor takes in a CollectionReference and Query to provide wrapper methods\r\n   * for data operations and data streaming.\r\n   *\r\n   * Note: Data operation methods are done on the reference not the query. This means\r\n   * when you update data it is not updating data to the window of your query unless\r\n   * the data fits the criteria of the query. See the AssociatedRefence type for details\r\n   * on this implication.\r\n   */\n  constructor(ref, query, afs) {\n    this.ref = ref;\n    this.query = query;\n    this.afs = afs;\n  }\n  /**\r\n   * Listen to the latest change in the stream. This method returns changes\r\n   * as they occur and they are not sorted by query order. This allows you to construct\r\n   * your own data structure.\r\n   */\n\n\n  stateChanges(events) {\n    let source = docChanges(this.query, this.afs.schedulers.outsideAngular);\n\n    if (events && events.length > 0) {\n      source = source.pipe(map(actions => actions.filter(change => events.indexOf(change.type) > -1)));\n    }\n\n    return source.pipe( // We want to filter out empty arrays, but always emit at first, so the developer knows\n    // that the collection has been resolve; even if it's empty\n    startWith(undefined), pairwise(), filter(([prior, current]) => current.length > 0 || !prior), map(([prior, current]) => current), keepUnstableUntilFirst);\n  }\n  /**\r\n   * Create a stream of changes as they occur it time. This method is similar to stateChanges()\r\n   * but it collects each event in an array over time.\r\n   */\n\n\n  auditTrail(events) {\n    return this.stateChanges(events).pipe(scan((current, action) => [...current, ...action], []));\n  }\n  /**\r\n   * Create a stream of synchronized changes. This method keeps the local array in sorted\r\n   * query order.\r\n   */\n\n\n  snapshotChanges(events) {\n    const validatedEvents = validateEventsArray(events);\n    const scheduledSortedChanges$ = sortedChanges(this.query, validatedEvents, this.afs.schedulers.outsideAngular);\n    return scheduledSortedChanges$.pipe(keepUnstableUntilFirst);\n  }\n\n  valueChanges(options = {}) {\n    return fromCollectionRef(this.query, this.afs.schedulers.outsideAngular).pipe(map(actions => actions.payload.docs.map(a => {\n      if (options.idField) {\n        return Object.assign(Object.assign({}, a.data()), {\n          [options.idField]: a.id\n        });\n      } else {\n        return a.data();\n      }\n    })), keepUnstableUntilFirst);\n  }\n  /**\r\n   * Retrieve the results of the query once.\r\n   */\n\n\n  get(options) {\n    return from(this.query.get(options)).pipe(keepUnstableUntilFirst);\n  }\n  /**\r\n   * Add data to a collection reference.\r\n   *\r\n   * Note: Data operation methods are done on the reference not the query. This means\r\n   * when you update data it is not updating data to the window of your query unless\r\n   * the data fits the criteria of the query.\r\n   */\n\n\n  add(data) {\n    return this.ref.add(data);\n  }\n  /**\r\n   * Create a reference to a single document in a collection.\r\n   */\n\n\n  doc(path) {\n    // TODO is there a better way to solve this type issue\n    return new AngularFirestoreDocument(this.ref.doc(path), this.afs);\n  }\n\n}\n/**\r\n * AngularFirestoreDocument service\r\n *\r\n * This class creates a reference to a Firestore Document. A reference is provided in\r\n * in the constructor. The class is generic which gives you type safety for data update\r\n * methods and data streaming.\r\n *\r\n * This class uses Symbol.observable to transform into Observable using Observable.from().\r\n *\r\n * This class is rarely used directly and should be created from the AngularFirestore service.\r\n *\r\n * Example:\r\n *\r\n * const fakeStock = new AngularFirestoreDocument<Stock>(doc('stocks/FAKE'));\r\n * await fakeStock.set({ name: 'FAKE', price: 0.01 });\r\n * fakeStock.valueChanges().map(snap => {\r\n *   if(snap.exists) return snap.data();\r\n *   return null;\r\n * }).subscribe(value => console.log(value));\r\n * // OR! Transform using Observable.from() and the data is unwrapped for you\r\n * Observable.from(fakeStock).subscribe(value => console.log(value));\r\n */\n\n\nclass AngularFirestoreDocument {\n  /**\r\n   * The constructor takes in a DocumentReference to provide wrapper methods\r\n   * for data operations, data streaming, and Symbol.observable.\r\n   */\n  constructor(ref, afs) {\n    this.ref = ref;\n    this.afs = afs;\n  }\n  /**\r\n   * Create or overwrite a single document.\r\n   */\n\n\n  set(data, options) {\n    return this.ref.set(data, options);\n  }\n  /**\r\n   * Update some fields of a document without overwriting the entire document.\r\n   */\n\n\n  update(data) {\n    return this.ref.update(data);\n  }\n  /**\r\n   * Delete a document.\r\n   */\n\n\n  delete() {\n    return this.ref.delete();\n  }\n  /**\r\n   * Create a reference to a sub-collection given a path and an optional query\r\n   * function.\r\n   */\n\n\n  collection(path, queryFn) {\n    const collectionRef = this.ref.collection(path);\n    const {\n      ref,\n      query\n    } = associateQuery(collectionRef, queryFn);\n    return new AngularFirestoreCollection(ref, query, this.afs);\n  }\n  /**\r\n   * Listen to snapshot updates from the document.\r\n   */\n\n\n  snapshotChanges() {\n    const scheduledFromDocRef$ = fromDocRef(this.ref, this.afs.schedulers.outsideAngular);\n    return scheduledFromDocRef$.pipe(keepUnstableUntilFirst);\n  }\n\n  valueChanges(options = {}) {\n    return this.snapshotChanges().pipe(map(({\n      payload\n    }) => options.idField ? Object.assign(Object.assign({}, payload.data()), {\n      [options.idField]: payload.id\n    }) : payload.data()));\n  }\n  /**\r\n   * Retrieve the document once.\r\n   */\n\n\n  get(options) {\n    return from(this.ref.get(options)).pipe(keepUnstableUntilFirst);\n  }\n\n}\n/**\r\n * AngularFirestoreCollectionGroup service\r\n *\r\n * This class holds a reference to a Firestore Collection Group Query.\r\n *\r\n * This class uses Symbol.observable to transform into Observable using Observable.from().\r\n *\r\n * This class is rarely used directly and should be created from the AngularFirestore service.\r\n *\r\n * Example:\r\n *\r\n * const collectionGroup = firebase.firestore.collectionGroup('stocks');\r\n * const query = collectionRef.where('price', '>', '0.01');\r\n * const fakeStock = new AngularFirestoreCollectionGroup<Stock>(query, afs);\r\n *\r\n * // Subscribe to changes as snapshots. This provides you data updates as well as delta updates.\r\n * fakeStock.valueChanges().subscribe(value => console.log(value));\r\n */\n\n\nclass AngularFirestoreCollectionGroup {\n  /**\r\n   * The constructor takes in a CollectionGroupQuery to provide wrapper methods\r\n   * for data operations and data streaming.\r\n   */\n  constructor(query, afs) {\n    this.query = query;\n    this.afs = afs;\n  }\n  /**\r\n   * Listen to the latest change in the stream. This method returns changes\r\n   * as they occur and they are not sorted by query order. This allows you to construct\r\n   * your own data structure.\r\n   */\n\n\n  stateChanges(events) {\n    if (!events || events.length === 0) {\n      return docChanges(this.query, this.afs.schedulers.outsideAngular).pipe(keepUnstableUntilFirst);\n    }\n\n    return docChanges(this.query, this.afs.schedulers.outsideAngular).pipe(map(actions => actions.filter(change => events.indexOf(change.type) > -1)), filter(changes => changes.length > 0), keepUnstableUntilFirst);\n  }\n  /**\r\n   * Create a stream of changes as they occur it time. This method is similar to stateChanges()\r\n   * but it collects each event in an array over time.\r\n   */\n\n\n  auditTrail(events) {\n    return this.stateChanges(events).pipe(scan((current, action) => [...current, ...action], []));\n  }\n  /**\r\n   * Create a stream of synchronized changes. This method keeps the local array in sorted\r\n   * query order.\r\n   */\n\n\n  snapshotChanges(events) {\n    const validatedEvents = validateEventsArray(events);\n    const scheduledSortedChanges$ = sortedChanges(this.query, validatedEvents, this.afs.schedulers.outsideAngular);\n    return scheduledSortedChanges$.pipe(keepUnstableUntilFirst);\n  }\n\n  valueChanges(options = {}) {\n    const fromCollectionRefScheduled$ = fromCollectionRef(this.query, this.afs.schedulers.outsideAngular);\n    return fromCollectionRefScheduled$.pipe(map(actions => actions.payload.docs.map(a => {\n      if (options.idField) {\n        return Object.assign({\n          [options.idField]: a.id\n        }, a.data());\n      } else {\n        return a.data();\n      }\n    })), keepUnstableUntilFirst);\n  }\n  /**\r\n   * Retrieve the results of the query once.\r\n   */\n\n\n  get(options) {\n    return from(this.query.get(options)).pipe(keepUnstableUntilFirst);\n  }\n\n}\n/**\r\n * The value of this token determines whether or not the firestore will have persistance enabled\r\n */\n\n\nconst ENABLE_PERSISTENCE = new InjectionToken('angularfire2.enableFirestorePersistence');\nconst PERSISTENCE_SETTINGS = new InjectionToken('angularfire2.firestore.persistenceSettings');\nconst SETTINGS = new InjectionToken('angularfire2.firestore.settings');\nconst USE_EMULATOR = new InjectionToken('angularfire2.firestore.use-emulator');\n/**\r\n * A utility methods for associating a collection reference with\r\n * a query.\r\n *\r\n * @param collectionRef - A collection reference to query\r\n * @param queryFn - The callback to create a query\r\n *\r\n * Example:\r\n * const { query, ref } = associateQuery(docRef.collection('items'), ref => {\r\n *  return ref.where('age', '<', 200);\r\n * });\r\n */\n\nfunction associateQuery(collectionRef, queryFn = ref => ref) {\n  const query = queryFn(collectionRef);\n  const ref = collectionRef;\n  return {\n    query,\n    ref\n  };\n}\n/**\r\n * AngularFirestore Service\r\n *\r\n * This service is the main entry point for this feature module. It provides\r\n * an API for creating Collection and Reference services. These services can\r\n * then be used to do data updates and observable streams of the data.\r\n *\r\n * Example:\r\n *\r\n * import { Component } from '@angular/core';\r\n * import { AngularFirestore, AngularFirestoreCollection, AngularFirestoreDocument } from '@angular/fire/firestore';\r\n * import { Observable } from 'rxjs/Observable';\r\n * import { from } from 'rxjs/observable';\r\n *\r\n * @Component({\r\n *   selector: 'app-my-component',\r\n *   template: `\r\n *    <h2>Items for {{ (profile | async)?.name }}\r\n *    <ul>\r\n *       <li *ngFor=\"let item of items | async\">{{ item.name }}</li>\r\n *    </ul>\r\n *    <div class=\"control-input\">\r\n *       <input type=\"text\" #itemname />\r\n *       <button (click)=\"addItem(itemname.value)\">Add Item</button>\r\n *    </div>\r\n *   `\r\n * })\r\n * export class MyComponent implements OnInit {\r\n *\r\n *   // services for data operations and data streaming\r\n *   private readonly itemsRef: AngularFirestoreCollection<Item>;\r\n *   private readonly profileRef: AngularFirestoreDocument<Profile>;\r\n *\r\n *   // observables for template\r\n *   items: Observable<Item[]>;\r\n *   profile: Observable<Profile>;\r\n *\r\n *   // inject main service\r\n *   constructor(private readonly afs: AngularFirestore) {}\r\n *\r\n *   ngOnInit() {\r\n *     this.itemsRef = afs.collection('items', ref => ref.where('user', '==', 'davideast').limit(10));\r\n *     this.items = this.itemsRef.valueChanges().map(snap => snap.docs.map(data => doc.data()));\r\n *     // this.items = from(this.itemsRef); // you can also do this with no mapping\r\n *\r\n *     this.profileRef = afs.doc('users/davideast');\r\n *     this.profile = this.profileRef.valueChanges();\r\n *   }\r\n *\r\n *   addItem(name: string) {\r\n *     const user = 'davideast';\r\n *     this.itemsRef.add({ name, user });\r\n *   }\r\n * }\r\n */\n\n\nclass AngularFirestore {\n  /**\r\n   * Each Feature of AngularFire has a FirebaseApp injected. This way we\r\n   * don't rely on the main Firebase App instance and we can create named\r\n   * apps and use multiple apps.\r\n   */\n  constructor(options, name, shouldEnablePersistence, settings, // tslint:disable-next-line:ban-types\n  platformId, zone, schedulers, persistenceSettings, _useEmulator, auth, useAuthEmulator, authSettings, // can't use firebase.auth.AuthSettings here\n  tenantId, languageCode, useDeviceLanguage, persistence, _appCheckInstances) {\n    this.schedulers = schedulers;\n    const app = ɵfirebaseAppFactory(options, zone, name);\n    const useEmulator = _useEmulator;\n\n    if (auth) {\n      ɵauthFactory(app, zone, useAuthEmulator, tenantId, languageCode, useDeviceLanguage, authSettings, persistence);\n    }\n\n    [this.firestore, this.persistenceEnabled$] = ɵcacheInstance(`${app.name}.firestore`, 'AngularFirestore', app.name, () => {\n      const firestore = zone.runOutsideAngular(() => app.firestore());\n\n      if (settings) {\n        firestore.settings(settings);\n      }\n\n      if (useEmulator) {\n        firestore.useEmulator(...useEmulator);\n      }\n\n      if (shouldEnablePersistence && !isPlatformServer(platformId)) {\n        // We need to try/catch here because not all enablePersistence() failures are caught\n        // https://github.com/firebase/firebase-js-sdk/issues/608\n        const enablePersistence = () => {\n          try {\n            return from(firestore.enablePersistence(persistenceSettings || undefined).then(() => true, () => false));\n          } catch (e) {\n            if (typeof console !== 'undefined') {\n              console.warn(e);\n            }\n\n            return of(false);\n          }\n        };\n\n        return [firestore, zone.runOutsideAngular(enablePersistence)];\n      } else {\n        return [firestore, of(false)];\n      }\n    }, [settings, useEmulator, shouldEnablePersistence]);\n  }\n\n  collection(pathOrRef, queryFn) {\n    let collectionRef;\n\n    if (typeof pathOrRef === 'string') {\n      collectionRef = this.firestore.collection(pathOrRef);\n    } else {\n      collectionRef = pathOrRef;\n    }\n\n    const {\n      ref,\n      query\n    } = associateQuery(collectionRef, queryFn);\n    const refInZone = this.schedulers.ngZone.run(() => ref);\n    return new AngularFirestoreCollection(refInZone, query, this);\n  }\n  /**\r\n   * Create a reference to a Firestore Collection Group based on a collectionId\r\n   * and an optional query function to narrow the result\r\n   * set.\r\n   */\n\n\n  collectionGroup(collectionId, queryGroupFn) {\n    const queryFn = queryGroupFn || (ref => ref);\n\n    const collectionGroup = this.firestore.collectionGroup(collectionId);\n    return new AngularFirestoreCollectionGroup(queryFn(collectionGroup), this);\n  }\n\n  doc(pathOrRef) {\n    let ref;\n\n    if (typeof pathOrRef === 'string') {\n      ref = this.firestore.doc(pathOrRef);\n    } else {\n      ref = pathOrRef;\n    }\n\n    const refInZone = this.schedulers.ngZone.run(() => ref);\n    return new AngularFirestoreDocument(refInZone, this);\n  }\n  /**\r\n   * Returns a generated Firestore Document Id.\r\n   */\n\n\n  createId() {\n    return this.firestore.collection('_').doc().id;\n  }\n\n}\n\nAngularFirestore.ɵfac = function AngularFirestore_Factory(t) {\n  return new (t || AngularFirestore)(i0.ɵɵinject(FIREBASE_OPTIONS), i0.ɵɵinject(FIREBASE_APP_NAME, 8), i0.ɵɵinject(ENABLE_PERSISTENCE, 8), i0.ɵɵinject(SETTINGS, 8), i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1.ɵAngularFireSchedulers), i0.ɵɵinject(PERSISTENCE_SETTINGS, 8), i0.ɵɵinject(USE_EMULATOR, 8), i0.ɵɵinject(i2.AngularFireAuth, 8), i0.ɵɵinject(USE_EMULATOR$1, 8), i0.ɵɵinject(SETTINGS$1, 8), i0.ɵɵinject(TENANT_ID, 8), i0.ɵɵinject(LANGUAGE_CODE, 8), i0.ɵɵinject(USE_DEVICE_LANGUAGE, 8), i0.ɵɵinject(PERSISTENCE, 8), i0.ɵɵinject(i3.AppCheckInstances, 8));\n};\n\nAngularFirestore.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: AngularFirestore,\n  factory: AngularFirestore.ɵfac,\n  providedIn: 'any'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AngularFirestore, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'any'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [FIREBASE_OPTIONS]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [FIREBASE_APP_NAME]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ENABLE_PERSISTENCE]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [SETTINGS]\n      }]\n    }, {\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i1.ɵAngularFireSchedulers\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [PERSISTENCE_SETTINGS]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [USE_EMULATOR]\n      }]\n    }, {\n      type: i2.AngularFireAuth,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [USE_EMULATOR$1]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [SETTINGS$1]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [TENANT_ID]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [LANGUAGE_CODE]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [USE_DEVICE_LANGUAGE]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [PERSISTENCE]\n      }]\n    }, {\n      type: i3.AppCheckInstances,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n\nclass AngularFirestoreModule {\n  constructor() {\n    firebase.registerVersion('angularfire', VERSION.full, 'fst-compat');\n  }\n  /**\r\n   * Attempt to enable persistent storage, if possible\r\n   */\n\n\n  static enablePersistence(persistenceSettings) {\n    return {\n      ngModule: AngularFirestoreModule,\n      providers: [{\n        provide: ENABLE_PERSISTENCE,\n        useValue: true\n      }, {\n        provide: PERSISTENCE_SETTINGS,\n        useValue: persistenceSettings\n      }]\n    };\n  }\n\n}\n\nAngularFirestoreModule.ɵfac = function AngularFirestoreModule_Factory(t) {\n  return new (t || AngularFirestoreModule)();\n};\n\nAngularFirestoreModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: AngularFirestoreModule\n});\nAngularFirestoreModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [AngularFirestore]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AngularFirestoreModule, [{\n    type: NgModule,\n    args: [{\n      providers: [AngularFirestore]\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { AngularFirestore, AngularFirestoreCollection, AngularFirestoreCollectionGroup, AngularFirestoreDocument, AngularFirestoreModule, ENABLE_PERSISTENCE, PERSISTENCE_SETTINGS, SETTINGS, USE_EMULATOR, associateQuery, combineChange, combineChanges, docChanges, fromCollectionRef, fromDocRef, fromRef, sortedChanges, validateEventsArray };","map":{"version":3,"sources":["D:/Sprint02-ProjectCG/Front-End/codegym-cinema-fe/node_modules/@angular/fire/fesm2015/angular-fire-compat-firestore.js"],"names":["i0","InjectionToken","PLATFORM_ID","Injectable","Inject","Optional","NgModule","asyncScheduler","Observable","from","of","i1","keepUnstableUntilFirst","VERSION","startWith","pairwise","map","scan","distinctUntilChanged","filter","ɵfirebaseAppFactory","ɵcacheInstance","FIREBASE_OPTIONS","FIREBASE_APP_NAME","isPlatformServer","i2","ɵauthFactory","USE_EMULATOR","USE_EMULATOR$1","SETTINGS","SETTINGS$1","TENANT_ID","LANGUAGE_CODE","USE_DEVICE_LANGUAGE","PERSISTENCE","i3","firebase","_fromRef","ref","scheduler","subscriber","unsubscribe","schedule","onSnapshot","includeMetadataChanges","fromRef","fromDocRef","pipe","undefined","priorPayload","payload","exists","type","fromCollectionRef","docChanges","query","priorAction","action","actions","change","JSON","stringify","metadata","docs","forEach","currentDoc","currentIndex","docChange","find","d","doc","isEqual","priorDoc","push","oldIndex","newIndex","sortedChanges","events","current","changes","combineChanges","it","c","indexOf","combineChange","sliceAndSplice","original","start","deleteCount","args","returnArray","slice","splice","combined","copiedArray","validateEventsArray","length","AngularFirestoreCollection","constructor","afs","stateChanges","source","schedulers","outsideAngular","prior","auditTrail","snapshotChanges","validatedEvents","scheduledSortedChanges$","valueChanges","options","a","idField","Object","assign","data","id","get","add","path","AngularFirestoreDocument","set","update","delete","collection","queryFn","collectionRef","associateQuery","scheduledFromDocRef$","AngularFirestoreCollectionGroup","fromCollectionRefScheduled$","ENABLE_PERSISTENCE","PERSISTENCE_SETTINGS","AngularFirestore","name","shouldEnablePersistence","settings","platformId","zone","persistenceSettings","_useEmulator","auth","useAuthEmulator","authSettings","tenantId","languageCode","useDeviceLanguage","persistence","_appCheckInstances","app","useEmulator","firestore","persistenceEnabled$","runOutsideAngular","enablePersistence","then","e","console","warn","pathOrRef","refInZone","ngZone","run","collectionGroup","collectionId","queryGroupFn","createId","ɵfac","NgZone","ɵAngularFireSchedulers","AngularFireAuth","AppCheckInstances","ɵprov","providedIn","decorators","AngularFirestoreModule","registerVersion","full","ngModule","providers","provide","useValue","ɵmod","ɵinj"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\r\nimport { InjectionToken, PLATFORM_ID, Injectable, Inject, Optional, NgModule } from '@angular/core';\r\nimport { asyncScheduler, Observable, from, of } from 'rxjs';\r\nimport * as i1 from '@angular/fire';\r\nimport { keepUnstableUntilFirst, VERSION } from '@angular/fire';\r\nimport { startWith, pairwise, map, scan, distinctUntilChanged, filter } from 'rxjs/operators';\r\nimport { ɵfirebaseAppFactory, ɵcacheInstance, FIREBASE_OPTIONS, FIREBASE_APP_NAME } from '@angular/fire/compat';\r\nimport { isPlatformServer } from '@angular/common';\r\nimport 'firebase/compat/auth';\r\nimport 'firebase/compat/firestore';\r\nimport * as i2 from '@angular/fire/compat/auth';\r\nimport { ɵauthFactory, USE_EMULATOR as USE_EMULATOR$1, SETTINGS as SETTINGS$1, TENANT_ID, LANGUAGE_CODE, USE_DEVICE_LANGUAGE, PERSISTENCE } from '@angular/fire/compat/auth';\r\nimport * as i3 from '@angular/fire/app-check';\r\nimport firebase from 'firebase/compat/app';\r\n\r\nfunction _fromRef(ref, scheduler = asyncScheduler) {\r\n    return new Observable(subscriber => {\r\n        let unsubscribe;\r\n        if (scheduler != null) {\r\n            scheduler.schedule(() => {\r\n                unsubscribe = ref.onSnapshot({ includeMetadataChanges: true }, subscriber);\r\n            });\r\n        }\r\n        else {\r\n            unsubscribe = ref.onSnapshot({ includeMetadataChanges: true }, subscriber);\r\n        }\r\n        return () => {\r\n            if (unsubscribe != null) {\r\n                unsubscribe();\r\n            }\r\n        };\r\n    });\r\n}\r\nfunction fromRef(ref, scheduler) {\r\n    return _fromRef(ref, scheduler);\r\n}\r\nfunction fromDocRef(ref, scheduler) {\r\n    return fromRef(ref, scheduler)\r\n        .pipe(startWith(undefined), pairwise(), map(([priorPayload, payload]) => {\r\n        if (!payload.exists) {\r\n            return { payload, type: 'removed' };\r\n        }\r\n        if (!(priorPayload === null || priorPayload === void 0 ? void 0 : priorPayload.exists)) {\r\n            return { payload, type: 'added' };\r\n        }\r\n        return { payload, type: 'modified' };\r\n    }));\r\n}\r\nfunction fromCollectionRef(ref, scheduler) {\r\n    return fromRef(ref, scheduler).pipe(map(payload => ({ payload, type: 'query' })));\r\n}\r\n\r\n/**\r\n * Return a stream of document changes on a query. These results are not in sort order but in\r\n * order of occurence.\r\n */\r\nfunction docChanges(query, scheduler) {\r\n    return fromCollectionRef(query, scheduler)\r\n        .pipe(startWith(undefined), pairwise(), map(([priorAction, action]) => {\r\n        const docChanges = action.payload.docChanges();\r\n        const actions = docChanges.map(change => ({ type: change.type, payload: change }));\r\n        // the metadata has changed from the prior emission\r\n        if (priorAction && JSON.stringify(priorAction.payload.metadata) !== JSON.stringify(action.payload.metadata)) {\r\n            // go through all the docs in payload and figure out which ones changed\r\n            action.payload.docs.forEach((currentDoc, currentIndex) => {\r\n                const docChange = docChanges.find(d => d.doc.ref.isEqual(currentDoc.ref));\r\n                const priorDoc = priorAction === null || priorAction === void 0 ? void 0 : priorAction.payload.docs.find(d => d.ref.isEqual(currentDoc.ref));\r\n                if (docChange && JSON.stringify(docChange.doc.metadata) === JSON.stringify(currentDoc.metadata) ||\r\n                    !docChange && priorDoc && JSON.stringify(priorDoc.metadata) === JSON.stringify(currentDoc.metadata)) {\r\n                    // document doesn't appear to have changed, don't log another action\r\n                }\r\n                else {\r\n                    // since the actions are processed in order just push onto the array\r\n                    actions.push({\r\n                        type: 'modified',\r\n                        payload: {\r\n                            oldIndex: currentIndex,\r\n                            newIndex: currentIndex,\r\n                            type: 'modified',\r\n                            doc: currentDoc\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        return actions;\r\n    }));\r\n}\r\n/**\r\n * Return a stream of document changes on a query. These results are in sort order.\r\n */\r\nfunction sortedChanges(query, events, scheduler) {\r\n    return docChanges(query, scheduler)\r\n        .pipe(scan((current, changes) => combineChanges(current, changes.map(it => it.payload), events), []), distinctUntilChanged(), // cut down on unneed change cycles\r\n    map(changes => changes.map(c => ({ type: c.type, payload: c }))));\r\n}\r\n/**\r\n * Combines the total result set from the current set of changes from an incoming set\r\n * of changes.\r\n */\r\nfunction combineChanges(current, changes, events) {\r\n    changes.forEach(change => {\r\n        // skip unwanted change types\r\n        if (events.indexOf(change.type) > -1) {\r\n            current = combineChange(current, change);\r\n        }\r\n    });\r\n    return current;\r\n}\r\n/**\r\n * Splice arguments on top of a sliced array, to break top-level ===\r\n * this is useful for change-detection\r\n */\r\nfunction sliceAndSplice(original, start, deleteCount, ...args) {\r\n    const returnArray = original.slice();\r\n    returnArray.splice(start, deleteCount, ...args);\r\n    return returnArray;\r\n}\r\n/**\r\n * Creates a new sorted array from a new change.\r\n * Build our own because we allow filtering of action types ('added', 'removed', 'modified') before scanning\r\n * and so we have greater control over change detection (by breaking ===)\r\n */\r\nfunction combineChange(combined, change) {\r\n    switch (change.type) {\r\n        case 'added':\r\n            if (combined[change.newIndex] && combined[change.newIndex].doc.ref.isEqual(change.doc.ref)) {\r\n                // Not sure why the duplicates are getting fired\r\n            }\r\n            else {\r\n                return sliceAndSplice(combined, change.newIndex, 0, change);\r\n            }\r\n            break;\r\n        case 'modified':\r\n            if (combined[change.oldIndex] == null || combined[change.oldIndex].doc.ref.isEqual(change.doc.ref)) {\r\n                // When an item changes position we first remove it\r\n                // and then add it's new position\r\n                if (change.oldIndex !== change.newIndex) {\r\n                    const copiedArray = combined.slice();\r\n                    copiedArray.splice(change.oldIndex, 1);\r\n                    copiedArray.splice(change.newIndex, 0, change);\r\n                    return copiedArray;\r\n                }\r\n                else {\r\n                    return sliceAndSplice(combined, change.newIndex, 1, change);\r\n                }\r\n            }\r\n            break;\r\n        case 'removed':\r\n            if (combined[change.oldIndex] && combined[change.oldIndex].doc.ref.isEqual(change.doc.ref)) {\r\n                return sliceAndSplice(combined, change.oldIndex, 1);\r\n            }\r\n            break;\r\n    }\r\n    return combined;\r\n}\r\n\r\nfunction validateEventsArray(events) {\r\n    if (!events || events.length === 0) {\r\n        events = ['added', 'removed', 'modified'];\r\n    }\r\n    return events;\r\n}\r\n/**\r\n * AngularFirestoreCollection service\r\n *\r\n * This class creates a reference to a Firestore Collection. A reference and a query are provided in\r\n * in the constructor. The query can be the unqueried reference if no query is desired.The class\r\n * is generic which gives you type safety for data update methods and data streaming.\r\n *\r\n * This class uses Symbol.observable to transform into Observable using Observable.from().\r\n *\r\n * This class is rarely used directly and should be created from the AngularFirestore service.\r\n *\r\n * Example:\r\n *\r\n * const collectionRef = firebase.firestore.collection('stocks');\r\n * const query = collectionRef.where('price', '>', '0.01');\r\n * const fakeStock = new AngularFirestoreCollection<Stock>(collectionRef, query);\r\n *\r\n * // NOTE!: the updates are performed on the reference not the query\r\n * await fakeStock.add({ name: 'FAKE', price: 0.01 });\r\n *\r\n * // Subscribe to changes as snapshots. This provides you data updates as well as delta updates.\r\n * fakeStock.valueChanges().subscribe(value => console.log(value));\r\n */\r\nclass AngularFirestoreCollection {\r\n    /**\r\n     * The constructor takes in a CollectionReference and Query to provide wrapper methods\r\n     * for data operations and data streaming.\r\n     *\r\n     * Note: Data operation methods are done on the reference not the query. This means\r\n     * when you update data it is not updating data to the window of your query unless\r\n     * the data fits the criteria of the query. See the AssociatedRefence type for details\r\n     * on this implication.\r\n     */\r\n    constructor(ref, query, afs) {\r\n        this.ref = ref;\r\n        this.query = query;\r\n        this.afs = afs;\r\n    }\r\n    /**\r\n     * Listen to the latest change in the stream. This method returns changes\r\n     * as they occur and they are not sorted by query order. This allows you to construct\r\n     * your own data structure.\r\n     */\r\n    stateChanges(events) {\r\n        let source = docChanges(this.query, this.afs.schedulers.outsideAngular);\r\n        if (events && events.length > 0) {\r\n            source = source.pipe(map(actions => actions.filter(change => events.indexOf(change.type) > -1)));\r\n        }\r\n        return source.pipe(\r\n        // We want to filter out empty arrays, but always emit at first, so the developer knows\r\n        // that the collection has been resolve; even if it's empty\r\n        startWith(undefined), pairwise(), filter(([prior, current]) => current.length > 0 || !prior), map(([prior, current]) => current), keepUnstableUntilFirst);\r\n    }\r\n    /**\r\n     * Create a stream of changes as they occur it time. This method is similar to stateChanges()\r\n     * but it collects each event in an array over time.\r\n     */\r\n    auditTrail(events) {\r\n        return this.stateChanges(events).pipe(scan((current, action) => [...current, ...action], []));\r\n    }\r\n    /**\r\n     * Create a stream of synchronized changes. This method keeps the local array in sorted\r\n     * query order.\r\n     */\r\n    snapshotChanges(events) {\r\n        const validatedEvents = validateEventsArray(events);\r\n        const scheduledSortedChanges$ = sortedChanges(this.query, validatedEvents, this.afs.schedulers.outsideAngular);\r\n        return scheduledSortedChanges$.pipe(keepUnstableUntilFirst);\r\n    }\r\n    valueChanges(options = {}) {\r\n        return fromCollectionRef(this.query, this.afs.schedulers.outsideAngular)\r\n            .pipe(map(actions => actions.payload.docs.map(a => {\r\n            if (options.idField) {\r\n                return Object.assign(Object.assign({}, a.data()), { [options.idField]: a.id });\r\n            }\r\n            else {\r\n                return a.data();\r\n            }\r\n        })), keepUnstableUntilFirst);\r\n    }\r\n    /**\r\n     * Retrieve the results of the query once.\r\n     */\r\n    get(options) {\r\n        return from(this.query.get(options)).pipe(keepUnstableUntilFirst);\r\n    }\r\n    /**\r\n     * Add data to a collection reference.\r\n     *\r\n     * Note: Data operation methods are done on the reference not the query. This means\r\n     * when you update data it is not updating data to the window of your query unless\r\n     * the data fits the criteria of the query.\r\n     */\r\n    add(data) {\r\n        return this.ref.add(data);\r\n    }\r\n    /**\r\n     * Create a reference to a single document in a collection.\r\n     */\r\n    doc(path) {\r\n        // TODO is there a better way to solve this type issue\r\n        return new AngularFirestoreDocument(this.ref.doc(path), this.afs);\r\n    }\r\n}\r\n\r\n/**\r\n * AngularFirestoreDocument service\r\n *\r\n * This class creates a reference to a Firestore Document. A reference is provided in\r\n * in the constructor. The class is generic which gives you type safety for data update\r\n * methods and data streaming.\r\n *\r\n * This class uses Symbol.observable to transform into Observable using Observable.from().\r\n *\r\n * This class is rarely used directly and should be created from the AngularFirestore service.\r\n *\r\n * Example:\r\n *\r\n * const fakeStock = new AngularFirestoreDocument<Stock>(doc('stocks/FAKE'));\r\n * await fakeStock.set({ name: 'FAKE', price: 0.01 });\r\n * fakeStock.valueChanges().map(snap => {\r\n *   if(snap.exists) return snap.data();\r\n *   return null;\r\n * }).subscribe(value => console.log(value));\r\n * // OR! Transform using Observable.from() and the data is unwrapped for you\r\n * Observable.from(fakeStock).subscribe(value => console.log(value));\r\n */\r\nclass AngularFirestoreDocument {\r\n    /**\r\n     * The constructor takes in a DocumentReference to provide wrapper methods\r\n     * for data operations, data streaming, and Symbol.observable.\r\n     */\r\n    constructor(ref, afs) {\r\n        this.ref = ref;\r\n        this.afs = afs;\r\n    }\r\n    /**\r\n     * Create or overwrite a single document.\r\n     */\r\n    set(data, options) {\r\n        return this.ref.set(data, options);\r\n    }\r\n    /**\r\n     * Update some fields of a document without overwriting the entire document.\r\n     */\r\n    update(data) {\r\n        return this.ref.update(data);\r\n    }\r\n    /**\r\n     * Delete a document.\r\n     */\r\n    delete() {\r\n        return this.ref.delete();\r\n    }\r\n    /**\r\n     * Create a reference to a sub-collection given a path and an optional query\r\n     * function.\r\n     */\r\n    collection(path, queryFn) {\r\n        const collectionRef = this.ref.collection(path);\r\n        const { ref, query } = associateQuery(collectionRef, queryFn);\r\n        return new AngularFirestoreCollection(ref, query, this.afs);\r\n    }\r\n    /**\r\n     * Listen to snapshot updates from the document.\r\n     */\r\n    snapshotChanges() {\r\n        const scheduledFromDocRef$ = fromDocRef(this.ref, this.afs.schedulers.outsideAngular);\r\n        return scheduledFromDocRef$.pipe(keepUnstableUntilFirst);\r\n    }\r\n    valueChanges(options = {}) {\r\n        return this.snapshotChanges().pipe(map(({ payload }) => options.idField ? Object.assign(Object.assign({}, payload.data()), { [options.idField]: payload.id }) : payload.data()));\r\n    }\r\n    /**\r\n     * Retrieve the document once.\r\n     */\r\n    get(options) {\r\n        return from(this.ref.get(options)).pipe(keepUnstableUntilFirst);\r\n    }\r\n}\r\n\r\n/**\r\n * AngularFirestoreCollectionGroup service\r\n *\r\n * This class holds a reference to a Firestore Collection Group Query.\r\n *\r\n * This class uses Symbol.observable to transform into Observable using Observable.from().\r\n *\r\n * This class is rarely used directly and should be created from the AngularFirestore service.\r\n *\r\n * Example:\r\n *\r\n * const collectionGroup = firebase.firestore.collectionGroup('stocks');\r\n * const query = collectionRef.where('price', '>', '0.01');\r\n * const fakeStock = new AngularFirestoreCollectionGroup<Stock>(query, afs);\r\n *\r\n * // Subscribe to changes as snapshots. This provides you data updates as well as delta updates.\r\n * fakeStock.valueChanges().subscribe(value => console.log(value));\r\n */\r\nclass AngularFirestoreCollectionGroup {\r\n    /**\r\n     * The constructor takes in a CollectionGroupQuery to provide wrapper methods\r\n     * for data operations and data streaming.\r\n     */\r\n    constructor(query, afs) {\r\n        this.query = query;\r\n        this.afs = afs;\r\n    }\r\n    /**\r\n     * Listen to the latest change in the stream. This method returns changes\r\n     * as they occur and they are not sorted by query order. This allows you to construct\r\n     * your own data structure.\r\n     */\r\n    stateChanges(events) {\r\n        if (!events || events.length === 0) {\r\n            return docChanges(this.query, this.afs.schedulers.outsideAngular).pipe(keepUnstableUntilFirst);\r\n        }\r\n        return docChanges(this.query, this.afs.schedulers.outsideAngular)\r\n            .pipe(map(actions => actions.filter(change => events.indexOf(change.type) > -1)), filter(changes => changes.length > 0), keepUnstableUntilFirst);\r\n    }\r\n    /**\r\n     * Create a stream of changes as they occur it time. This method is similar to stateChanges()\r\n     * but it collects each event in an array over time.\r\n     */\r\n    auditTrail(events) {\r\n        return this.stateChanges(events).pipe(scan((current, action) => [...current, ...action], []));\r\n    }\r\n    /**\r\n     * Create a stream of synchronized changes. This method keeps the local array in sorted\r\n     * query order.\r\n     */\r\n    snapshotChanges(events) {\r\n        const validatedEvents = validateEventsArray(events);\r\n        const scheduledSortedChanges$ = sortedChanges(this.query, validatedEvents, this.afs.schedulers.outsideAngular);\r\n        return scheduledSortedChanges$.pipe(keepUnstableUntilFirst);\r\n    }\r\n    valueChanges(options = {}) {\r\n        const fromCollectionRefScheduled$ = fromCollectionRef(this.query, this.afs.schedulers.outsideAngular);\r\n        return fromCollectionRefScheduled$\r\n            .pipe(map(actions => actions.payload.docs.map(a => {\r\n            if (options.idField) {\r\n                return Object.assign({ [options.idField]: a.id }, a.data());\r\n            }\r\n            else {\r\n                return a.data();\r\n            }\r\n        })), keepUnstableUntilFirst);\r\n    }\r\n    /**\r\n     * Retrieve the results of the query once.\r\n     */\r\n    get(options) {\r\n        return from(this.query.get(options)).pipe(keepUnstableUntilFirst);\r\n    }\r\n}\r\n\r\n/**\r\n * The value of this token determines whether or not the firestore will have persistance enabled\r\n */\r\nconst ENABLE_PERSISTENCE = new InjectionToken('angularfire2.enableFirestorePersistence');\r\nconst PERSISTENCE_SETTINGS = new InjectionToken('angularfire2.firestore.persistenceSettings');\r\nconst SETTINGS = new InjectionToken('angularfire2.firestore.settings');\r\nconst USE_EMULATOR = new InjectionToken('angularfire2.firestore.use-emulator');\r\n/**\r\n * A utility methods for associating a collection reference with\r\n * a query.\r\n *\r\n * @param collectionRef - A collection reference to query\r\n * @param queryFn - The callback to create a query\r\n *\r\n * Example:\r\n * const { query, ref } = associateQuery(docRef.collection('items'), ref => {\r\n *  return ref.where('age', '<', 200);\r\n * });\r\n */\r\nfunction associateQuery(collectionRef, queryFn = ref => ref) {\r\n    const query = queryFn(collectionRef);\r\n    const ref = collectionRef;\r\n    return { query, ref };\r\n}\r\n/**\r\n * AngularFirestore Service\r\n *\r\n * This service is the main entry point for this feature module. It provides\r\n * an API for creating Collection and Reference services. These services can\r\n * then be used to do data updates and observable streams of the data.\r\n *\r\n * Example:\r\n *\r\n * import { Component } from '@angular/core';\r\n * import { AngularFirestore, AngularFirestoreCollection, AngularFirestoreDocument } from '@angular/fire/firestore';\r\n * import { Observable } from 'rxjs/Observable';\r\n * import { from } from 'rxjs/observable';\r\n *\r\n * @Component({\r\n *   selector: 'app-my-component',\r\n *   template: `\r\n *    <h2>Items for {{ (profile | async)?.name }}\r\n *    <ul>\r\n *       <li *ngFor=\"let item of items | async\">{{ item.name }}</li>\r\n *    </ul>\r\n *    <div class=\"control-input\">\r\n *       <input type=\"text\" #itemname />\r\n *       <button (click)=\"addItem(itemname.value)\">Add Item</button>\r\n *    </div>\r\n *   `\r\n * })\r\n * export class MyComponent implements OnInit {\r\n *\r\n *   // services for data operations and data streaming\r\n *   private readonly itemsRef: AngularFirestoreCollection<Item>;\r\n *   private readonly profileRef: AngularFirestoreDocument<Profile>;\r\n *\r\n *   // observables for template\r\n *   items: Observable<Item[]>;\r\n *   profile: Observable<Profile>;\r\n *\r\n *   // inject main service\r\n *   constructor(private readonly afs: AngularFirestore) {}\r\n *\r\n *   ngOnInit() {\r\n *     this.itemsRef = afs.collection('items', ref => ref.where('user', '==', 'davideast').limit(10));\r\n *     this.items = this.itemsRef.valueChanges().map(snap => snap.docs.map(data => doc.data()));\r\n *     // this.items = from(this.itemsRef); // you can also do this with no mapping\r\n *\r\n *     this.profileRef = afs.doc('users/davideast');\r\n *     this.profile = this.profileRef.valueChanges();\r\n *   }\r\n *\r\n *   addItem(name: string) {\r\n *     const user = 'davideast';\r\n *     this.itemsRef.add({ name, user });\r\n *   }\r\n * }\r\n */\r\nclass AngularFirestore {\r\n    /**\r\n     * Each Feature of AngularFire has a FirebaseApp injected. This way we\r\n     * don't rely on the main Firebase App instance and we can create named\r\n     * apps and use multiple apps.\r\n     */\r\n    constructor(options, name, shouldEnablePersistence, settings, \r\n    // tslint:disable-next-line:ban-types\r\n    platformId, zone, schedulers, persistenceSettings, _useEmulator, auth, useAuthEmulator, authSettings, // can't use firebase.auth.AuthSettings here\r\n    tenantId, languageCode, useDeviceLanguage, persistence, _appCheckInstances) {\r\n        this.schedulers = schedulers;\r\n        const app = ɵfirebaseAppFactory(options, zone, name);\r\n        const useEmulator = _useEmulator;\r\n        if (auth) {\r\n            ɵauthFactory(app, zone, useAuthEmulator, tenantId, languageCode, useDeviceLanguage, authSettings, persistence);\r\n        }\r\n        [this.firestore, this.persistenceEnabled$] = ɵcacheInstance(`${app.name}.firestore`, 'AngularFirestore', app.name, () => {\r\n            const firestore = zone.runOutsideAngular(() => app.firestore());\r\n            if (settings) {\r\n                firestore.settings(settings);\r\n            }\r\n            if (useEmulator) {\r\n                firestore.useEmulator(...useEmulator);\r\n            }\r\n            if (shouldEnablePersistence && !isPlatformServer(platformId)) {\r\n                // We need to try/catch here because not all enablePersistence() failures are caught\r\n                // https://github.com/firebase/firebase-js-sdk/issues/608\r\n                const enablePersistence = () => {\r\n                    try {\r\n                        return from(firestore.enablePersistence(persistenceSettings || undefined).then(() => true, () => false));\r\n                    }\r\n                    catch (e) {\r\n                        if (typeof console !== 'undefined') {\r\n                            console.warn(e);\r\n                        }\r\n                        return of(false);\r\n                    }\r\n                };\r\n                return [firestore, zone.runOutsideAngular(enablePersistence)];\r\n            }\r\n            else {\r\n                return [firestore, of(false)];\r\n            }\r\n        }, [settings, useEmulator, shouldEnablePersistence]);\r\n    }\r\n    collection(pathOrRef, queryFn) {\r\n        let collectionRef;\r\n        if (typeof pathOrRef === 'string') {\r\n            collectionRef = this.firestore.collection(pathOrRef);\r\n        }\r\n        else {\r\n            collectionRef = pathOrRef;\r\n        }\r\n        const { ref, query } = associateQuery(collectionRef, queryFn);\r\n        const refInZone = this.schedulers.ngZone.run(() => ref);\r\n        return new AngularFirestoreCollection(refInZone, query, this);\r\n    }\r\n    /**\r\n     * Create a reference to a Firestore Collection Group based on a collectionId\r\n     * and an optional query function to narrow the result\r\n     * set.\r\n     */\r\n    collectionGroup(collectionId, queryGroupFn) {\r\n        const queryFn = queryGroupFn || (ref => ref);\r\n        const collectionGroup = this.firestore.collectionGroup(collectionId);\r\n        return new AngularFirestoreCollectionGroup(queryFn(collectionGroup), this);\r\n    }\r\n    doc(pathOrRef) {\r\n        let ref;\r\n        if (typeof pathOrRef === 'string') {\r\n            ref = this.firestore.doc(pathOrRef);\r\n        }\r\n        else {\r\n            ref = pathOrRef;\r\n        }\r\n        const refInZone = this.schedulers.ngZone.run(() => ref);\r\n        return new AngularFirestoreDocument(refInZone, this);\r\n    }\r\n    /**\r\n     * Returns a generated Firestore Document Id.\r\n     */\r\n    createId() {\r\n        return this.firestore.collection('_').doc().id;\r\n    }\r\n}\r\nAngularFirestore.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AngularFirestore, deps: [{ token: FIREBASE_OPTIONS }, { token: FIREBASE_APP_NAME, optional: true }, { token: ENABLE_PERSISTENCE, optional: true }, { token: SETTINGS, optional: true }, { token: PLATFORM_ID }, { token: i0.NgZone }, { token: i1.ɵAngularFireSchedulers }, { token: PERSISTENCE_SETTINGS, optional: true }, { token: USE_EMULATOR, optional: true }, { token: i2.AngularFireAuth, optional: true }, { token: USE_EMULATOR$1, optional: true }, { token: SETTINGS$1, optional: true }, { token: TENANT_ID, optional: true }, { token: LANGUAGE_CODE, optional: true }, { token: USE_DEVICE_LANGUAGE, optional: true }, { token: PERSISTENCE, optional: true }, { token: i3.AppCheckInstances, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nAngularFirestore.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AngularFirestore, providedIn: 'any' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AngularFirestore, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'any'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [FIREBASE_OPTIONS]\r\n                }] }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [FIREBASE_APP_NAME]\r\n                }] }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [ENABLE_PERSISTENCE]\r\n                }] }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [SETTINGS]\r\n                }] }, { type: Object, decorators: [{\r\n                    type: Inject,\r\n                    args: [PLATFORM_ID]\r\n                }] }, { type: i0.NgZone }, { type: i1.ɵAngularFireSchedulers }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [PERSISTENCE_SETTINGS]\r\n                }] }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [USE_EMULATOR]\r\n                }] }, { type: i2.AngularFireAuth, decorators: [{\r\n                    type: Optional\r\n                }] }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [USE_EMULATOR$1]\r\n                }] }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [SETTINGS$1]\r\n                }] }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [TENANT_ID]\r\n                }] }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [LANGUAGE_CODE]\r\n                }] }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [USE_DEVICE_LANGUAGE]\r\n                }] }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [PERSISTENCE]\r\n                }] }, { type: i3.AppCheckInstances, decorators: [{\r\n                    type: Optional\r\n                }] }]; } });\r\n\r\nclass AngularFirestoreModule {\r\n    constructor() {\r\n        firebase.registerVersion('angularfire', VERSION.full, 'fst-compat');\r\n    }\r\n    /**\r\n     * Attempt to enable persistent storage, if possible\r\n     */\r\n    static enablePersistence(persistenceSettings) {\r\n        return {\r\n            ngModule: AngularFirestoreModule,\r\n            providers: [\r\n                { provide: ENABLE_PERSISTENCE, useValue: true },\r\n                { provide: PERSISTENCE_SETTINGS, useValue: persistenceSettings },\r\n            ]\r\n        };\r\n    }\r\n}\r\nAngularFirestoreModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AngularFirestoreModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nAngularFirestoreModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AngularFirestoreModule });\r\nAngularFirestoreModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AngularFirestoreModule, providers: [AngularFirestore] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AngularFirestoreModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    providers: [AngularFirestore]\r\n                }]\r\n        }], ctorParameters: function () { return []; } });\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { AngularFirestore, AngularFirestoreCollection, AngularFirestoreCollectionGroup, AngularFirestoreDocument, AngularFirestoreModule, ENABLE_PERSISTENCE, PERSISTENCE_SETTINGS, SETTINGS, USE_EMULATOR, associateQuery, combineChange, combineChanges, docChanges, fromCollectionRef, fromDocRef, fromRef, sortedChanges, validateEventsArray };\r\n\n"]},"metadata":{},"sourceType":"module"}