{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, PLATFORM_ID, Injectable, Inject, Optional, NgModule } from '@angular/core';\nimport { asyncScheduler, Observable, of, merge } from 'rxjs';\nimport { map, share, switchMap, scan, distinctUntilChanged, withLatestFrom, skipWhile } from 'rxjs/operators';\nimport * as i1 from '@angular/fire';\nimport { keepUnstableUntilFirst, VERSION } from '@angular/fire';\nimport { ɵfirebaseAppFactory, ɵcacheInstance, FIREBASE_OPTIONS, FIREBASE_APP_NAME } from '@angular/fire/compat';\nimport 'firebase/compat/auth';\nimport 'firebase/compat/database';\nimport * as i2 from '@angular/fire/compat/auth';\nimport { ɵauthFactory, USE_EMULATOR as USE_EMULATOR$1, SETTINGS, TENANT_ID, LANGUAGE_CODE, USE_DEVICE_LANGUAGE, PERSISTENCE } from '@angular/fire/compat/auth';\nimport * as i3 from '@angular/fire/app-check';\nimport firebase from 'firebase/compat/app';\n\nfunction isString(value) {\n  return typeof value === 'string';\n}\n\nfunction isFirebaseDataSnapshot(value) {\n  return typeof value.exportVal === 'function';\n}\n\nfunction isNil(obj) {\n  return obj === undefined || obj === null;\n}\n\nfunction isFirebaseRef(value) {\n  return typeof value.set === 'function';\n}\n/**\r\n * Returns a database reference given a Firebase App and an\r\n * absolute or relative path.\r\n * @param database - Firebase Database\r\n * @param pathRef - Database path, relative or absolute\r\n */\n\n\nfunction getRef(database, pathRef) {\n  // if a db ref was passed in, just return it\n  return isFirebaseRef(pathRef) ? pathRef : database.ref(pathRef);\n}\n\nfunction checkOperationCases(item, cases) {\n  if (isString(item)) {\n    return cases.stringCase();\n  } else if (isFirebaseRef(item)) {\n    return cases.firebaseCase();\n  } else if (isFirebaseDataSnapshot(item)) {\n    return cases.snapshotCase();\n  }\n\n  throw new Error(`Expects a string, snapshot, or reference. Got: ${typeof item}`);\n}\n/**\r\n * Create an observable from a Database Reference or Database Query.\r\n * @param ref Database Reference\r\n * @param event Listen event type ('value', 'added', 'changed', 'removed', 'moved')\r\n * @param listenType 'on' or 'once'\r\n * @param scheduler - Rxjs scheduler\r\n */\n\n\nfunction fromRef(ref, event, listenType = 'on', scheduler = asyncScheduler) {\n  return new Observable(subscriber => {\n    let fn = null;\n    fn = ref[listenType](event, (snapshot, prevKey) => {\n      scheduler.schedule(() => {\n        subscriber.next({\n          snapshot,\n          prevKey\n        });\n      });\n\n      if (listenType === 'once') {\n        scheduler.schedule(() => subscriber.complete());\n      }\n    }, err => {\n      scheduler.schedule(() => subscriber.error(err));\n    });\n\n    if (listenType === 'on') {\n      return {\n        unsubscribe() {\n          if (fn != null) {\n            ref.off(event, fn);\n          }\n        }\n\n      };\n    } else {\n      return {\n        unsubscribe() {}\n\n      };\n    }\n  }).pipe(map(payload => {\n    const {\n      snapshot,\n      prevKey\n    } = payload;\n    let key = null;\n\n    if (snapshot.exists()) {\n      key = snapshot.key;\n    }\n\n    return {\n      type: event,\n      payload: snapshot,\n      prevKey,\n      key\n    };\n  }), share());\n}\n\nfunction listChanges(ref, events, scheduler) {\n  return fromRef(ref, 'value', 'once', scheduler).pipe(switchMap(snapshotAction => {\n    const childEvent$ = [of(snapshotAction)];\n    events.forEach(event => childEvent$.push(fromRef(ref, event, 'on', scheduler)));\n    return merge(...childEvent$).pipe(scan(buildView, []));\n  }), distinctUntilChanged());\n}\n\nfunction positionFor(changes, key) {\n  const len = changes.length;\n\n  for (let i = 0; i < len; i++) {\n    if (changes[i].payload.key === key) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\nfunction positionAfter(changes, prevKey) {\n  if (isNil(prevKey)) {\n    return 0;\n  } else {\n    const i = positionFor(changes, prevKey);\n\n    if (i === -1) {\n      return changes.length;\n    } else {\n      return i + 1;\n    }\n  }\n}\n\nfunction buildView(current, action) {\n  const {\n    payload,\n    prevKey,\n    key\n  } = action;\n  const currentKeyPosition = positionFor(current, key);\n  const afterPreviousKeyPosition = positionAfter(current, prevKey);\n\n  switch (action.type) {\n    case 'value':\n      if (action.payload && action.payload.exists()) {\n        let prevKey = null;\n        action.payload.forEach(payload => {\n          const action = {\n            payload,\n            type: 'value',\n            prevKey,\n            key: payload.key\n          };\n          prevKey = payload.key;\n          current = [...current, action];\n          return false;\n        });\n      }\n\n      return current;\n\n    case 'child_added':\n      if (currentKeyPosition > -1) {\n        // check that the previouskey is what we expect, else reorder\n        const previous = current[currentKeyPosition - 1];\n\n        if ((previous && previous.key || null) !== prevKey) {\n          current = current.filter(x => x.payload.key !== payload.key);\n          current.splice(afterPreviousKeyPosition, 0, action);\n        }\n      } else if (prevKey == null) {\n        return [action, ...current];\n      } else {\n        current = current.slice();\n        current.splice(afterPreviousKeyPosition, 0, action);\n      }\n\n      return current;\n\n    case 'child_removed':\n      return current.filter(x => x.payload.key !== payload.key);\n\n    case 'child_changed':\n      return current.map(x => x.payload.key === key ? action : x);\n\n    case 'child_moved':\n      if (currentKeyPosition > -1) {\n        const data = current.splice(currentKeyPosition, 1)[0];\n        current = current.slice();\n        current.splice(afterPreviousKeyPosition, 0, data);\n        return current;\n      }\n\n      return current;\n    // default will also remove null results\n\n    default:\n      return current;\n  }\n}\n\nfunction validateEventsArray(events) {\n  if (isNil(events) || events.length === 0) {\n    events = ['child_added', 'child_removed', 'child_changed', 'child_moved'];\n  }\n\n  return events;\n}\n\nfunction snapshotChanges(query, events, scheduler) {\n  events = validateEventsArray(events);\n  return listChanges(query, events, scheduler);\n}\n\nfunction stateChanges(query, events, scheduler) {\n  events = validateEventsArray(events);\n  const childEvent$ = events.map(event => fromRef(query, event, 'on', scheduler));\n  return merge(...childEvent$);\n}\n\nfunction auditTrail(query, events, scheduler) {\n  const auditTrail$ = stateChanges(query, events).pipe(scan((current, action) => [...current, action], []));\n  return waitForLoaded(query, auditTrail$, scheduler);\n}\n\nfunction loadedData(query, scheduler) {\n  // Create an observable of loaded values to retrieve the\n  // known dataset. This will allow us to know what key to\n  // emit the \"whole\" array at when listening for child events.\n  return fromRef(query, 'value', 'on', scheduler).pipe(map(data => {\n    // Store the last key in the data set\n    let lastKeyToLoad; // Loop through loaded dataset to find the last key\n\n    data.payload.forEach(child => {\n      lastKeyToLoad = child.key;\n      return false;\n    }); // return data set and the current last key loaded\n\n    return {\n      data,\n      lastKeyToLoad\n    };\n  }));\n}\n\nfunction waitForLoaded(query, action$, scheduler) {\n  const loaded$ = loadedData(query, scheduler);\n  return loaded$.pipe(withLatestFrom(action$), // Get the latest values from the \"loaded\" and \"child\" datasets\n  // We can use both datasets to form an array of the latest values.\n  map(([loaded, actions]) => {\n    // Store the last key in the data set\n    const lastKeyToLoad = loaded.lastKeyToLoad; // Store all child keys loaded at this point\n\n    const loadedKeys = actions.map(snap => snap.key);\n    return {\n      actions,\n      lastKeyToLoad,\n      loadedKeys\n    };\n  }), // This is the magical part, only emit when the last load key\n  // in the dataset has been loaded by a child event. At this point\n  // we can assume the dataset is \"whole\".\n  skipWhile(meta => meta.loadedKeys.indexOf(meta.lastKeyToLoad) === -1), // Pluck off the meta data because the user only cares\n  // to iterate through the snapshots\n  map(meta => meta.actions));\n}\n\nfunction createDataOperationMethod(ref, operation) {\n  return function dataOperation(item, value) {\n    return checkOperationCases(item, {\n      stringCase: () => ref.child(item)[operation](value),\n      firebaseCase: () => item[operation](value),\n      snapshotCase: () => item.ref[operation](value)\n    });\n  };\n} // TODO(davideast): Find out why TS thinks this returns firebase.Primise\n// instead of Promise.\n\n\nfunction createRemoveMethod(ref) {\n  return function remove(item) {\n    if (!item) {\n      return ref.remove();\n    }\n\n    return checkOperationCases(item, {\n      stringCase: () => ref.child(item).remove(),\n      firebaseCase: () => item.remove(),\n      snapshotCase: () => item.ref.remove()\n    });\n  };\n}\n\nfunction createListReference(query, afDatabase) {\n  const outsideAngularScheduler = afDatabase.schedulers.outsideAngular;\n  const refInZone = afDatabase.schedulers.ngZone.run(() => query.ref);\n  return {\n    query,\n    update: createDataOperationMethod(refInZone, 'update'),\n    set: createDataOperationMethod(refInZone, 'set'),\n    push: data => refInZone.push(data),\n    remove: createRemoveMethod(refInZone),\n\n    snapshotChanges(events) {\n      return snapshotChanges(query, events, outsideAngularScheduler).pipe(keepUnstableUntilFirst);\n    },\n\n    stateChanges(events) {\n      return stateChanges(query, events, outsideAngularScheduler).pipe(keepUnstableUntilFirst);\n    },\n\n    auditTrail(events) {\n      return auditTrail(query, events, outsideAngularScheduler).pipe(keepUnstableUntilFirst);\n    },\n\n    valueChanges(events, options) {\n      const snapshotChanges$ = snapshotChanges(query, events, outsideAngularScheduler);\n      return snapshotChanges$.pipe(map(actions => actions.map(a => {\n        if (options && options.idField) {\n          return Object.assign(Object.assign({}, a.payload.val()), {\n            [options.idField]: a.key\n          });\n        } else {\n          return a.payload.val();\n        }\n      })), keepUnstableUntilFirst);\n    }\n\n  };\n}\n\nfunction createObjectSnapshotChanges(query, scheduler) {\n  return function snapshotChanges() {\n    return fromRef(query, 'value', 'on', scheduler);\n  };\n}\n\nfunction createObjectReference(query, afDatabase) {\n  return {\n    query,\n\n    snapshotChanges() {\n      return createObjectSnapshotChanges(query, afDatabase.schedulers.outsideAngular)().pipe(keepUnstableUntilFirst);\n    },\n\n    update(data) {\n      return query.ref.update(data);\n    },\n\n    set(data) {\n      return query.ref.set(data);\n    },\n\n    remove() {\n      return query.ref.remove();\n    },\n\n    valueChanges() {\n      const snapshotChanges$ = createObjectSnapshotChanges(query, afDatabase.schedulers.outsideAngular)();\n      return snapshotChanges$.pipe(keepUnstableUntilFirst, map(action => action.payload.exists() ? action.payload.val() : null));\n    }\n\n  };\n}\n\nconst URL = new InjectionToken('angularfire2.realtimeDatabaseURL');\nconst USE_EMULATOR = new InjectionToken('angularfire2.database.use-emulator');\n\nclass AngularFireDatabase {\n  constructor(options, name, databaseURL, // tslint:disable-next-line:ban-types\n  platformId, zone, schedulers, _useEmulator, // tuple isn't working here\n  auth, useAuthEmulator, authSettings, // can't use firebase.auth.AuthSettings here\n  tenantId, languageCode, useDeviceLanguage, persistence, _appCheckInstances) {\n    this.schedulers = schedulers;\n    const useEmulator = _useEmulator;\n    const app = ɵfirebaseAppFactory(options, zone, name);\n\n    if (auth) {\n      ɵauthFactory(app, zone, useAuthEmulator, tenantId, languageCode, useDeviceLanguage, authSettings, persistence);\n    }\n\n    this.database = ɵcacheInstance(`${app.name}.database.${databaseURL}`, 'AngularFireDatabase', app.name, () => {\n      const database = zone.runOutsideAngular(() => app.database(databaseURL || undefined));\n\n      if (useEmulator) {\n        database.useEmulator(...useEmulator);\n      }\n\n      return database;\n    }, [useEmulator]);\n  }\n\n  list(pathOrRef, queryFn) {\n    const ref = this.schedulers.ngZone.runOutsideAngular(() => getRef(this.database, pathOrRef));\n    let query = ref;\n\n    if (queryFn) {\n      query = queryFn(ref);\n    }\n\n    return createListReference(query, this);\n  }\n\n  object(pathOrRef) {\n    const ref = this.schedulers.ngZone.runOutsideAngular(() => getRef(this.database, pathOrRef));\n    return createObjectReference(ref, this);\n  }\n\n  createPushId() {\n    const ref = this.schedulers.ngZone.runOutsideAngular(() => this.database.ref());\n    return ref.push().key;\n  }\n\n}\n\nAngularFireDatabase.ɵfac = function AngularFireDatabase_Factory(t) {\n  return new (t || AngularFireDatabase)(i0.ɵɵinject(FIREBASE_OPTIONS), i0.ɵɵinject(FIREBASE_APP_NAME, 8), i0.ɵɵinject(URL, 8), i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1.ɵAngularFireSchedulers), i0.ɵɵinject(USE_EMULATOR, 8), i0.ɵɵinject(i2.AngularFireAuth, 8), i0.ɵɵinject(USE_EMULATOR$1, 8), i0.ɵɵinject(SETTINGS, 8), i0.ɵɵinject(TENANT_ID, 8), i0.ɵɵinject(LANGUAGE_CODE, 8), i0.ɵɵinject(USE_DEVICE_LANGUAGE, 8), i0.ɵɵinject(PERSISTENCE, 8), i0.ɵɵinject(i3.AppCheckInstances, 8));\n};\n\nAngularFireDatabase.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: AngularFireDatabase,\n  factory: AngularFireDatabase.ɵfac,\n  providedIn: 'any'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AngularFireDatabase, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'any'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [FIREBASE_OPTIONS]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [FIREBASE_APP_NAME]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [URL]\n      }]\n    }, {\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i1.ɵAngularFireSchedulers\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [USE_EMULATOR]\n      }]\n    }, {\n      type: i2.AngularFireAuth,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [USE_EMULATOR$1]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [SETTINGS]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [TENANT_ID]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [LANGUAGE_CODE]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [USE_DEVICE_LANGUAGE]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [PERSISTENCE]\n      }]\n    }, {\n      type: i3.AppCheckInstances,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n\nclass AngularFireDatabaseModule {\n  constructor() {\n    firebase.registerVersion('angularfire', VERSION.full, 'rtdb-compat');\n  }\n\n}\n\nAngularFireDatabaseModule.ɵfac = function AngularFireDatabaseModule_Factory(t) {\n  return new (t || AngularFireDatabaseModule)();\n};\n\nAngularFireDatabaseModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: AngularFireDatabaseModule\n});\nAngularFireDatabaseModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [AngularFireDatabase]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AngularFireDatabaseModule, [{\n    type: NgModule,\n    args: [{\n      providers: [AngularFireDatabase]\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { AngularFireDatabase, AngularFireDatabaseModule, URL, USE_EMULATOR, auditTrail, createListReference, fromRef, listChanges, snapshotChanges, stateChanges };","map":{"version":3,"sources":["D:/Project-2/front-end/codegym-cinema-fe/node_modules/@angular/fire/fesm2015/angular-fire-compat-database.js"],"names":["i0","InjectionToken","PLATFORM_ID","Injectable","Inject","Optional","NgModule","asyncScheduler","Observable","of","merge","map","share","switchMap","scan","distinctUntilChanged","withLatestFrom","skipWhile","i1","keepUnstableUntilFirst","VERSION","ɵfirebaseAppFactory","ɵcacheInstance","FIREBASE_OPTIONS","FIREBASE_APP_NAME","i2","ɵauthFactory","USE_EMULATOR","USE_EMULATOR$1","SETTINGS","TENANT_ID","LANGUAGE_CODE","USE_DEVICE_LANGUAGE","PERSISTENCE","i3","firebase","isString","value","isFirebaseDataSnapshot","exportVal","isNil","obj","undefined","isFirebaseRef","set","getRef","database","pathRef","ref","checkOperationCases","item","cases","stringCase","firebaseCase","snapshotCase","Error","fromRef","event","listenType","scheduler","subscriber","fn","snapshot","prevKey","schedule","next","complete","err","error","unsubscribe","off","pipe","payload","key","exists","type","listChanges","events","snapshotAction","childEvent$","forEach","push","buildView","positionFor","changes","len","length","i","positionAfter","current","action","currentKeyPosition","afterPreviousKeyPosition","previous","filter","x","splice","slice","data","validateEventsArray","snapshotChanges","query","stateChanges","auditTrail","auditTrail$","waitForLoaded","loadedData","lastKeyToLoad","child","action$","loaded$","loaded","actions","loadedKeys","snap","meta","indexOf","createDataOperationMethod","operation","dataOperation","createRemoveMethod","remove","createListReference","afDatabase","outsideAngularScheduler","schedulers","outsideAngular","refInZone","ngZone","run","update","valueChanges","options","snapshotChanges$","a","idField","Object","assign","val","createObjectSnapshotChanges","createObjectReference","URL","AngularFireDatabase","constructor","name","databaseURL","platformId","zone","_useEmulator","auth","useAuthEmulator","authSettings","tenantId","languageCode","useDeviceLanguage","persistence","_appCheckInstances","useEmulator","app","runOutsideAngular","list","pathOrRef","queryFn","object","createPushId","ɵfac","NgZone","ɵAngularFireSchedulers","AngularFireAuth","AppCheckInstances","ɵprov","args","providedIn","decorators","AngularFireDatabaseModule","registerVersion","full","ɵmod","ɵinj","providers"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\r\nimport { InjectionToken, PLATFORM_ID, Injectable, Inject, Optional, NgModule } from '@angular/core';\r\nimport { asyncScheduler, Observable, of, merge } from 'rxjs';\r\nimport { map, share, switchMap, scan, distinctUntilChanged, withLatestFrom, skipWhile } from 'rxjs/operators';\r\nimport * as i1 from '@angular/fire';\r\nimport { keepUnstableUntilFirst, VERSION } from '@angular/fire';\r\nimport { ɵfirebaseAppFactory, ɵcacheInstance, FIREBASE_OPTIONS, FIREBASE_APP_NAME } from '@angular/fire/compat';\r\nimport 'firebase/compat/auth';\r\nimport 'firebase/compat/database';\r\nimport * as i2 from '@angular/fire/compat/auth';\r\nimport { ɵauthFactory, USE_EMULATOR as USE_EMULATOR$1, SETTINGS, TENANT_ID, LANGUAGE_CODE, USE_DEVICE_LANGUAGE, PERSISTENCE } from '@angular/fire/compat/auth';\r\nimport * as i3 from '@angular/fire/app-check';\r\nimport firebase from 'firebase/compat/app';\r\n\r\nfunction isString(value) {\r\n    return typeof value === 'string';\r\n}\r\nfunction isFirebaseDataSnapshot(value) {\r\n    return typeof value.exportVal === 'function';\r\n}\r\nfunction isNil(obj) {\r\n    return obj === undefined || obj === null;\r\n}\r\nfunction isFirebaseRef(value) {\r\n    return typeof value.set === 'function';\r\n}\r\n/**\r\n * Returns a database reference given a Firebase App and an\r\n * absolute or relative path.\r\n * @param database - Firebase Database\r\n * @param pathRef - Database path, relative or absolute\r\n */\r\nfunction getRef(database, pathRef) {\r\n    // if a db ref was passed in, just return it\r\n    return isFirebaseRef(pathRef) ? pathRef\r\n        : database.ref(pathRef);\r\n}\r\nfunction checkOperationCases(item, cases) {\r\n    if (isString(item)) {\r\n        return cases.stringCase();\r\n    }\r\n    else if (isFirebaseRef(item)) {\r\n        return cases.firebaseCase();\r\n    }\r\n    else if (isFirebaseDataSnapshot(item)) {\r\n        return cases.snapshotCase();\r\n    }\r\n    throw new Error(`Expects a string, snapshot, or reference. Got: ${typeof item}`);\r\n}\r\n\r\n/**\r\n * Create an observable from a Database Reference or Database Query.\r\n * @param ref Database Reference\r\n * @param event Listen event type ('value', 'added', 'changed', 'removed', 'moved')\r\n * @param listenType 'on' or 'once'\r\n * @param scheduler - Rxjs scheduler\r\n */\r\nfunction fromRef(ref, event, listenType = 'on', scheduler = asyncScheduler) {\r\n    return new Observable(subscriber => {\r\n        let fn = null;\r\n        fn = ref[listenType](event, (snapshot, prevKey) => {\r\n            scheduler.schedule(() => {\r\n                subscriber.next({ snapshot, prevKey });\r\n            });\r\n            if (listenType === 'once') {\r\n                scheduler.schedule(() => subscriber.complete());\r\n            }\r\n        }, err => {\r\n            scheduler.schedule(() => subscriber.error(err));\r\n        });\r\n        if (listenType === 'on') {\r\n            return {\r\n                unsubscribe() {\r\n                    if (fn != null) {\r\n                        ref.off(event, fn);\r\n                    }\r\n                }\r\n            };\r\n        }\r\n        else {\r\n            return {\r\n                unsubscribe() {\r\n                }\r\n            };\r\n        }\r\n    }).pipe(map(payload => {\r\n        const { snapshot, prevKey } = payload;\r\n        let key = null;\r\n        if (snapshot.exists()) {\r\n            key = snapshot.key;\r\n        }\r\n        return { type: event, payload: snapshot, prevKey, key };\r\n    }), share());\r\n}\r\n\r\nfunction listChanges(ref, events, scheduler) {\r\n    return fromRef(ref, 'value', 'once', scheduler).pipe(switchMap(snapshotAction => {\r\n        const childEvent$ = [of(snapshotAction)];\r\n        events.forEach(event => childEvent$.push(fromRef(ref, event, 'on', scheduler)));\r\n        return merge(...childEvent$).pipe(scan(buildView, []));\r\n    }), distinctUntilChanged());\r\n}\r\nfunction positionFor(changes, key) {\r\n    const len = changes.length;\r\n    for (let i = 0; i < len; i++) {\r\n        if (changes[i].payload.key === key) {\r\n            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}\r\nfunction positionAfter(changes, prevKey) {\r\n    if (isNil(prevKey)) {\r\n        return 0;\r\n    }\r\n    else {\r\n        const i = positionFor(changes, prevKey);\r\n        if (i === -1) {\r\n            return changes.length;\r\n        }\r\n        else {\r\n            return i + 1;\r\n        }\r\n    }\r\n}\r\nfunction buildView(current, action) {\r\n    const { payload, prevKey, key } = action;\r\n    const currentKeyPosition = positionFor(current, key);\r\n    const afterPreviousKeyPosition = positionAfter(current, prevKey);\r\n    switch (action.type) {\r\n        case 'value':\r\n            if (action.payload && action.payload.exists()) {\r\n                let prevKey = null;\r\n                action.payload.forEach(payload => {\r\n                    const action = { payload, type: 'value', prevKey, key: payload.key };\r\n                    prevKey = payload.key;\r\n                    current = [...current, action];\r\n                    return false;\r\n                });\r\n            }\r\n            return current;\r\n        case 'child_added':\r\n            if (currentKeyPosition > -1) {\r\n                // check that the previouskey is what we expect, else reorder\r\n                const previous = current[currentKeyPosition - 1];\r\n                if ((previous && previous.key || null) !== prevKey) {\r\n                    current = current.filter(x => x.payload.key !== payload.key);\r\n                    current.splice(afterPreviousKeyPosition, 0, action);\r\n                }\r\n            }\r\n            else if (prevKey == null) {\r\n                return [action, ...current];\r\n            }\r\n            else {\r\n                current = current.slice();\r\n                current.splice(afterPreviousKeyPosition, 0, action);\r\n            }\r\n            return current;\r\n        case 'child_removed':\r\n            return current.filter(x => x.payload.key !== payload.key);\r\n        case 'child_changed':\r\n            return current.map(x => x.payload.key === key ? action : x);\r\n        case 'child_moved':\r\n            if (currentKeyPosition > -1) {\r\n                const data = current.splice(currentKeyPosition, 1)[0];\r\n                current = current.slice();\r\n                current.splice(afterPreviousKeyPosition, 0, data);\r\n                return current;\r\n            }\r\n            return current;\r\n        // default will also remove null results\r\n        default:\r\n            return current;\r\n    }\r\n}\r\n\r\nfunction validateEventsArray(events) {\r\n    if (isNil(events) || events.length === 0) {\r\n        events = ['child_added', 'child_removed', 'child_changed', 'child_moved'];\r\n    }\r\n    return events;\r\n}\r\n\r\nfunction snapshotChanges(query, events, scheduler) {\r\n    events = validateEventsArray(events);\r\n    return listChanges(query, events, scheduler);\r\n}\r\n\r\nfunction stateChanges(query, events, scheduler) {\r\n    events = validateEventsArray(events);\r\n    const childEvent$ = events.map(event => fromRef(query, event, 'on', scheduler));\r\n    return merge(...childEvent$);\r\n}\r\n\r\nfunction auditTrail(query, events, scheduler) {\r\n    const auditTrail$ = stateChanges(query, events)\r\n        .pipe(scan((current, action) => [...current, action], []));\r\n    return waitForLoaded(query, auditTrail$, scheduler);\r\n}\r\nfunction loadedData(query, scheduler) {\r\n    // Create an observable of loaded values to retrieve the\r\n    // known dataset. This will allow us to know what key to\r\n    // emit the \"whole\" array at when listening for child events.\r\n    return fromRef(query, 'value', 'on', scheduler)\r\n        .pipe(map(data => {\r\n        // Store the last key in the data set\r\n        let lastKeyToLoad;\r\n        // Loop through loaded dataset to find the last key\r\n        data.payload.forEach(child => {\r\n            lastKeyToLoad = child.key;\r\n            return false;\r\n        });\r\n        // return data set and the current last key loaded\r\n        return { data, lastKeyToLoad };\r\n    }));\r\n}\r\nfunction waitForLoaded(query, action$, scheduler) {\r\n    const loaded$ = loadedData(query, scheduler);\r\n    return loaded$\r\n        .pipe(withLatestFrom(action$), \r\n    // Get the latest values from the \"loaded\" and \"child\" datasets\r\n    // We can use both datasets to form an array of the latest values.\r\n    map(([loaded, actions]) => {\r\n        // Store the last key in the data set\r\n        const lastKeyToLoad = loaded.lastKeyToLoad;\r\n        // Store all child keys loaded at this point\r\n        const loadedKeys = actions.map(snap => snap.key);\r\n        return { actions, lastKeyToLoad, loadedKeys };\r\n    }), \r\n    // This is the magical part, only emit when the last load key\r\n    // in the dataset has been loaded by a child event. At this point\r\n    // we can assume the dataset is \"whole\".\r\n    skipWhile(meta => meta.loadedKeys.indexOf(meta.lastKeyToLoad) === -1), \r\n    // Pluck off the meta data because the user only cares\r\n    // to iterate through the snapshots\r\n    map(meta => meta.actions));\r\n}\r\n\r\nfunction createDataOperationMethod(ref, operation) {\r\n    return function dataOperation(item, value) {\r\n        return checkOperationCases(item, {\r\n            stringCase: () => ref.child(item)[operation](value),\r\n            firebaseCase: () => item[operation](value),\r\n            snapshotCase: () => item.ref[operation](value)\r\n        });\r\n    };\r\n}\r\n\r\n// TODO(davideast): Find out why TS thinks this returns firebase.Primise\r\n// instead of Promise.\r\nfunction createRemoveMethod(ref) {\r\n    return function remove(item) {\r\n        if (!item) {\r\n            return ref.remove();\r\n        }\r\n        return checkOperationCases(item, {\r\n            stringCase: () => ref.child(item).remove(),\r\n            firebaseCase: () => item.remove(),\r\n            snapshotCase: () => item.ref.remove()\r\n        });\r\n    };\r\n}\r\n\r\nfunction createListReference(query, afDatabase) {\r\n    const outsideAngularScheduler = afDatabase.schedulers.outsideAngular;\r\n    const refInZone = afDatabase.schedulers.ngZone.run(() => query.ref);\r\n    return {\r\n        query,\r\n        update: createDataOperationMethod(refInZone, 'update'),\r\n        set: createDataOperationMethod(refInZone, 'set'),\r\n        push: (data) => refInZone.push(data),\r\n        remove: createRemoveMethod(refInZone),\r\n        snapshotChanges(events) {\r\n            return snapshotChanges(query, events, outsideAngularScheduler).pipe(keepUnstableUntilFirst);\r\n        },\r\n        stateChanges(events) {\r\n            return stateChanges(query, events, outsideAngularScheduler).pipe(keepUnstableUntilFirst);\r\n        },\r\n        auditTrail(events) {\r\n            return auditTrail(query, events, outsideAngularScheduler).pipe(keepUnstableUntilFirst);\r\n        },\r\n        valueChanges(events, options) {\r\n            const snapshotChanges$ = snapshotChanges(query, events, outsideAngularScheduler);\r\n            return snapshotChanges$.pipe(map(actions => actions.map(a => {\r\n                if (options && options.idField) {\r\n                    return Object.assign(Object.assign({}, a.payload.val()), {\r\n                        [options.idField]: a.key\r\n                    });\r\n                }\r\n                else {\r\n                    return a.payload.val();\r\n                }\r\n            })), keepUnstableUntilFirst);\r\n        }\r\n    };\r\n}\r\n\r\nfunction createObjectSnapshotChanges(query, scheduler) {\r\n    return function snapshotChanges() {\r\n        return fromRef(query, 'value', 'on', scheduler);\r\n    };\r\n}\r\n\r\nfunction createObjectReference(query, afDatabase) {\r\n    return {\r\n        query,\r\n        snapshotChanges() {\r\n            return createObjectSnapshotChanges(query, afDatabase.schedulers.outsideAngular)().pipe(keepUnstableUntilFirst);\r\n        },\r\n        update(data) { return query.ref.update(data); },\r\n        set(data) { return query.ref.set(data); },\r\n        remove() { return query.ref.remove(); },\r\n        valueChanges() {\r\n            const snapshotChanges$ = createObjectSnapshotChanges(query, afDatabase.schedulers.outsideAngular)();\r\n            return snapshotChanges$.pipe(keepUnstableUntilFirst, map(action => action.payload.exists() ? action.payload.val() : null));\r\n        },\r\n    };\r\n}\r\n\r\nconst URL = new InjectionToken('angularfire2.realtimeDatabaseURL');\r\nconst USE_EMULATOR = new InjectionToken('angularfire2.database.use-emulator');\r\nclass AngularFireDatabase {\r\n    constructor(options, name, databaseURL, \r\n    // tslint:disable-next-line:ban-types\r\n    platformId, zone, schedulers, _useEmulator, // tuple isn't working here\r\n    auth, useAuthEmulator, authSettings, // can't use firebase.auth.AuthSettings here\r\n    tenantId, languageCode, useDeviceLanguage, persistence, _appCheckInstances) {\r\n        this.schedulers = schedulers;\r\n        const useEmulator = _useEmulator;\r\n        const app = ɵfirebaseAppFactory(options, zone, name);\r\n        if (auth) {\r\n            ɵauthFactory(app, zone, useAuthEmulator, tenantId, languageCode, useDeviceLanguage, authSettings, persistence);\r\n        }\r\n        this.database = ɵcacheInstance(`${app.name}.database.${databaseURL}`, 'AngularFireDatabase', app.name, () => {\r\n            const database = zone.runOutsideAngular(() => app.database(databaseURL || undefined));\r\n            if (useEmulator) {\r\n                database.useEmulator(...useEmulator);\r\n            }\r\n            return database;\r\n        }, [useEmulator]);\r\n    }\r\n    list(pathOrRef, queryFn) {\r\n        const ref = this.schedulers.ngZone.runOutsideAngular(() => getRef(this.database, pathOrRef));\r\n        let query = ref;\r\n        if (queryFn) {\r\n            query = queryFn(ref);\r\n        }\r\n        return createListReference(query, this);\r\n    }\r\n    object(pathOrRef) {\r\n        const ref = this.schedulers.ngZone.runOutsideAngular(() => getRef(this.database, pathOrRef));\r\n        return createObjectReference(ref, this);\r\n    }\r\n    createPushId() {\r\n        const ref = this.schedulers.ngZone.runOutsideAngular(() => this.database.ref());\r\n        return ref.push().key;\r\n    }\r\n}\r\nAngularFireDatabase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AngularFireDatabase, deps: [{ token: FIREBASE_OPTIONS }, { token: FIREBASE_APP_NAME, optional: true }, { token: URL, optional: true }, { token: PLATFORM_ID }, { token: i0.NgZone }, { token: i1.ɵAngularFireSchedulers }, { token: USE_EMULATOR, optional: true }, { token: i2.AngularFireAuth, optional: true }, { token: USE_EMULATOR$1, optional: true }, { token: SETTINGS, optional: true }, { token: TENANT_ID, optional: true }, { token: LANGUAGE_CODE, optional: true }, { token: USE_DEVICE_LANGUAGE, optional: true }, { token: PERSISTENCE, optional: true }, { token: i3.AppCheckInstances, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nAngularFireDatabase.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AngularFireDatabase, providedIn: 'any' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AngularFireDatabase, decorators: [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'any'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [FIREBASE_OPTIONS]\r\n                }] }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [FIREBASE_APP_NAME]\r\n                }] }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [URL]\r\n                }] }, { type: Object, decorators: [{\r\n                    type: Inject,\r\n                    args: [PLATFORM_ID]\r\n                }] }, { type: i0.NgZone }, { type: i1.ɵAngularFireSchedulers }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [USE_EMULATOR]\r\n                }] }, { type: i2.AngularFireAuth, decorators: [{\r\n                    type: Optional\r\n                }] }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [USE_EMULATOR$1]\r\n                }] }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [SETTINGS]\r\n                }] }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [TENANT_ID]\r\n                }] }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [LANGUAGE_CODE]\r\n                }] }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [USE_DEVICE_LANGUAGE]\r\n                }] }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [PERSISTENCE]\r\n                }] }, { type: i3.AppCheckInstances, decorators: [{\r\n                    type: Optional\r\n                }] }]; } });\r\n\r\nclass AngularFireDatabaseModule {\r\n    constructor() {\r\n        firebase.registerVersion('angularfire', VERSION.full, 'rtdb-compat');\r\n    }\r\n}\r\nAngularFireDatabaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AngularFireDatabaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nAngularFireDatabaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AngularFireDatabaseModule });\r\nAngularFireDatabaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AngularFireDatabaseModule, providers: [AngularFireDatabase] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: AngularFireDatabaseModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    providers: [AngularFireDatabase]\r\n                }]\r\n        }], ctorParameters: function () { return []; } });\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { AngularFireDatabase, AngularFireDatabaseModule, URL, USE_EMULATOR, auditTrail, createListReference, fromRef, listChanges, snapshotChanges, stateChanges };\r\n\n"]},"metadata":{},"sourceType":"module"}