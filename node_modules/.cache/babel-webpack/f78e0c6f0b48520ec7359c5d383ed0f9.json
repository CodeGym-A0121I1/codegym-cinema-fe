{"ast":null,"code":"import _asyncToGenerator from \"D:/Sprint02-ProjectCG/Front-End/codegym-cinema-fe/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { Component, ComponentContainer } from '@firebase/component';\nimport { Logger, setUserLogHandler, setLogLevel as setLogLevel$1 } from '@firebase/logger';\nimport { ErrorFactory, deepEqual, base64Encode, isIndexedDBAvailable, validateIndexedDBOpenable } from '@firebase/util';\nexport { FirebaseError } from '@firebase/util';\nimport { openDb } from 'idb';\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nclass PlatformLoggerServiceImpl {\n  constructor(container) {\n    this.container = container;\n  } // In initial implementation, this will be called by installations on\n  // auth token refresh, and installations will send this string.\n\n\n  getPlatformInfoString() {\n    const providers = this.container.getProviders(); // Loop through providers and get library/version pairs from any that are\n    // version components.\n\n    return providers.map(provider => {\n      if (isVersionServiceProvider(provider)) {\n        const service = provider.getImmediate();\n        return `${service.library}/${service.version}`;\n      } else {\n        return null;\n      }\n    }).filter(logString => logString).join(' ');\n  }\n\n}\n/**\r\n *\r\n * @param provider check if this provider provides a VersionService\r\n *\r\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\r\n * provides VersionService. The provider is not necessarily a 'app-version'\r\n * provider.\r\n */\n\n\nfunction isVersionServiceProvider(provider) {\n  const component = provider.getComponent();\n  return (component === null || component === void 0 ? void 0 : component.type) === \"VERSION\"\n  /* VERSION */\n  ;\n}\n\nconst name$o = \"@firebase/app\";\nconst version$1 = \"0.7.18\";\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst logger = new Logger('@firebase/app');\nconst name$n = \"@firebase/app-compat\";\nconst name$m = \"@firebase/analytics-compat\";\nconst name$l = \"@firebase/analytics\";\nconst name$k = \"@firebase/app-check-compat\";\nconst name$j = \"@firebase/app-check\";\nconst name$i = \"@firebase/auth\";\nconst name$h = \"@firebase/auth-compat\";\nconst name$g = \"@firebase/database\";\nconst name$f = \"@firebase/database-compat\";\nconst name$e = \"@firebase/functions\";\nconst name$d = \"@firebase/functions-compat\";\nconst name$c = \"@firebase/installations\";\nconst name$b = \"@firebase/installations-compat\";\nconst name$a = \"@firebase/messaging\";\nconst name$9 = \"@firebase/messaging-compat\";\nconst name$8 = \"@firebase/performance\";\nconst name$7 = \"@firebase/performance-compat\";\nconst name$6 = \"@firebase/remote-config\";\nconst name$5 = \"@firebase/remote-config-compat\";\nconst name$4 = \"@firebase/storage\";\nconst name$3 = \"@firebase/storage-compat\";\nconst name$2 = \"@firebase/firestore\";\nconst name$1 = \"@firebase/firestore-compat\";\nconst name = \"firebase\";\nconst version = \"9.6.8\";\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * The default app name\r\n *\r\n * @internal\r\n */\n\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\nconst PLATFORM_LOG_STRING = {\n  [name$o]: 'fire-core',\n  [name$n]: 'fire-core-compat',\n  [name$l]: 'fire-analytics',\n  [name$m]: 'fire-analytics-compat',\n  [name$j]: 'fire-app-check',\n  [name$k]: 'fire-app-check-compat',\n  [name$i]: 'fire-auth',\n  [name$h]: 'fire-auth-compat',\n  [name$g]: 'fire-rtdb',\n  [name$f]: 'fire-rtdb-compat',\n  [name$e]: 'fire-fn',\n  [name$d]: 'fire-fn-compat',\n  [name$c]: 'fire-iid',\n  [name$b]: 'fire-iid-compat',\n  [name$a]: 'fire-fcm',\n  [name$9]: 'fire-fcm-compat',\n  [name$8]: 'fire-perf',\n  [name$7]: 'fire-perf-compat',\n  [name$6]: 'fire-rc',\n  [name$5]: 'fire-rc-compat',\n  [name$4]: 'fire-gcs',\n  [name$3]: 'fire-gcs-compat',\n  [name$2]: 'fire-fst',\n  [name$1]: 'fire-fst-compat',\n  'fire-js': 'fire-js',\n  [name]: 'fire-js-all'\n};\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @internal\r\n */\n\nconst _apps = new Map();\n/**\r\n * Registered components.\r\n *\r\n * @internal\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nconst _components = new Map();\n/**\r\n * @param component - the component being added to this app's container\r\n *\r\n * @internal\r\n */\n\n\nfunction _addComponent(app, component) {\n  try {\n    app.container.addComponent(component);\n  } catch (e) {\n    logger.debug(`Component ${component.name} failed to register with FirebaseApp ${app.name}`, e);\n  }\n}\n/**\r\n *\r\n * @internal\r\n */\n\n\nfunction _addOrOverwriteComponent(app, component) {\n  app.container.addOrOverwriteComponent(component);\n}\n/**\r\n *\r\n * @param component - the component to register\r\n * @returns whether or not the component is registered successfully\r\n *\r\n * @internal\r\n */\n\n\nfunction _registerComponent(component) {\n  const componentName = component.name;\n\n  if (_components.has(componentName)) {\n    logger.debug(`There were multiple attempts to register component ${componentName}.`);\n    return false;\n  }\n\n  _components.set(componentName, component); // add the component to existing app instances\n\n\n  for (const app of _apps.values()) {\n    _addComponent(app, component);\n  }\n\n  return true;\n}\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n *\r\n * @returns the provider for the service with the matching name\r\n *\r\n * @internal\r\n */\n\n\nfunction _getProvider(app, name) {\n  const heartbeatController = app.container.getProvider('heartbeat').getImmediate({\n    optional: true\n  });\n\n  if (heartbeatController) {\n    void heartbeatController.triggerHeartbeat();\n  }\n\n  return app.container.getProvider(name);\n}\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n * @param instanceIdentifier - service instance identifier in case the service supports multiple instances\r\n *\r\n * @internal\r\n */\n\n\nfunction _removeServiceInstance(app, name, instanceIdentifier = DEFAULT_ENTRY_NAME) {\n  _getProvider(app, name).clearInstance(instanceIdentifier);\n}\n/**\r\n * Test only\r\n *\r\n * @internal\r\n */\n\n\nfunction _clearComponents() {\n  _components.clear();\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst ERRORS = {\n  [\"no-app\"\n  /* NO_APP */\n  ]: \"No Firebase App '{$appName}' has been created - \" + 'call Firebase App.initializeApp()',\n  [\"bad-app-name\"\n  /* BAD_APP_NAME */\n  ]: \"Illegal App name: '{$appName}\",\n  [\"duplicate-app\"\n  /* DUPLICATE_APP */\n  ]: \"Firebase App named '{$appName}' already exists with different options or config\",\n  [\"app-deleted\"\n  /* APP_DELETED */\n  ]: \"Firebase App named '{$appName}' already deleted\",\n  [\"invalid-app-argument\"\n  /* INVALID_APP_ARGUMENT */\n  ]: 'firebase.{$appName}() takes either no argument or a ' + 'Firebase App instance.',\n  [\"invalid-log-argument\"\n  /* INVALID_LOG_ARGUMENT */\n  ]: 'First argument to `onLog` must be null or a function.',\n  [\"storage-open\"\n  /* STORAGE_OPEN */\n  ]: 'Error thrown when opening storage. Original error: {$originalErrorMessage}.',\n  [\"storage-get\"\n  /* STORAGE_GET */\n  ]: 'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',\n  [\"storage-set\"\n  /* STORAGE_WRITE */\n  ]: 'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',\n  [\"storage-delete\"\n  /* STORAGE_DELETE */\n  ]: 'Error thrown when deleting from storage. Original error: {$originalErrorMessage}.'\n};\nconst ERROR_FACTORY = new ErrorFactory('app', 'Firebase', ERRORS);\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nclass FirebaseAppImpl {\n  constructor(options, config, container) {\n    this._isDeleted = false;\n    this._options = Object.assign({}, options);\n    this._config = Object.assign({}, config);\n    this._name = config.name;\n    this._automaticDataCollectionEnabled = config.automaticDataCollectionEnabled;\n    this._container = container;\n    this.container.addComponent(new Component('app', () => this, \"PUBLIC\"\n    /* PUBLIC */\n    ));\n  }\n\n  get automaticDataCollectionEnabled() {\n    this.checkDestroyed();\n    return this._automaticDataCollectionEnabled;\n  }\n\n  set automaticDataCollectionEnabled(val) {\n    this.checkDestroyed();\n    this._automaticDataCollectionEnabled = val;\n  }\n\n  get name() {\n    this.checkDestroyed();\n    return this._name;\n  }\n\n  get options() {\n    this.checkDestroyed();\n    return this._options;\n  }\n\n  get config() {\n    this.checkDestroyed();\n    return this._config;\n  }\n\n  get container() {\n    return this._container;\n  }\n\n  get isDeleted() {\n    return this._isDeleted;\n  }\n\n  set isDeleted(val) {\n    this._isDeleted = val;\n  }\n  /**\r\n   * This function will throw an Error if the App has already been deleted -\r\n   * use before performing API actions on the App.\r\n   */\n\n\n  checkDestroyed() {\n    if (this.isDeleted) {\n      throw ERROR_FACTORY.create(\"app-deleted\"\n      /* APP_DELETED */\n      , {\n        appName: this._name\n      });\n    }\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * The current SDK version.\r\n *\r\n * @public\r\n */\n\n\nconst SDK_VERSION = version;\n\nfunction initializeApp(options, rawConfig = {}) {\n  if (typeof rawConfig !== 'object') {\n    const name = rawConfig;\n    rawConfig = {\n      name\n    };\n  }\n\n  const config = Object.assign({\n    name: DEFAULT_ENTRY_NAME,\n    automaticDataCollectionEnabled: false\n  }, rawConfig);\n  const name = config.name;\n\n  if (typeof name !== 'string' || !name) {\n    throw ERROR_FACTORY.create(\"bad-app-name\"\n    /* BAD_APP_NAME */\n    , {\n      appName: String(name)\n    });\n  }\n\n  const existingApp = _apps.get(name);\n\n  if (existingApp) {\n    // return the existing app if options and config deep equal the ones in the existing app.\n    if (deepEqual(options, existingApp.options) && deepEqual(config, existingApp.config)) {\n      return existingApp;\n    } else {\n      throw ERROR_FACTORY.create(\"duplicate-app\"\n      /* DUPLICATE_APP */\n      , {\n        appName: name\n      });\n    }\n  }\n\n  const container = new ComponentContainer(name);\n\n  for (const component of _components.values()) {\n    container.addComponent(component);\n  }\n\n  const newApp = new FirebaseAppImpl(options, config, container);\n\n  _apps.set(name, newApp);\n\n  return newApp;\n}\n/**\r\n * Retrieves a {@link @firebase/app#FirebaseApp} instance.\r\n *\r\n * When called with no arguments, the default app is returned. When an app name\r\n * is provided, the app corresponding to that name is returned.\r\n *\r\n * An exception is thrown if the app being retrieved has not yet been\r\n * initialized.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return the default app\r\n * const app = getApp();\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return a named app\r\n * const otherApp = getApp(\"otherApp\");\r\n * ```\r\n *\r\n * @param name - Optional name of the app to return. If no name is\r\n *   provided, the default is `\"[DEFAULT]\"`.\r\n *\r\n * @returns The app corresponding to the provided app name.\r\n *   If no app name is provided, the default app is returned.\r\n *\r\n * @public\r\n */\n\n\nfunction getApp(name = DEFAULT_ENTRY_NAME) {\n  const app = _apps.get(name);\n\n  if (!app) {\n    throw ERROR_FACTORY.create(\"no-app\"\n    /* NO_APP */\n    , {\n      appName: name\n    });\n  }\n\n  return app;\n}\n/**\r\n * A (read-only) array of all initialized apps.\r\n * @public\r\n */\n\n\nfunction getApps() {\n  return Array.from(_apps.values());\n}\n/**\r\n * Renders this app unusable and frees the resources of all associated\r\n * services.\r\n *\r\n * @example\r\n * ```javascript\r\n * deleteApp(app)\r\n *   .then(function() {\r\n *     console.log(\"App deleted successfully\");\r\n *   })\r\n *   .catch(function(error) {\r\n *     console.log(\"Error deleting app:\", error);\r\n *   });\r\n * ```\r\n *\r\n * @public\r\n */\n\n\nfunction deleteApp(_x) {\n  return _deleteApp.apply(this, arguments);\n}\n/**\r\n * Registers a library's name and version for platform logging purposes.\r\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\r\n * @param version - Current version of that library.\r\n * @param variant - Bundle variant, e.g., node, rn, etc.\r\n *\r\n * @public\r\n */\n\n\nfunction _deleteApp() {\n  _deleteApp = _asyncToGenerator(function* (app) {\n    const name = app.name;\n\n    if (_apps.has(name)) {\n      _apps.delete(name);\n\n      yield Promise.all(app.container.getProviders().map(provider => provider.delete()));\n      app.isDeleted = true;\n    }\n  });\n  return _deleteApp.apply(this, arguments);\n}\n\nfunction registerVersion(libraryKeyOrName, version, variant) {\n  var _a; // TODO: We can use this check to whitelist strings when/if we set up\n  // a good whitelist system.\n\n\n  let library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;\n\n  if (variant) {\n    library += `-${variant}`;\n  }\n\n  const libraryMismatch = library.match(/\\s|\\//);\n  const versionMismatch = version.match(/\\s|\\//);\n\n  if (libraryMismatch || versionMismatch) {\n    const warning = [`Unable to register library \"${library}\" with version \"${version}\":`];\n\n    if (libraryMismatch) {\n      warning.push(`library name \"${library}\" contains illegal characters (whitespace or \"/\")`);\n    }\n\n    if (libraryMismatch && versionMismatch) {\n      warning.push('and');\n    }\n\n    if (versionMismatch) {\n      warning.push(`version name \"${version}\" contains illegal characters (whitespace or \"/\")`);\n    }\n\n    logger.warn(warning.join(' '));\n    return;\n  }\n\n  _registerComponent(new Component(`${library}-version`, () => ({\n    library,\n    version\n  }), \"VERSION\"\n  /* VERSION */\n  ));\n}\n/**\r\n * Sets log handler for all Firebase SDKs.\r\n * @param logCallback - An optional custom log handler that executes user code whenever\r\n * the Firebase SDK makes a logging call.\r\n *\r\n * @public\r\n */\n\n\nfunction onLog(logCallback, options) {\n  if (logCallback !== null && typeof logCallback !== 'function') {\n    throw ERROR_FACTORY.create(\"invalid-log-argument\"\n    /* INVALID_LOG_ARGUMENT */\n    );\n  }\n\n  setUserLogHandler(logCallback, options);\n}\n/**\r\n * Sets log level for all Firebase SDKs.\r\n *\r\n * All of the log types above the current log level are captured (i.e. if\r\n * you set the log level to `info`, errors are logged, but `debug` and\r\n * `verbose` logs are not).\r\n *\r\n * @public\r\n */\n\n\nfunction setLogLevel(logLevel) {\n  setLogLevel$1(logLevel);\n}\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst DB_NAME = 'firebase-heartbeat-database';\nconst DB_VERSION = 1;\nconst STORE_NAME = 'firebase-heartbeat-store';\nlet dbPromise = null;\n\nfunction getDbPromise() {\n  if (!dbPromise) {\n    dbPromise = openDb(DB_NAME, DB_VERSION, upgradeDB => {\n      // We don't use 'break' in this switch statement, the fall-through\n      // behavior is what we want, because if there are multiple versions between\n      // the old version and the current version, we want ALL the migrations\n      // that correspond to those versions to run, not only the last one.\n      // eslint-disable-next-line default-case\n      switch (upgradeDB.oldVersion) {\n        case 0:\n          upgradeDB.createObjectStore(STORE_NAME);\n      }\n    }).catch(e => {\n      throw ERROR_FACTORY.create(\"storage-open\"\n      /* STORAGE_OPEN */\n      , {\n        originalErrorMessage: e.message\n      });\n    });\n  }\n\n  return dbPromise;\n}\n\nfunction readHeartbeatsFromIndexedDB(_x2) {\n  return _readHeartbeatsFromIndexedDB.apply(this, arguments);\n}\n\nfunction _readHeartbeatsFromIndexedDB() {\n  _readHeartbeatsFromIndexedDB = _asyncToGenerator(function* (app) {\n    try {\n      const db = yield getDbPromise();\n      return db.transaction(STORE_NAME).objectStore(STORE_NAME).get(computeKey(app));\n    } catch (e) {\n      throw ERROR_FACTORY.create(\"storage-get\"\n      /* STORAGE_GET */\n      , {\n        originalErrorMessage: e.message\n      });\n    }\n  });\n  return _readHeartbeatsFromIndexedDB.apply(this, arguments);\n}\n\nfunction writeHeartbeatsToIndexedDB(_x3, _x4) {\n  return _writeHeartbeatsToIndexedDB.apply(this, arguments);\n}\n\nfunction _writeHeartbeatsToIndexedDB() {\n  _writeHeartbeatsToIndexedDB = _asyncToGenerator(function* (app, heartbeatObject) {\n    try {\n      const db = yield getDbPromise();\n      const tx = db.transaction(STORE_NAME, 'readwrite');\n      const objectStore = tx.objectStore(STORE_NAME);\n      yield objectStore.put(heartbeatObject, computeKey(app));\n      return tx.complete;\n    } catch (e) {\n      throw ERROR_FACTORY.create(\"storage-set\"\n      /* STORAGE_WRITE */\n      , {\n        originalErrorMessage: e.message\n      });\n    }\n  });\n  return _writeHeartbeatsToIndexedDB.apply(this, arguments);\n}\n\nfunction deleteHeartbeatsFromIndexedDB(_x5) {\n  return _deleteHeartbeatsFromIndexedDB.apply(this, arguments);\n}\n\nfunction _deleteHeartbeatsFromIndexedDB() {\n  _deleteHeartbeatsFromIndexedDB = _asyncToGenerator(function* (app) {\n    try {\n      const db = yield getDbPromise();\n      const tx = db.transaction(STORE_NAME, 'readwrite');\n      yield tx.objectStore(STORE_NAME).delete(computeKey(app));\n      return tx.complete;\n    } catch (e) {\n      throw ERROR_FACTORY.create(\"storage-delete\"\n      /* STORAGE_DELETE */\n      , {\n        originalErrorMessage: e.message\n      });\n    }\n  });\n  return _deleteHeartbeatsFromIndexedDB.apply(this, arguments);\n}\n\nfunction computeKey(app) {\n  return `${app.name}!${app.options.appId}`;\n}\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst MAX_HEADER_BYTES = 1024; // 30 days\n\nconst STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 30 * 24 * 60 * 60 * 1000;\n\nclass HeartbeatServiceImpl {\n  constructor(container) {\n    this.container = container;\n    /**\r\n     * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate\r\n     * the header string.\r\n     * Stores one record per date. This will be consolidated into the standard\r\n     * format of one record per user agent string before being sent as a header.\r\n     * Populated from indexedDB when the controller is instantiated and should\r\n     * be kept in sync with indexedDB.\r\n     * Leave public for easier testing.\r\n     */\n\n    this._heartbeatsCache = null;\n    const app = this.container.getProvider('app').getImmediate();\n    this._storage = new HeartbeatStorageImpl(app);\n    this._heartbeatsCachePromise = this._storage.read().then(result => {\n      this._heartbeatsCache = result;\n      return result;\n    });\n  }\n  /**\r\n   * Called to report a heartbeat. The function will generate\r\n   * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it\r\n   * to IndexedDB.\r\n   * Note that we only store one heartbeat per day. So if a heartbeat for today is\r\n   * already logged, subsequent calls to this function in the same day will be ignored.\r\n   */\n\n\n  triggerHeartbeat() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const platformLogger = _this.container.getProvider('platform-logger').getImmediate(); // This is the \"Firebase user agent\" string from the platform logger\n      // service, not the browser user agent.\n\n\n      const userAgent = platformLogger.getPlatformInfoString();\n      const date = getUTCDateString();\n\n      if (_this._heartbeatsCache === null) {\n        _this._heartbeatsCache = yield _this._heartbeatsCachePromise;\n      }\n\n      if (_this._heartbeatsCache.some(singleDateHeartbeat => singleDateHeartbeat.date === date)) {\n        // Do not store a heartbeat if one is already stored for this day.\n        return;\n      } else {\n        // There is no entry for this date. Create one.\n        _this._heartbeatsCache.push({\n          date,\n          userAgent\n        });\n      } // Remove entries older than 30 days.\n\n\n      _this._heartbeatsCache = _this._heartbeatsCache.filter(singleDateHeartbeat => {\n        const hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();\n        const now = Date.now();\n        return now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS;\n      });\n      return _this._storage.overwrite(_this._heartbeatsCache);\n    })();\n  }\n  /**\r\n   * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.\r\n   * It also clears all heartbeats from memory as well as in IndexedDB.\r\n   *\r\n   * NOTE: It will read heartbeats from the heartbeatsCache, instead of from indexedDB to reduce latency\r\n   */\n\n\n  getHeartbeatsHeader() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this2._heartbeatsCache === null) {\n        yield _this2._heartbeatsCachePromise;\n      } // If it's still null, it's been cleared and has not been repopulated.\n\n\n      if (_this2._heartbeatsCache === null) {\n        return '';\n      } // Extract as many heartbeats from the cache as will fit under the size limit.\n\n\n      const {\n        heartbeatsToSend,\n        unsentEntries\n      } = extractHeartbeatsForHeader(_this2._heartbeatsCache);\n      const headerString = base64Encode(JSON.stringify({\n        version: 2,\n        heartbeats: heartbeatsToSend\n      }));\n\n      if (unsentEntries.length > 0) {\n        // Store any unsent entries if they exist.\n        _this2._heartbeatsCache = unsentEntries; // This seems more likely than deleteAll (below) to lead to some odd state\n        // since the cache isn't empty and this will be called again on the next request,\n        // and is probably safest if we await it.\n\n        yield _this2._storage.overwrite(_this2._heartbeatsCache);\n      } else {\n        _this2._heartbeatsCache = null; // Do not wait for this, to reduce latency.\n\n        void _this2._storage.deleteAll();\n      }\n\n      return headerString;\n    })();\n  }\n\n}\n\nfunction getUTCDateString() {\n  const today = new Date(); // Returns date format 'YYYY-MM-DD'\n\n  return today.toISOString().substring(0, 10);\n}\n\nfunction extractHeartbeatsForHeader(heartbeatsCache, maxSize = MAX_HEADER_BYTES) {\n  // Heartbeats grouped by user agent in the standard format to be sent in\n  // the header.\n  const heartbeatsToSend = []; // Single date format heartbeats that are not sent.\n\n  let unsentEntries = heartbeatsCache.slice();\n\n  for (const singleDateHeartbeat of heartbeatsCache) {\n    // Look for an existing entry with the same user agent.\n    const heartbeatEntry = heartbeatsToSend.find(hb => hb.userAgent === singleDateHeartbeat.userAgent);\n\n    if (!heartbeatEntry) {\n      // If no entry for this user agent exists, create one.\n      heartbeatsToSend.push({\n        userAgent: singleDateHeartbeat.userAgent,\n        dates: [singleDateHeartbeat.date]\n      });\n\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        // If the header would exceed max size, remove the added heartbeat\n        // entry and stop adding to the header.\n        heartbeatsToSend.pop();\n        break;\n      }\n    } else {\n      heartbeatEntry.dates.push(singleDateHeartbeat.date); // If the header would exceed max size, remove the added date\n      // and stop adding to the header.\n\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        heartbeatEntry.dates.pop();\n        break;\n      }\n    } // Pop unsent entry from queue. (Skipped if adding the entry exceeded\n    // quota and the loop breaks early.)\n\n\n    unsentEntries = unsentEntries.slice(1);\n  }\n\n  return {\n    heartbeatsToSend,\n    unsentEntries\n  };\n}\n\nclass HeartbeatStorageImpl {\n  constructor(app) {\n    this.app = app;\n    this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();\n  }\n\n  runIndexedDBEnvironmentCheck() {\n    return _asyncToGenerator(function* () {\n      if (!isIndexedDBAvailable()) {\n        return false;\n      } else {\n        return validateIndexedDBOpenable().then(() => true).catch(() => false);\n      }\n    })();\n  }\n  /**\r\n   * Read all heartbeats.\r\n   */\n\n\n  read() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const canUseIndexedDB = yield _this3._canUseIndexedDBPromise;\n\n      if (!canUseIndexedDB) {\n        return [];\n      } else {\n        const idbHeartbeatObject = yield readHeartbeatsFromIndexedDB(_this3.app);\n        return (idbHeartbeatObject === null || idbHeartbeatObject === void 0 ? void 0 : idbHeartbeatObject.heartbeats) || [];\n      }\n    })();\n  } // overwrite the storage with the provided heartbeats\n\n\n  overwrite(heartbeats) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      const canUseIndexedDB = yield _this4._canUseIndexedDBPromise;\n\n      if (!canUseIndexedDB) {\n        return;\n      } else {\n        return writeHeartbeatsToIndexedDB(_this4.app, {\n          heartbeats\n        });\n      }\n    })();\n  } // add heartbeats\n\n\n  add(heartbeats) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      const canUseIndexedDB = yield _this5._canUseIndexedDBPromise;\n\n      if (!canUseIndexedDB) {\n        return;\n      } else {\n        const existingHeartbeats = yield _this5.read();\n        return writeHeartbeatsToIndexedDB(_this5.app, {\n          heartbeats: [...existingHeartbeats, ...heartbeats]\n        });\n      }\n    })();\n  } // delete heartbeats\n\n\n  delete(heartbeats) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      const canUseIndexedDB = yield _this6._canUseIndexedDBPromise;\n\n      if (!canUseIndexedDB) {\n        return;\n      } else {\n        const existingHeartbeats = yield _this6.read();\n        return writeHeartbeatsToIndexedDB(_this6.app, {\n          heartbeats: existingHeartbeats.filter(existingHeartbeat => !heartbeats.includes(existingHeartbeat))\n        });\n      }\n    })();\n  } // delete all heartbeats\n\n\n  deleteAll() {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      const canUseIndexedDB = yield _this7._canUseIndexedDBPromise;\n\n      if (!canUseIndexedDB) {\n        return;\n      } else {\n        return deleteHeartbeatsFromIndexedDB(_this7.app);\n      }\n    })();\n  }\n\n}\n/**\r\n * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped\r\n * in a platform logging header JSON object, stringified, and converted\r\n * to base 64.\r\n */\n\n\nfunction countBytes(heartbeatsCache) {\n  // base64 has a restricted set of characters, all of which should be 1 byte.\n  return base64Encode( // heartbeatsCache wrapper properties\n  JSON.stringify({\n    version: 2,\n    heartbeats: heartbeatsCache\n  })).length;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction registerCoreComponents(variant) {\n  _registerComponent(new Component('platform-logger', container => new PlatformLoggerServiceImpl(container), \"PRIVATE\"\n  /* PRIVATE */\n  ));\n\n  _registerComponent(new Component('heartbeat', container => new HeartbeatServiceImpl(container), \"PRIVATE\"\n  /* PRIVATE */\n  )); // Register `app` package.\n\n\n  registerVersion(name$o, version$1, variant); // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n\n  registerVersion(name$o, version$1, 'esm2017'); // Register platform SDK identifier (no version).\n\n  registerVersion('fire-js', '');\n}\n/**\r\n * Firebase App\r\n *\r\n * @remarks This package coordinates the communication between the different Firebase components\r\n * @packageDocumentation\r\n */\n\n\nregisterCoreComponents('');\nexport { SDK_VERSION, DEFAULT_ENTRY_NAME as _DEFAULT_ENTRY_NAME, _addComponent, _addOrOverwriteComponent, _apps, _clearComponents, _components, _getProvider, _registerComponent, _removeServiceInstance, deleteApp, getApp, getApps, initializeApp, onLog, registerVersion, setLogLevel };","map":{"version":3,"sources":["D:/Sprint02-ProjectCG/Front-End/codegym-cinema-fe/node_modules/@firebase/app/dist/esm/index.esm2017.js"],"names":["Component","ComponentContainer","Logger","setUserLogHandler","setLogLevel","setLogLevel$1","ErrorFactory","deepEqual","base64Encode","isIndexedDBAvailable","validateIndexedDBOpenable","FirebaseError","openDb","PlatformLoggerServiceImpl","constructor","container","getPlatformInfoString","providers","getProviders","map","provider","isVersionServiceProvider","service","getImmediate","library","version","filter","logString","join","component","getComponent","type","name$o","version$1","logger","name$n","name$m","name$l","name$k","name$j","name$i","name$h","name$g","name$f","name$e","name$d","name$c","name$b","name$a","name$9","name$8","name$7","name$6","name$5","name$4","name$3","name$2","name$1","name","DEFAULT_ENTRY_NAME","PLATFORM_LOG_STRING","_apps","Map","_components","_addComponent","app","addComponent","e","debug","_addOrOverwriteComponent","addOrOverwriteComponent","_registerComponent","componentName","has","set","values","_getProvider","heartbeatController","getProvider","optional","triggerHeartbeat","_removeServiceInstance","instanceIdentifier","clearInstance","_clearComponents","clear","ERRORS","ERROR_FACTORY","FirebaseAppImpl","options","config","_isDeleted","_options","Object","assign","_config","_name","_automaticDataCollectionEnabled","automaticDataCollectionEnabled","_container","checkDestroyed","val","isDeleted","create","appName","SDK_VERSION","initializeApp","rawConfig","String","existingApp","get","newApp","getApp","getApps","Array","from","deleteApp","delete","Promise","all","registerVersion","libraryKeyOrName","variant","_a","libraryMismatch","match","versionMismatch","warning","push","warn","onLog","logCallback","logLevel","DB_NAME","DB_VERSION","STORE_NAME","dbPromise","getDbPromise","upgradeDB","oldVersion","createObjectStore","catch","originalErrorMessage","message","readHeartbeatsFromIndexedDB","db","transaction","objectStore","computeKey","writeHeartbeatsToIndexedDB","heartbeatObject","tx","put","complete","deleteHeartbeatsFromIndexedDB","appId","MAX_HEADER_BYTES","STORED_HEARTBEAT_RETENTION_MAX_MILLIS","HeartbeatServiceImpl","_heartbeatsCache","_storage","HeartbeatStorageImpl","_heartbeatsCachePromise","read","then","result","platformLogger","userAgent","date","getUTCDateString","some","singleDateHeartbeat","hbTimestamp","Date","valueOf","now","overwrite","getHeartbeatsHeader","heartbeatsToSend","unsentEntries","extractHeartbeatsForHeader","headerString","JSON","stringify","heartbeats","length","deleteAll","today","toISOString","substring","heartbeatsCache","maxSize","slice","heartbeatEntry","find","hb","dates","countBytes","pop","_canUseIndexedDBPromise","runIndexedDBEnvironmentCheck","canUseIndexedDB","idbHeartbeatObject","add","existingHeartbeats","existingHeartbeat","includes","registerCoreComponents","_DEFAULT_ENTRY_NAME"],"mappings":"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","sourcesContent":["import { Component, ComponentContainer } from '@firebase/component';\r\nimport { Logger, setUserLogHandler, setLogLevel as setLogLevel$1 } from '@firebase/logger';\r\nimport { ErrorFactory, deepEqual, base64Encode, isIndexedDBAvailable, validateIndexedDBOpenable } from '@firebase/util';\r\nexport { FirebaseError } from '@firebase/util';\r\nimport { openDb } from 'idb';\r\n\r\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass PlatformLoggerServiceImpl {\r\n    constructor(container) {\r\n        this.container = container;\r\n    }\r\n    // In initial implementation, this will be called by installations on\r\n    // auth token refresh, and installations will send this string.\r\n    getPlatformInfoString() {\r\n        const providers = this.container.getProviders();\r\n        // Loop through providers and get library/version pairs from any that are\r\n        // version components.\r\n        return providers\r\n            .map(provider => {\r\n            if (isVersionServiceProvider(provider)) {\r\n                const service = provider.getImmediate();\r\n                return `${service.library}/${service.version}`;\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        })\r\n            .filter(logString => logString)\r\n            .join(' ');\r\n    }\r\n}\r\n/**\r\n *\r\n * @param provider check if this provider provides a VersionService\r\n *\r\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\r\n * provides VersionService. The provider is not necessarily a 'app-version'\r\n * provider.\r\n */\r\nfunction isVersionServiceProvider(provider) {\r\n    const component = provider.getComponent();\r\n    return (component === null || component === void 0 ? void 0 : component.type) === \"VERSION\" /* VERSION */;\r\n}\r\n\r\nconst name$o = \"@firebase/app\";\r\nconst version$1 = \"0.7.18\";\r\n\r\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logger = new Logger('@firebase/app');\r\n\r\nconst name$n = \"@firebase/app-compat\";\r\n\r\nconst name$m = \"@firebase/analytics-compat\";\r\n\r\nconst name$l = \"@firebase/analytics\";\r\n\r\nconst name$k = \"@firebase/app-check-compat\";\r\n\r\nconst name$j = \"@firebase/app-check\";\r\n\r\nconst name$i = \"@firebase/auth\";\r\n\r\nconst name$h = \"@firebase/auth-compat\";\r\n\r\nconst name$g = \"@firebase/database\";\r\n\r\nconst name$f = \"@firebase/database-compat\";\r\n\r\nconst name$e = \"@firebase/functions\";\r\n\r\nconst name$d = \"@firebase/functions-compat\";\r\n\r\nconst name$c = \"@firebase/installations\";\r\n\r\nconst name$b = \"@firebase/installations-compat\";\r\n\r\nconst name$a = \"@firebase/messaging\";\r\n\r\nconst name$9 = \"@firebase/messaging-compat\";\r\n\r\nconst name$8 = \"@firebase/performance\";\r\n\r\nconst name$7 = \"@firebase/performance-compat\";\r\n\r\nconst name$6 = \"@firebase/remote-config\";\r\n\r\nconst name$5 = \"@firebase/remote-config-compat\";\r\n\r\nconst name$4 = \"@firebase/storage\";\r\n\r\nconst name$3 = \"@firebase/storage-compat\";\r\n\r\nconst name$2 = \"@firebase/firestore\";\r\n\r\nconst name$1 = \"@firebase/firestore-compat\";\r\n\r\nconst name = \"firebase\";\r\nconst version = \"9.6.8\";\r\n\r\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The default app name\r\n *\r\n * @internal\r\n */\r\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\r\nconst PLATFORM_LOG_STRING = {\r\n    [name$o]: 'fire-core',\r\n    [name$n]: 'fire-core-compat',\r\n    [name$l]: 'fire-analytics',\r\n    [name$m]: 'fire-analytics-compat',\r\n    [name$j]: 'fire-app-check',\r\n    [name$k]: 'fire-app-check-compat',\r\n    [name$i]: 'fire-auth',\r\n    [name$h]: 'fire-auth-compat',\r\n    [name$g]: 'fire-rtdb',\r\n    [name$f]: 'fire-rtdb-compat',\r\n    [name$e]: 'fire-fn',\r\n    [name$d]: 'fire-fn-compat',\r\n    [name$c]: 'fire-iid',\r\n    [name$b]: 'fire-iid-compat',\r\n    [name$a]: 'fire-fcm',\r\n    [name$9]: 'fire-fcm-compat',\r\n    [name$8]: 'fire-perf',\r\n    [name$7]: 'fire-perf-compat',\r\n    [name$6]: 'fire-rc',\r\n    [name$5]: 'fire-rc-compat',\r\n    [name$4]: 'fire-gcs',\r\n    [name$3]: 'fire-gcs-compat',\r\n    [name$2]: 'fire-fst',\r\n    [name$1]: 'fire-fst-compat',\r\n    'fire-js': 'fire-js',\r\n    [name]: 'fire-js-all'\r\n};\r\n\r\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @internal\r\n */\r\nconst _apps = new Map();\r\n/**\r\n * Registered components.\r\n *\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nconst _components = new Map();\r\n/**\r\n * @param component - the component being added to this app's container\r\n *\r\n * @internal\r\n */\r\nfunction _addComponent(app, component) {\r\n    try {\r\n        app.container.addComponent(component);\r\n    }\r\n    catch (e) {\r\n        logger.debug(`Component ${component.name} failed to register with FirebaseApp ${app.name}`, e);\r\n    }\r\n}\r\n/**\r\n *\r\n * @internal\r\n */\r\nfunction _addOrOverwriteComponent(app, component) {\r\n    app.container.addOrOverwriteComponent(component);\r\n}\r\n/**\r\n *\r\n * @param component - the component to register\r\n * @returns whether or not the component is registered successfully\r\n *\r\n * @internal\r\n */\r\nfunction _registerComponent(component) {\r\n    const componentName = component.name;\r\n    if (_components.has(componentName)) {\r\n        logger.debug(`There were multiple attempts to register component ${componentName}.`);\r\n        return false;\r\n    }\r\n    _components.set(componentName, component);\r\n    // add the component to existing app instances\r\n    for (const app of _apps.values()) {\r\n        _addComponent(app, component);\r\n    }\r\n    return true;\r\n}\r\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n *\r\n * @returns the provider for the service with the matching name\r\n *\r\n * @internal\r\n */\r\nfunction _getProvider(app, name) {\r\n    const heartbeatController = app.container\r\n        .getProvider('heartbeat')\r\n        .getImmediate({ optional: true });\r\n    if (heartbeatController) {\r\n        void heartbeatController.triggerHeartbeat();\r\n    }\r\n    return app.container.getProvider(name);\r\n}\r\n/**\r\n *\r\n * @param app - FirebaseApp instance\r\n * @param name - service name\r\n * @param instanceIdentifier - service instance identifier in case the service supports multiple instances\r\n *\r\n * @internal\r\n */\r\nfunction _removeServiceInstance(app, name, instanceIdentifier = DEFAULT_ENTRY_NAME) {\r\n    _getProvider(app, name).clearInstance(instanceIdentifier);\r\n}\r\n/**\r\n * Test only\r\n *\r\n * @internal\r\n */\r\nfunction _clearComponents() {\r\n    _components.clear();\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst ERRORS = {\r\n    [\"no-app\" /* NO_APP */]: \"No Firebase App '{$appName}' has been created - \" +\r\n        'call Firebase App.initializeApp()',\r\n    [\"bad-app-name\" /* BAD_APP_NAME */]: \"Illegal App name: '{$appName}\",\r\n    [\"duplicate-app\" /* DUPLICATE_APP */]: \"Firebase App named '{$appName}' already exists with different options or config\",\r\n    [\"app-deleted\" /* APP_DELETED */]: \"Firebase App named '{$appName}' already deleted\",\r\n    [\"invalid-app-argument\" /* INVALID_APP_ARGUMENT */]: 'firebase.{$appName}() takes either no argument or a ' +\r\n        'Firebase App instance.',\r\n    [\"invalid-log-argument\" /* INVALID_LOG_ARGUMENT */]: 'First argument to `onLog` must be null or a function.',\r\n    [\"storage-open\" /* STORAGE_OPEN */]: 'Error thrown when opening storage. Original error: {$originalErrorMessage}.',\r\n    [\"storage-get\" /* STORAGE_GET */]: 'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',\r\n    [\"storage-set\" /* STORAGE_WRITE */]: 'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',\r\n    [\"storage-delete\" /* STORAGE_DELETE */]: 'Error thrown when deleting from storage. Original error: {$originalErrorMessage}.'\r\n};\r\nconst ERROR_FACTORY = new ErrorFactory('app', 'Firebase', ERRORS);\r\n\r\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass FirebaseAppImpl {\r\n    constructor(options, config, container) {\r\n        this._isDeleted = false;\r\n        this._options = Object.assign({}, options);\r\n        this._config = Object.assign({}, config);\r\n        this._name = config.name;\r\n        this._automaticDataCollectionEnabled =\r\n            config.automaticDataCollectionEnabled;\r\n        this._container = container;\r\n        this.container.addComponent(new Component('app', () => this, \"PUBLIC\" /* PUBLIC */));\r\n    }\r\n    get automaticDataCollectionEnabled() {\r\n        this.checkDestroyed();\r\n        return this._automaticDataCollectionEnabled;\r\n    }\r\n    set automaticDataCollectionEnabled(val) {\r\n        this.checkDestroyed();\r\n        this._automaticDataCollectionEnabled = val;\r\n    }\r\n    get name() {\r\n        this.checkDestroyed();\r\n        return this._name;\r\n    }\r\n    get options() {\r\n        this.checkDestroyed();\r\n        return this._options;\r\n    }\r\n    get config() {\r\n        this.checkDestroyed();\r\n        return this._config;\r\n    }\r\n    get container() {\r\n        return this._container;\r\n    }\r\n    get isDeleted() {\r\n        return this._isDeleted;\r\n    }\r\n    set isDeleted(val) {\r\n        this._isDeleted = val;\r\n    }\r\n    /**\r\n     * This function will throw an Error if the App has already been deleted -\r\n     * use before performing API actions on the App.\r\n     */\r\n    checkDestroyed() {\r\n        if (this.isDeleted) {\r\n            throw ERROR_FACTORY.create(\"app-deleted\" /* APP_DELETED */, { appName: this._name });\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The current SDK version.\r\n *\r\n * @public\r\n */\r\nconst SDK_VERSION = version;\r\nfunction initializeApp(options, rawConfig = {}) {\r\n    if (typeof rawConfig !== 'object') {\r\n        const name = rawConfig;\r\n        rawConfig = { name };\r\n    }\r\n    const config = Object.assign({ name: DEFAULT_ENTRY_NAME, automaticDataCollectionEnabled: false }, rawConfig);\r\n    const name = config.name;\r\n    if (typeof name !== 'string' || !name) {\r\n        throw ERROR_FACTORY.create(\"bad-app-name\" /* BAD_APP_NAME */, {\r\n            appName: String(name)\r\n        });\r\n    }\r\n    const existingApp = _apps.get(name);\r\n    if (existingApp) {\r\n        // return the existing app if options and config deep equal the ones in the existing app.\r\n        if (deepEqual(options, existingApp.options) &&\r\n            deepEqual(config, existingApp.config)) {\r\n            return existingApp;\r\n        }\r\n        else {\r\n            throw ERROR_FACTORY.create(\"duplicate-app\" /* DUPLICATE_APP */, { appName: name });\r\n        }\r\n    }\r\n    const container = new ComponentContainer(name);\r\n    for (const component of _components.values()) {\r\n        container.addComponent(component);\r\n    }\r\n    const newApp = new FirebaseAppImpl(options, config, container);\r\n    _apps.set(name, newApp);\r\n    return newApp;\r\n}\r\n/**\r\n * Retrieves a {@link @firebase/app#FirebaseApp} instance.\r\n *\r\n * When called with no arguments, the default app is returned. When an app name\r\n * is provided, the app corresponding to that name is returned.\r\n *\r\n * An exception is thrown if the app being retrieved has not yet been\r\n * initialized.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return the default app\r\n * const app = getApp();\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Return a named app\r\n * const otherApp = getApp(\"otherApp\");\r\n * ```\r\n *\r\n * @param name - Optional name of the app to return. If no name is\r\n *   provided, the default is `\"[DEFAULT]\"`.\r\n *\r\n * @returns The app corresponding to the provided app name.\r\n *   If no app name is provided, the default app is returned.\r\n *\r\n * @public\r\n */\r\nfunction getApp(name = DEFAULT_ENTRY_NAME) {\r\n    const app = _apps.get(name);\r\n    if (!app) {\r\n        throw ERROR_FACTORY.create(\"no-app\" /* NO_APP */, { appName: name });\r\n    }\r\n    return app;\r\n}\r\n/**\r\n * A (read-only) array of all initialized apps.\r\n * @public\r\n */\r\nfunction getApps() {\r\n    return Array.from(_apps.values());\r\n}\r\n/**\r\n * Renders this app unusable and frees the resources of all associated\r\n * services.\r\n *\r\n * @example\r\n * ```javascript\r\n * deleteApp(app)\r\n *   .then(function() {\r\n *     console.log(\"App deleted successfully\");\r\n *   })\r\n *   .catch(function(error) {\r\n *     console.log(\"Error deleting app:\", error);\r\n *   });\r\n * ```\r\n *\r\n * @public\r\n */\r\nasync function deleteApp(app) {\r\n    const name = app.name;\r\n    if (_apps.has(name)) {\r\n        _apps.delete(name);\r\n        await Promise.all(app.container\r\n            .getProviders()\r\n            .map(provider => provider.delete()));\r\n        app.isDeleted = true;\r\n    }\r\n}\r\n/**\r\n * Registers a library's name and version for platform logging purposes.\r\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\r\n * @param version - Current version of that library.\r\n * @param variant - Bundle variant, e.g., node, rn, etc.\r\n *\r\n * @public\r\n */\r\nfunction registerVersion(libraryKeyOrName, version, variant) {\r\n    var _a;\r\n    // TODO: We can use this check to whitelist strings when/if we set up\r\n    // a good whitelist system.\r\n    let library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;\r\n    if (variant) {\r\n        library += `-${variant}`;\r\n    }\r\n    const libraryMismatch = library.match(/\\s|\\//);\r\n    const versionMismatch = version.match(/\\s|\\//);\r\n    if (libraryMismatch || versionMismatch) {\r\n        const warning = [\r\n            `Unable to register library \"${library}\" with version \"${version}\":`\r\n        ];\r\n        if (libraryMismatch) {\r\n            warning.push(`library name \"${library}\" contains illegal characters (whitespace or \"/\")`);\r\n        }\r\n        if (libraryMismatch && versionMismatch) {\r\n            warning.push('and');\r\n        }\r\n        if (versionMismatch) {\r\n            warning.push(`version name \"${version}\" contains illegal characters (whitespace or \"/\")`);\r\n        }\r\n        logger.warn(warning.join(' '));\r\n        return;\r\n    }\r\n    _registerComponent(new Component(`${library}-version`, () => ({ library, version }), \"VERSION\" /* VERSION */));\r\n}\r\n/**\r\n * Sets log handler for all Firebase SDKs.\r\n * @param logCallback - An optional custom log handler that executes user code whenever\r\n * the Firebase SDK makes a logging call.\r\n *\r\n * @public\r\n */\r\nfunction onLog(logCallback, options) {\r\n    if (logCallback !== null && typeof logCallback !== 'function') {\r\n        throw ERROR_FACTORY.create(\"invalid-log-argument\" /* INVALID_LOG_ARGUMENT */);\r\n    }\r\n    setUserLogHandler(logCallback, options);\r\n}\r\n/**\r\n * Sets log level for all Firebase SDKs.\r\n *\r\n * All of the log types above the current log level are captured (i.e. if\r\n * you set the log level to `info`, errors are logged, but `debug` and\r\n * `verbose` logs are not).\r\n *\r\n * @public\r\n */\r\nfunction setLogLevel(logLevel) {\r\n    setLogLevel$1(logLevel);\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DB_NAME = 'firebase-heartbeat-database';\r\nconst DB_VERSION = 1;\r\nconst STORE_NAME = 'firebase-heartbeat-store';\r\nlet dbPromise = null;\r\nfunction getDbPromise() {\r\n    if (!dbPromise) {\r\n        dbPromise = openDb(DB_NAME, DB_VERSION, upgradeDB => {\r\n            // We don't use 'break' in this switch statement, the fall-through\r\n            // behavior is what we want, because if there are multiple versions between\r\n            // the old version and the current version, we want ALL the migrations\r\n            // that correspond to those versions to run, not only the last one.\r\n            // eslint-disable-next-line default-case\r\n            switch (upgradeDB.oldVersion) {\r\n                case 0:\r\n                    upgradeDB.createObjectStore(STORE_NAME);\r\n            }\r\n        }).catch(e => {\r\n            throw ERROR_FACTORY.create(\"storage-open\" /* STORAGE_OPEN */, {\r\n                originalErrorMessage: e.message\r\n            });\r\n        });\r\n    }\r\n    return dbPromise;\r\n}\r\nasync function readHeartbeatsFromIndexedDB(app) {\r\n    try {\r\n        const db = await getDbPromise();\r\n        return db\r\n            .transaction(STORE_NAME)\r\n            .objectStore(STORE_NAME)\r\n            .get(computeKey(app));\r\n    }\r\n    catch (e) {\r\n        throw ERROR_FACTORY.create(\"storage-get\" /* STORAGE_GET */, {\r\n            originalErrorMessage: e.message\r\n        });\r\n    }\r\n}\r\nasync function writeHeartbeatsToIndexedDB(app, heartbeatObject) {\r\n    try {\r\n        const db = await getDbPromise();\r\n        const tx = db.transaction(STORE_NAME, 'readwrite');\r\n        const objectStore = tx.objectStore(STORE_NAME);\r\n        await objectStore.put(heartbeatObject, computeKey(app));\r\n        return tx.complete;\r\n    }\r\n    catch (e) {\r\n        throw ERROR_FACTORY.create(\"storage-set\" /* STORAGE_WRITE */, {\r\n            originalErrorMessage: e.message\r\n        });\r\n    }\r\n}\r\nasync function deleteHeartbeatsFromIndexedDB(app) {\r\n    try {\r\n        const db = await getDbPromise();\r\n        const tx = db.transaction(STORE_NAME, 'readwrite');\r\n        await tx.objectStore(STORE_NAME).delete(computeKey(app));\r\n        return tx.complete;\r\n    }\r\n    catch (e) {\r\n        throw ERROR_FACTORY.create(\"storage-delete\" /* STORAGE_DELETE */, {\r\n            originalErrorMessage: e.message\r\n        });\r\n    }\r\n}\r\nfunction computeKey(app) {\r\n    return `${app.name}!${app.options.appId}`;\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst MAX_HEADER_BYTES = 1024;\r\n// 30 days\r\nconst STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 30 * 24 * 60 * 60 * 1000;\r\nclass HeartbeatServiceImpl {\r\n    constructor(container) {\r\n        this.container = container;\r\n        /**\r\n         * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate\r\n         * the header string.\r\n         * Stores one record per date. This will be consolidated into the standard\r\n         * format of one record per user agent string before being sent as a header.\r\n         * Populated from indexedDB when the controller is instantiated and should\r\n         * be kept in sync with indexedDB.\r\n         * Leave public for easier testing.\r\n         */\r\n        this._heartbeatsCache = null;\r\n        const app = this.container.getProvider('app').getImmediate();\r\n        this._storage = new HeartbeatStorageImpl(app);\r\n        this._heartbeatsCachePromise = this._storage.read().then(result => {\r\n            this._heartbeatsCache = result;\r\n            return result;\r\n        });\r\n    }\r\n    /**\r\n     * Called to report a heartbeat. The function will generate\r\n     * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it\r\n     * to IndexedDB.\r\n     * Note that we only store one heartbeat per day. So if a heartbeat for today is\r\n     * already logged, subsequent calls to this function in the same day will be ignored.\r\n     */\r\n    async triggerHeartbeat() {\r\n        const platformLogger = this.container\r\n            .getProvider('platform-logger')\r\n            .getImmediate();\r\n        // This is the \"Firebase user agent\" string from the platform logger\r\n        // service, not the browser user agent.\r\n        const userAgent = platformLogger.getPlatformInfoString();\r\n        const date = getUTCDateString();\r\n        if (this._heartbeatsCache === null) {\r\n            this._heartbeatsCache = await this._heartbeatsCachePromise;\r\n        }\r\n        if (this._heartbeatsCache.some(singleDateHeartbeat => singleDateHeartbeat.date === date)) {\r\n            // Do not store a heartbeat if one is already stored for this day.\r\n            return;\r\n        }\r\n        else {\r\n            // There is no entry for this date. Create one.\r\n            this._heartbeatsCache.push({ date, userAgent });\r\n        }\r\n        // Remove entries older than 30 days.\r\n        this._heartbeatsCache = this._heartbeatsCache.filter(singleDateHeartbeat => {\r\n            const hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();\r\n            const now = Date.now();\r\n            return now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS;\r\n        });\r\n        return this._storage.overwrite(this._heartbeatsCache);\r\n    }\r\n    /**\r\n     * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.\r\n     * It also clears all heartbeats from memory as well as in IndexedDB.\r\n     *\r\n     * NOTE: It will read heartbeats from the heartbeatsCache, instead of from indexedDB to reduce latency\r\n     */\r\n    async getHeartbeatsHeader() {\r\n        if (this._heartbeatsCache === null) {\r\n            await this._heartbeatsCachePromise;\r\n        }\r\n        // If it's still null, it's been cleared and has not been repopulated.\r\n        if (this._heartbeatsCache === null) {\r\n            return '';\r\n        }\r\n        // Extract as many heartbeats from the cache as will fit under the size limit.\r\n        const { heartbeatsToSend, unsentEntries } = extractHeartbeatsForHeader(this._heartbeatsCache);\r\n        const headerString = base64Encode(JSON.stringify({ version: 2, heartbeats: heartbeatsToSend }));\r\n        if (unsentEntries.length > 0) {\r\n            // Store any unsent entries if they exist.\r\n            this._heartbeatsCache = unsentEntries;\r\n            // This seems more likely than deleteAll (below) to lead to some odd state\r\n            // since the cache isn't empty and this will be called again on the next request,\r\n            // and is probably safest if we await it.\r\n            await this._storage.overwrite(this._heartbeatsCache);\r\n        }\r\n        else {\r\n            this._heartbeatsCache = null;\r\n            // Do not wait for this, to reduce latency.\r\n            void this._storage.deleteAll();\r\n        }\r\n        return headerString;\r\n    }\r\n}\r\nfunction getUTCDateString() {\r\n    const today = new Date();\r\n    // Returns date format 'YYYY-MM-DD'\r\n    return today.toISOString().substring(0, 10);\r\n}\r\nfunction extractHeartbeatsForHeader(heartbeatsCache, maxSize = MAX_HEADER_BYTES) {\r\n    // Heartbeats grouped by user agent in the standard format to be sent in\r\n    // the header.\r\n    const heartbeatsToSend = [];\r\n    // Single date format heartbeats that are not sent.\r\n    let unsentEntries = heartbeatsCache.slice();\r\n    for (const singleDateHeartbeat of heartbeatsCache) {\r\n        // Look for an existing entry with the same user agent.\r\n        const heartbeatEntry = heartbeatsToSend.find(hb => hb.userAgent === singleDateHeartbeat.userAgent);\r\n        if (!heartbeatEntry) {\r\n            // If no entry for this user agent exists, create one.\r\n            heartbeatsToSend.push({\r\n                userAgent: singleDateHeartbeat.userAgent,\r\n                dates: [singleDateHeartbeat.date]\r\n            });\r\n            if (countBytes(heartbeatsToSend) > maxSize) {\r\n                // If the header would exceed max size, remove the added heartbeat\r\n                // entry and stop adding to the header.\r\n                heartbeatsToSend.pop();\r\n                break;\r\n            }\r\n        }\r\n        else {\r\n            heartbeatEntry.dates.push(singleDateHeartbeat.date);\r\n            // If the header would exceed max size, remove the added date\r\n            // and stop adding to the header.\r\n            if (countBytes(heartbeatsToSend) > maxSize) {\r\n                heartbeatEntry.dates.pop();\r\n                break;\r\n            }\r\n        }\r\n        // Pop unsent entry from queue. (Skipped if adding the entry exceeded\r\n        // quota and the loop breaks early.)\r\n        unsentEntries = unsentEntries.slice(1);\r\n    }\r\n    return {\r\n        heartbeatsToSend,\r\n        unsentEntries\r\n    };\r\n}\r\nclass HeartbeatStorageImpl {\r\n    constructor(app) {\r\n        this.app = app;\r\n        this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();\r\n    }\r\n    async runIndexedDBEnvironmentCheck() {\r\n        if (!isIndexedDBAvailable()) {\r\n            return false;\r\n        }\r\n        else {\r\n            return validateIndexedDBOpenable()\r\n                .then(() => true)\r\n                .catch(() => false);\r\n        }\r\n    }\r\n    /**\r\n     * Read all heartbeats.\r\n     */\r\n    async read() {\r\n        const canUseIndexedDB = await this._canUseIndexedDBPromise;\r\n        if (!canUseIndexedDB) {\r\n            return [];\r\n        }\r\n        else {\r\n            const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);\r\n            return (idbHeartbeatObject === null || idbHeartbeatObject === void 0 ? void 0 : idbHeartbeatObject.heartbeats) || [];\r\n        }\r\n    }\r\n    // overwrite the storage with the provided heartbeats\r\n    async overwrite(heartbeats) {\r\n        const canUseIndexedDB = await this._canUseIndexedDBPromise;\r\n        if (!canUseIndexedDB) {\r\n            return;\r\n        }\r\n        else {\r\n            return writeHeartbeatsToIndexedDB(this.app, { heartbeats });\r\n        }\r\n    }\r\n    // add heartbeats\r\n    async add(heartbeats) {\r\n        const canUseIndexedDB = await this._canUseIndexedDBPromise;\r\n        if (!canUseIndexedDB) {\r\n            return;\r\n        }\r\n        else {\r\n            const existingHeartbeats = await this.read();\r\n            return writeHeartbeatsToIndexedDB(this.app, {\r\n                heartbeats: [...existingHeartbeats, ...heartbeats]\r\n            });\r\n        }\r\n    }\r\n    // delete heartbeats\r\n    async delete(heartbeats) {\r\n        const canUseIndexedDB = await this._canUseIndexedDBPromise;\r\n        if (!canUseIndexedDB) {\r\n            return;\r\n        }\r\n        else {\r\n            const existingHeartbeats = await this.read();\r\n            return writeHeartbeatsToIndexedDB(this.app, {\r\n                heartbeats: existingHeartbeats.filter(existingHeartbeat => !heartbeats.includes(existingHeartbeat))\r\n            });\r\n        }\r\n    }\r\n    // delete all heartbeats\r\n    async deleteAll() {\r\n        const canUseIndexedDB = await this._canUseIndexedDBPromise;\r\n        if (!canUseIndexedDB) {\r\n            return;\r\n        }\r\n        else {\r\n            return deleteHeartbeatsFromIndexedDB(this.app);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped\r\n * in a platform logging header JSON object, stringified, and converted\r\n * to base 64.\r\n */\r\nfunction countBytes(heartbeatsCache) {\r\n    // base64 has a restricted set of characters, all of which should be 1 byte.\r\n    return base64Encode(\r\n    // heartbeatsCache wrapper properties\r\n    JSON.stringify({ version: 2, heartbeats: heartbeatsCache })).length;\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction registerCoreComponents(variant) {\r\n    _registerComponent(new Component('platform-logger', container => new PlatformLoggerServiceImpl(container), \"PRIVATE\" /* PRIVATE */));\r\n    _registerComponent(new Component('heartbeat', container => new HeartbeatServiceImpl(container), \"PRIVATE\" /* PRIVATE */));\r\n    // Register `app` package.\r\n    registerVersion(name$o, version$1, variant);\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name$o, version$1, 'esm2017');\r\n    // Register platform SDK identifier (no version).\r\n    registerVersion('fire-js', '');\r\n}\r\n\r\n/**\r\n * Firebase App\r\n *\r\n * @remarks This package coordinates the communication between the different Firebase components\r\n * @packageDocumentation\r\n */\r\nregisterCoreComponents('');\r\n\r\nexport { SDK_VERSION, DEFAULT_ENTRY_NAME as _DEFAULT_ENTRY_NAME, _addComponent, _addOrOverwriteComponent, _apps, _clearComponents, _components, _getProvider, _registerComponent, _removeServiceInstance, deleteApp, getApp, getApps, initializeApp, onLog, registerVersion, setLogLevel };\r\n\n"]},"metadata":{},"sourceType":"module"}