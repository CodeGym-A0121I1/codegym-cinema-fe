{"ast":null,"code":"import _asyncToGenerator from \"D:/Sprint02-ProjectCG/Front-End/codegym-cinema-fe/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport firebase from '@firebase/app-compat';\nimport * as exp from '@firebase/auth/internal';\nimport { Component } from '@firebase/component';\nimport { isBrowserExtension, isReactNative, isNode, getUA, isIE, isIndexedDBAvailable, FirebaseError } from '@firebase/util';\nvar name = \"@firebase/auth-compat\";\nvar version = \"0.2.9\";\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst CORDOVA_ONDEVICEREADY_TIMEOUT_MS = 1000;\n\nfunction _getCurrentScheme() {\n  var _a;\n\n  return ((_a = self === null || self === void 0 ? void 0 : self.location) === null || _a === void 0 ? void 0 : _a.protocol) || null;\n}\n/**\r\n * @return {boolean} Whether the current environment is http or https.\r\n */\n\n\nfunction _isHttpOrHttps() {\n  return _getCurrentScheme() === 'http:' || _getCurrentScheme() === 'https:';\n}\n/**\r\n * @param {?string=} ua The user agent.\r\n * @return {boolean} Whether the app is rendered in a mobile iOS or Android\r\n *     Cordova environment.\r\n */\n\n\nfunction _isAndroidOrIosCordovaScheme(ua = getUA()) {\n  return !!((_getCurrentScheme() === 'file:' || _getCurrentScheme() === 'ionic:') && ua.toLowerCase().match(/iphone|ipad|ipod|android/));\n}\n/**\r\n * @return {boolean} Whether the environment is a native environment, where\r\n *     CORS checks do not apply.\r\n */\n\n\nfunction _isNativeEnvironment() {\n  return isReactNative() || isNode();\n}\n/**\r\n * Checks whether the user agent is IE11.\r\n * @return {boolean} True if it is IE11.\r\n */\n\n\nfunction _isIe11() {\n  return isIE() && (document === null || document === void 0 ? void 0 : document.documentMode) === 11;\n}\n/**\r\n * Checks whether the user agent is Edge.\r\n * @param {string} userAgent The browser user agent string.\r\n * @return {boolean} True if it is Edge.\r\n */\n\n\nfunction _isEdge(ua = getUA()) {\n  return /Edge\\/\\d+/.test(ua);\n}\n/**\r\n * @param {?string=} opt_userAgent The navigator user agent.\r\n * @return {boolean} Whether local storage is not synchronized between an iframe\r\n *     and a popup of the same domain.\r\n */\n\n\nfunction _isLocalStorageNotSynchronized(ua = getUA()) {\n  return _isIe11() || _isEdge(ua);\n}\n/** @return {boolean} Whether web storage is supported. */\n\n\nfunction _isWebStorageSupported() {\n  try {\n    const storage = self.localStorage;\n\n    const key = exp._generateEventId();\n\n    if (storage) {\n      // setItem will throw an exception if we cannot access WebStorage (e.g.,\n      // Safari in private mode).\n      storage['setItem'](key, '1');\n      storage['removeItem'](key); // For browsers where iframe web storage does not synchronize with a popup\n      // of the same domain, indexedDB is used for persistent storage. These\n      // browsers include IE11 and Edge.\n      // Make sure it is supported (IE11 and Edge private mode does not support\n      // that).\n\n      if (_isLocalStorageNotSynchronized()) {\n        // In such browsers, if indexedDB is not supported, an iframe cannot be\n        // notified of the popup sign in result.\n        return isIndexedDBAvailable();\n      }\n\n      return true;\n    }\n  } catch (e) {\n    // localStorage is not available from a worker. Test availability of\n    // indexedDB.\n    return _isWorker() && isIndexedDBAvailable();\n  }\n\n  return false;\n}\n/**\r\n * @param {?Object=} global The optional global scope.\r\n * @return {boolean} Whether current environment is a worker.\r\n */\n\n\nfunction _isWorker() {\n  // WorkerGlobalScope only defined in worker environment.\n  return typeof global !== 'undefined' && 'WorkerGlobalScope' in global && 'importScripts' in global;\n}\n\nfunction _isPopupRedirectSupported() {\n  return (_isHttpOrHttps() || isBrowserExtension() || _isAndroidOrIosCordovaScheme()) && // React Native with remote debugging reports its location.protocol as\n  // http.\n  !_isNativeEnvironment() && // Local storage has to be supported for browser popup and redirect\n  // operations to work.\n  _isWebStorageSupported() && // DOM, popups and redirects are not supported within a worker.\n  !_isWorker();\n}\n/** Quick check that indicates the platform *may* be Cordova */\n\n\nfunction _isLikelyCordova() {\n  return _isAndroidOrIosCordovaScheme() && typeof document !== 'undefined';\n}\n\nfunction _isCordova() {\n  return _isCordova2.apply(this, arguments);\n}\n\nfunction _isCordova2() {\n  _isCordova2 = _asyncToGenerator(function* () {\n    if (!_isLikelyCordova()) {\n      return false;\n    }\n\n    return new Promise(resolve => {\n      const timeoutId = setTimeout(() => {\n        // We've waited long enough; the telltale Cordova event didn't happen\n        resolve(false);\n      }, CORDOVA_ONDEVICEREADY_TIMEOUT_MS);\n      document.addEventListener('deviceready', () => {\n        clearTimeout(timeoutId);\n        resolve(true);\n      });\n    });\n  });\n  return _isCordova2.apply(this, arguments);\n}\n\nfunction _getSelfWindow() {\n  return typeof window !== 'undefined' ? window : null;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst Persistence = {\n  LOCAL: 'local',\n  NONE: 'none',\n  SESSION: 'session'\n};\nconst _assert$3 = exp._assert;\nconst PERSISTENCE_KEY = 'persistence';\n/**\r\n * Validates that an argument is a valid persistence value. If an invalid type\r\n * is specified, an error is thrown synchronously.\r\n */\n\nfunction _validatePersistenceArgument(auth, persistence) {\n  _assert$3(Object.values(Persistence).includes(persistence), auth, \"invalid-persistence-type\"\n  /* INVALID_PERSISTENCE */\n  ); // Validate if the specified type is supported in the current environment.\n\n\n  if (isReactNative()) {\n    // This is only supported in a browser.\n    _assert$3(persistence !== Persistence.SESSION, auth, \"unsupported-persistence-type\"\n    /* UNSUPPORTED_PERSISTENCE */\n    );\n\n    return;\n  }\n\n  if (isNode()) {\n    // Only none is supported in Node.js.\n    _assert$3(persistence === Persistence.NONE, auth, \"unsupported-persistence-type\"\n    /* UNSUPPORTED_PERSISTENCE */\n    );\n\n    return;\n  }\n\n  if (_isWorker()) {\n    // In a worker environment, either LOCAL or NONE are supported.\n    // If indexedDB not supported and LOCAL provided, throw an error\n    _assert$3(persistence === Persistence.NONE || persistence === Persistence.LOCAL && isIndexedDBAvailable(), auth, \"unsupported-persistence-type\"\n    /* UNSUPPORTED_PERSISTENCE */\n    );\n\n    return;\n  } // This is restricted by what the browser supports.\n\n\n  _assert$3(persistence === Persistence.NONE || _isWebStorageSupported(), auth, \"unsupported-persistence-type\"\n  /* UNSUPPORTED_PERSISTENCE */\n  );\n}\n\nfunction _savePersistenceForRedirect(_x) {\n  return _savePersistenceForRedirect2.apply(this, arguments);\n}\n\nfunction _savePersistenceForRedirect2() {\n  _savePersistenceForRedirect2 = _asyncToGenerator(function* (auth) {\n    yield auth._initializationPromise;\n    const session = getSessionStorageIfAvailable();\n\n    const key = exp._persistenceKeyName(PERSISTENCE_KEY, auth.config.apiKey, auth.name);\n\n    if (session) {\n      session.setItem(key, auth._getPersistence());\n    }\n  });\n  return _savePersistenceForRedirect2.apply(this, arguments);\n}\n\nfunction _getPersistencesFromRedirect(apiKey, appName) {\n  const session = getSessionStorageIfAvailable();\n\n  if (!session) {\n    return [];\n  }\n\n  const key = exp._persistenceKeyName(PERSISTENCE_KEY, apiKey, appName);\n\n  const persistence = session.getItem(key);\n\n  switch (persistence) {\n    case Persistence.NONE:\n      return [exp.inMemoryPersistence];\n\n    case Persistence.LOCAL:\n      return [exp.indexedDBLocalPersistence, exp.browserSessionPersistence];\n\n    case Persistence.SESSION:\n      return [exp.browserSessionPersistence];\n\n    default:\n      return [];\n  }\n}\n/** Returns session storage, or null if the property access errors */\n\n\nfunction getSessionStorageIfAvailable() {\n  var _a;\n\n  try {\n    return ((_a = _getSelfWindow()) === null || _a === void 0 ? void 0 : _a.sessionStorage) || null;\n  } catch (e) {\n    return null;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst _assert$2 = exp._assert;\n/** Platform-agnostic popup-redirect resolver */\n\nclass CompatPopupRedirectResolver {\n  constructor() {\n    // Create both resolvers for dynamic resolution later\n    this.browserResolver = exp._getInstance(exp.browserPopupRedirectResolver);\n    this.cordovaResolver = exp._getInstance(exp.cordovaPopupRedirectResolver); // The actual resolver in use: either browserResolver or cordovaResolver.\n\n    this.underlyingResolver = null;\n    this._redirectPersistence = exp.browserSessionPersistence;\n    this._completeRedirectFn = exp._getRedirectResult;\n  }\n\n  _initialize(auth) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this.selectUnderlyingResolver();\n      return _this.assertedUnderlyingResolver._initialize(auth);\n    })();\n  }\n\n  _openPopup(auth, provider, authType, eventId) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this2.selectUnderlyingResolver();\n      return _this2.assertedUnderlyingResolver._openPopup(auth, provider, authType, eventId);\n    })();\n  }\n\n  _openRedirect(auth, provider, authType, eventId) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this3.selectUnderlyingResolver();\n      return _this3.assertedUnderlyingResolver._openRedirect(auth, provider, authType, eventId);\n    })();\n  }\n\n  _isIframeWebStorageSupported(auth, cb) {\n    this.assertedUnderlyingResolver._isIframeWebStorageSupported(auth, cb);\n  }\n\n  _originValidation(auth) {\n    return this.assertedUnderlyingResolver._originValidation(auth);\n  }\n\n  get _shouldInitProactively() {\n    return _isLikelyCordova() || this.browserResolver._shouldInitProactively;\n  }\n\n  get assertedUnderlyingResolver() {\n    _assert$2(this.underlyingResolver, \"internal-error\"\n    /* INTERNAL_ERROR */\n    );\n\n    return this.underlyingResolver;\n  }\n\n  selectUnderlyingResolver() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this4.underlyingResolver) {\n        return;\n      } // We haven't yet determined whether or not we're in Cordova; go ahead\n      // and determine that state now.\n\n\n      const isCordova = yield _isCordova();\n      _this4.underlyingResolver = isCordova ? _this4.cordovaResolver : _this4.browserResolver;\n    })();\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction unwrap(object) {\n  return object.unwrap();\n}\n\nfunction wrapped(object) {\n  return object.wrapped();\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction credentialFromResponse(userCredential) {\n  return credentialFromObject(userCredential);\n}\n\nfunction attachExtraErrorFields(auth, e) {\n  var _a; // The response contains all fields from the server which may or may not\n  // actually match the underlying type\n\n\n  const response = (_a = e.customData) === null || _a === void 0 ? void 0 : _a._tokenResponse;\n\n  if (e.code === 'auth/multi-factor-auth-required') {\n    const mfaErr = e;\n    mfaErr.resolver = new MultiFactorResolver(auth, exp.getMultiFactorResolver(auth, e));\n  } else if (response) {\n    const credential = credentialFromObject(e);\n    const credErr = e;\n\n    if (credential) {\n      credErr.credential = credential;\n      credErr.tenantId = response.tenantId || undefined;\n      credErr.email = response.email || undefined;\n      credErr.phoneNumber = response.phoneNumber || undefined;\n    }\n  }\n}\n\nfunction credentialFromObject(object) {\n  const {\n    _tokenResponse\n  } = object instanceof FirebaseError ? object.customData : object;\n\n  if (!_tokenResponse) {\n    return null;\n  } // Handle phone Auth credential responses, as they have a different format\n  // from other backend responses (i.e. no providerId). This is also only the\n  // case for user credentials (does not work for errors).\n\n\n  if (!(object instanceof FirebaseError)) {\n    if ('temporaryProof' in _tokenResponse && 'phoneNumber' in _tokenResponse) {\n      return exp.PhoneAuthProvider.credentialFromResult(object);\n    }\n  }\n\n  const providerId = _tokenResponse.providerId; // Email and password is not supported as there is no situation where the\n  // server would return the password to the client.\n\n  if (!providerId || providerId === exp.ProviderId.PASSWORD) {\n    return null;\n  }\n\n  let provider;\n\n  switch (providerId) {\n    case exp.ProviderId.GOOGLE:\n      provider = exp.GoogleAuthProvider;\n      break;\n\n    case exp.ProviderId.FACEBOOK:\n      provider = exp.FacebookAuthProvider;\n      break;\n\n    case exp.ProviderId.GITHUB:\n      provider = exp.GithubAuthProvider;\n      break;\n\n    case exp.ProviderId.TWITTER:\n      provider = exp.TwitterAuthProvider;\n      break;\n\n    default:\n      const {\n        oauthIdToken,\n        oauthAccessToken,\n        oauthTokenSecret,\n        pendingToken,\n        nonce\n      } = _tokenResponse;\n\n      if (!oauthAccessToken && !oauthTokenSecret && !oauthIdToken && !pendingToken) {\n        return null;\n      } // TODO(avolkovi): uncomment this and get it working with SAML & OIDC\n\n\n      if (pendingToken) {\n        if (providerId.startsWith('saml.')) {\n          return exp.SAMLAuthCredential._create(providerId, pendingToken);\n        } else {\n          // OIDC and non-default providers excluding Twitter.\n          return exp.OAuthCredential._fromParams({\n            providerId,\n            signInMethod: providerId,\n            pendingToken,\n            idToken: oauthIdToken,\n            accessToken: oauthAccessToken\n          });\n        }\n      }\n\n      return new exp.OAuthProvider(providerId).credential({\n        idToken: oauthIdToken,\n        accessToken: oauthAccessToken,\n        rawNonce: nonce\n      });\n  }\n\n  return object instanceof FirebaseError ? provider.credentialFromError(object) : provider.credentialFromResult(object);\n}\n\nfunction convertCredential(auth, credentialPromise) {\n  return credentialPromise.catch(e => {\n    if (e instanceof FirebaseError) {\n      attachExtraErrorFields(auth, e);\n    }\n\n    throw e;\n  }).then(credential => {\n    const operationType = credential.operationType;\n    const user = credential.user;\n    return {\n      operationType,\n      credential: credentialFromResponse(credential),\n      additionalUserInfo: exp.getAdditionalUserInfo(credential),\n      user: User.getOrCreate(user)\n    };\n  });\n}\n\nfunction convertConfirmationResult(_x2, _x3) {\n  return _convertConfirmationResult.apply(this, arguments);\n}\n\nfunction _convertConfirmationResult() {\n  _convertConfirmationResult = _asyncToGenerator(function* (auth, confirmationResultPromise) {\n    const confirmationResultExp = yield confirmationResultPromise;\n    return {\n      verificationId: confirmationResultExp.verificationId,\n      confirm: verificationCode => convertCredential(auth, confirmationResultExp.confirm(verificationCode))\n    };\n  });\n  return _convertConfirmationResult.apply(this, arguments);\n}\n\nclass MultiFactorResolver {\n  constructor(auth, resolver) {\n    this.resolver = resolver;\n    this.auth = wrapped(auth);\n  }\n\n  get session() {\n    return this.resolver.session;\n  }\n\n  get hints() {\n    return this.resolver.hints;\n  }\n\n  resolveSignIn(assertion) {\n    return convertCredential(unwrap(this.auth), this.resolver.resolveSignIn(assertion));\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nclass User {\n  constructor(_delegate) {\n    this._delegate = _delegate;\n    this.multiFactor = exp.multiFactor(_delegate);\n  }\n\n  static getOrCreate(user) {\n    if (!User.USER_MAP.has(user)) {\n      User.USER_MAP.set(user, new User(user));\n    }\n\n    return User.USER_MAP.get(user);\n  }\n\n  delete() {\n    return this._delegate.delete();\n  }\n\n  reload() {\n    return this._delegate.reload();\n  }\n\n  toJSON() {\n    return this._delegate.toJSON();\n  }\n\n  getIdTokenResult(forceRefresh) {\n    return this._delegate.getIdTokenResult(forceRefresh);\n  }\n\n  getIdToken(forceRefresh) {\n    return this._delegate.getIdToken(forceRefresh);\n  }\n\n  linkAndRetrieveDataWithCredential(credential) {\n    return this.linkWithCredential(credential);\n  }\n\n  linkWithCredential(credential) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      return convertCredential(_this5.auth, exp.linkWithCredential(_this5._delegate, credential));\n    })();\n  }\n\n  linkWithPhoneNumber(phoneNumber, applicationVerifier) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      return convertConfirmationResult(_this6.auth, exp.linkWithPhoneNumber(_this6._delegate, phoneNumber, applicationVerifier));\n    })();\n  }\n\n  linkWithPopup(provider) {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      return convertCredential(_this7.auth, exp.linkWithPopup(_this7._delegate, provider, CompatPopupRedirectResolver));\n    })();\n  }\n\n  linkWithRedirect(provider) {\n    var _this8 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _savePersistenceForRedirect(exp._castAuth(_this8.auth));\n      return exp.linkWithRedirect(_this8._delegate, provider, CompatPopupRedirectResolver);\n    })();\n  }\n\n  reauthenticateAndRetrieveDataWithCredential(credential) {\n    return this.reauthenticateWithCredential(credential);\n  }\n\n  reauthenticateWithCredential(credential) {\n    var _this9 = this;\n\n    return _asyncToGenerator(function* () {\n      return convertCredential(_this9.auth, exp.reauthenticateWithCredential(_this9._delegate, credential));\n    })();\n  }\n\n  reauthenticateWithPhoneNumber(phoneNumber, applicationVerifier) {\n    return convertConfirmationResult(this.auth, exp.reauthenticateWithPhoneNumber(this._delegate, phoneNumber, applicationVerifier));\n  }\n\n  reauthenticateWithPopup(provider) {\n    return convertCredential(this.auth, exp.reauthenticateWithPopup(this._delegate, provider, CompatPopupRedirectResolver));\n  }\n\n  reauthenticateWithRedirect(provider) {\n    var _this10 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _savePersistenceForRedirect(exp._castAuth(_this10.auth));\n      return exp.reauthenticateWithRedirect(_this10._delegate, provider, CompatPopupRedirectResolver);\n    })();\n  }\n\n  sendEmailVerification(actionCodeSettings) {\n    return exp.sendEmailVerification(this._delegate, actionCodeSettings);\n  }\n\n  unlink(providerId) {\n    var _this11 = this;\n\n    return _asyncToGenerator(function* () {\n      yield exp.unlink(_this11._delegate, providerId);\n      return _this11;\n    })();\n  }\n\n  updateEmail(newEmail) {\n    return exp.updateEmail(this._delegate, newEmail);\n  }\n\n  updatePassword(newPassword) {\n    return exp.updatePassword(this._delegate, newPassword);\n  }\n\n  updatePhoneNumber(phoneCredential) {\n    return exp.updatePhoneNumber(this._delegate, phoneCredential);\n  }\n\n  updateProfile(profile) {\n    return exp.updateProfile(this._delegate, profile);\n  }\n\n  verifyBeforeUpdateEmail(newEmail, actionCodeSettings) {\n    return exp.verifyBeforeUpdateEmail(this._delegate, newEmail, actionCodeSettings);\n  }\n\n  get emailVerified() {\n    return this._delegate.emailVerified;\n  }\n\n  get isAnonymous() {\n    return this._delegate.isAnonymous;\n  }\n\n  get metadata() {\n    return this._delegate.metadata;\n  }\n\n  get phoneNumber() {\n    return this._delegate.phoneNumber;\n  }\n\n  get providerData() {\n    return this._delegate.providerData;\n  }\n\n  get refreshToken() {\n    return this._delegate.refreshToken;\n  }\n\n  get tenantId() {\n    return this._delegate.tenantId;\n  }\n\n  get displayName() {\n    return this._delegate.displayName;\n  }\n\n  get email() {\n    return this._delegate.email;\n  }\n\n  get photoURL() {\n    return this._delegate.photoURL;\n  }\n\n  get providerId() {\n    return this._delegate.providerId;\n  }\n\n  get uid() {\n    return this._delegate.uid;\n  }\n\n  get auth() {\n    return this._delegate.auth;\n  }\n\n} // Maintain a map so that there's always a 1:1 mapping between new User and\n// legacy compat users\n\n\nUser.USER_MAP = new WeakMap();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst _assert$1 = exp._assert;\n\nclass Auth {\n  constructor(app, provider) {\n    this.app = app;\n\n    if (provider.isInitialized()) {\n      this._delegate = provider.getImmediate();\n      this.linkUnderlyingAuth();\n      return;\n    }\n\n    const {\n      apiKey\n    } = app.options; // TODO: platform needs to be determined using heuristics\n\n    _assert$1(apiKey, \"invalid-api-key\"\n    /* INVALID_API_KEY */\n    , {\n      appName: app.name\n    }); // TODO: platform needs to be determined using heuristics\n\n\n    _assert$1(apiKey, \"invalid-api-key\"\n    /* INVALID_API_KEY */\n    , {\n      appName: app.name\n    }); // Only use a popup/redirect resolver in browser environments\n\n\n    const resolver = typeof window !== 'undefined' ? CompatPopupRedirectResolver : undefined;\n    this._delegate = provider.initialize({\n      options: {\n        persistence: buildPersistenceHierarchy(apiKey, app.name),\n        popupRedirectResolver: resolver\n      }\n    });\n\n    this._delegate._updateErrorMap(exp.debugErrorMap);\n\n    this.linkUnderlyingAuth();\n  }\n\n  get emulatorConfig() {\n    return this._delegate.emulatorConfig;\n  }\n\n  get currentUser() {\n    if (!this._delegate.currentUser) {\n      return null;\n    }\n\n    return User.getOrCreate(this._delegate.currentUser);\n  }\n\n  get languageCode() {\n    return this._delegate.languageCode;\n  }\n\n  set languageCode(languageCode) {\n    this._delegate.languageCode = languageCode;\n  }\n\n  get settings() {\n    return this._delegate.settings;\n  }\n\n  get tenantId() {\n    return this._delegate.tenantId;\n  }\n\n  set tenantId(tid) {\n    this._delegate.tenantId = tid;\n  }\n\n  useDeviceLanguage() {\n    this._delegate.useDeviceLanguage();\n  }\n\n  signOut() {\n    return this._delegate.signOut();\n  }\n\n  useEmulator(url, options) {\n    exp.connectAuthEmulator(this._delegate, url, options);\n  }\n\n  applyActionCode(code) {\n    return exp.applyActionCode(this._delegate, code);\n  }\n\n  checkActionCode(code) {\n    return exp.checkActionCode(this._delegate, code);\n  }\n\n  confirmPasswordReset(code, newPassword) {\n    return exp.confirmPasswordReset(this._delegate, code, newPassword);\n  }\n\n  createUserWithEmailAndPassword(email, password) {\n    var _this12 = this;\n\n    return _asyncToGenerator(function* () {\n      return convertCredential(_this12._delegate, exp.createUserWithEmailAndPassword(_this12._delegate, email, password));\n    })();\n  }\n\n  fetchProvidersForEmail(email) {\n    return this.fetchSignInMethodsForEmail(email);\n  }\n\n  fetchSignInMethodsForEmail(email) {\n    return exp.fetchSignInMethodsForEmail(this._delegate, email);\n  }\n\n  isSignInWithEmailLink(emailLink) {\n    return exp.isSignInWithEmailLink(this._delegate, emailLink);\n  }\n\n  getRedirectResult() {\n    var _this13 = this;\n\n    return _asyncToGenerator(function* () {\n      _assert$1(_isPopupRedirectSupported(), _this13._delegate, \"operation-not-supported-in-this-environment\"\n      /* OPERATION_NOT_SUPPORTED */\n      );\n\n      const credential = yield exp.getRedirectResult(_this13._delegate, CompatPopupRedirectResolver);\n\n      if (!credential) {\n        return {\n          credential: null,\n          user: null\n        };\n      }\n\n      return convertCredential(_this13._delegate, Promise.resolve(credential));\n    })();\n  } // This function should only be called by frameworks (e.g. FirebaseUI-web) to log their usage.\n  // It is not intended for direct use by developer apps. NO jsdoc here to intentionally leave it\n  // out of autogenerated documentation pages to reduce accidental misuse.\n\n\n  addFrameworkForLogging(framework) {\n    exp.addFrameworkForLogging(this._delegate, framework);\n  }\n\n  onAuthStateChanged(nextOrObserver, errorFn, completed) {\n    const {\n      next,\n      error,\n      complete\n    } = wrapObservers(nextOrObserver, errorFn, completed);\n    return this._delegate.onAuthStateChanged(next, error, complete);\n  }\n\n  onIdTokenChanged(nextOrObserver, errorFn, completed) {\n    const {\n      next,\n      error,\n      complete\n    } = wrapObservers(nextOrObserver, errorFn, completed);\n    return this._delegate.onIdTokenChanged(next, error, complete);\n  }\n\n  sendSignInLinkToEmail(email, actionCodeSettings) {\n    return exp.sendSignInLinkToEmail(this._delegate, email, actionCodeSettings);\n  }\n\n  sendPasswordResetEmail(email, actionCodeSettings) {\n    return exp.sendPasswordResetEmail(this._delegate, email, actionCodeSettings || undefined);\n  }\n\n  setPersistence(persistence) {\n    var _this14 = this;\n\n    return _asyncToGenerator(function* () {\n      _validatePersistenceArgument(_this14._delegate, persistence);\n\n      let converted;\n\n      switch (persistence) {\n        case Persistence.SESSION:\n          converted = exp.browserSessionPersistence;\n          break;\n\n        case Persistence.LOCAL:\n          // Not using isIndexedDBAvailable() since it only checks if indexedDB is defined.\n          const isIndexedDBFullySupported = yield exp._getInstance(exp.indexedDBLocalPersistence)._isAvailable();\n          converted = isIndexedDBFullySupported ? exp.indexedDBLocalPersistence : exp.browserLocalPersistence;\n          break;\n\n        case Persistence.NONE:\n          converted = exp.inMemoryPersistence;\n          break;\n\n        default:\n          return exp._fail(\"argument-error\"\n          /* ARGUMENT_ERROR */\n          , {\n            appName: _this14._delegate.name\n          });\n      }\n\n      return _this14._delegate.setPersistence(converted);\n    })();\n  }\n\n  signInAndRetrieveDataWithCredential(credential) {\n    return this.signInWithCredential(credential);\n  }\n\n  signInAnonymously() {\n    return convertCredential(this._delegate, exp.signInAnonymously(this._delegate));\n  }\n\n  signInWithCredential(credential) {\n    return convertCredential(this._delegate, exp.signInWithCredential(this._delegate, credential));\n  }\n\n  signInWithCustomToken(token) {\n    return convertCredential(this._delegate, exp.signInWithCustomToken(this._delegate, token));\n  }\n\n  signInWithEmailAndPassword(email, password) {\n    return convertCredential(this._delegate, exp.signInWithEmailAndPassword(this._delegate, email, password));\n  }\n\n  signInWithEmailLink(email, emailLink) {\n    return convertCredential(this._delegate, exp.signInWithEmailLink(this._delegate, email, emailLink));\n  }\n\n  signInWithPhoneNumber(phoneNumber, applicationVerifier) {\n    return convertConfirmationResult(this._delegate, exp.signInWithPhoneNumber(this._delegate, phoneNumber, applicationVerifier));\n  }\n\n  signInWithPopup(provider) {\n    var _this15 = this;\n\n    return _asyncToGenerator(function* () {\n      _assert$1(_isPopupRedirectSupported(), _this15._delegate, \"operation-not-supported-in-this-environment\"\n      /* OPERATION_NOT_SUPPORTED */\n      );\n\n      return convertCredential(_this15._delegate, exp.signInWithPopup(_this15._delegate, provider, CompatPopupRedirectResolver));\n    })();\n  }\n\n  signInWithRedirect(provider) {\n    var _this16 = this;\n\n    return _asyncToGenerator(function* () {\n      _assert$1(_isPopupRedirectSupported(), _this16._delegate, \"operation-not-supported-in-this-environment\"\n      /* OPERATION_NOT_SUPPORTED */\n      );\n\n      yield _savePersistenceForRedirect(_this16._delegate);\n      return exp.signInWithRedirect(_this16._delegate, provider, CompatPopupRedirectResolver);\n    })();\n  }\n\n  updateCurrentUser(user) {\n    // remove ts-ignore once overloads are defined for exp functions to accept compat objects\n    // @ts-ignore\n    return this._delegate.updateCurrentUser(user);\n  }\n\n  verifyPasswordResetCode(code) {\n    return exp.verifyPasswordResetCode(this._delegate, code);\n  }\n\n  unwrap() {\n    return this._delegate;\n  }\n\n  _delete() {\n    return this._delegate._delete();\n  }\n\n  linkUnderlyingAuth() {\n    this._delegate.wrapped = () => this;\n  }\n\n}\n\nAuth.Persistence = Persistence;\n\nfunction wrapObservers(nextOrObserver, error, complete) {\n  let next = nextOrObserver;\n\n  if (typeof nextOrObserver !== 'function') {\n    ({\n      next,\n      error,\n      complete\n    } = nextOrObserver);\n  } // We know 'next' is now a function\n\n\n  const oldNext = next;\n\n  const newNext = user => oldNext(user && User.getOrCreate(user));\n\n  return {\n    next: newNext,\n    error: error,\n    complete\n  };\n}\n\nfunction buildPersistenceHierarchy(apiKey, appName) {\n  // Note this is slightly different behavior: in this case, the stored\n  // persistence is checked *first* rather than last. This is because we want\n  // to prefer stored persistence type in the hierarchy. This is an empty\n  // array if window is not available or there is no pending redirect\n  const persistences = _getPersistencesFromRedirect(apiKey, appName); // If \"self\" is available, add indexedDB\n\n\n  if (typeof self !== 'undefined' && !persistences.includes(exp.indexedDBLocalPersistence)) {\n    persistences.push(exp.indexedDBLocalPersistence);\n  } // If \"window\" is available, add HTML Storage persistences\n\n\n  if (typeof window !== 'undefined') {\n    for (const persistence of [exp.browserLocalPersistence, exp.browserSessionPersistence]) {\n      if (!persistences.includes(persistence)) {\n        persistences.push(persistence);\n      }\n    }\n  } // Add in-memory as a final fallback\n\n\n  if (!persistences.includes(exp.inMemoryPersistence)) {\n    persistences.push(exp.inMemoryPersistence);\n  }\n\n  return persistences;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nclass PhoneAuthProvider {\n  constructor() {\n    this.providerId = 'phone'; // TODO: remove ts-ignore when moving types from auth-types to auth-compat\n    // @ts-ignore\n\n    this._delegate = new exp.PhoneAuthProvider(unwrap(firebase.auth()));\n  }\n\n  static credential(verificationId, verificationCode) {\n    return exp.PhoneAuthProvider.credential(verificationId, verificationCode);\n  }\n\n  verifyPhoneNumber(phoneInfoOptions, applicationVerifier) {\n    return this._delegate.verifyPhoneNumber( // The implementation matches but the types are subtly incompatible\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    phoneInfoOptions, applicationVerifier);\n  }\n\n  unwrap() {\n    return this._delegate;\n  }\n\n}\n\nPhoneAuthProvider.PHONE_SIGN_IN_METHOD = exp.PhoneAuthProvider.PHONE_SIGN_IN_METHOD;\nPhoneAuthProvider.PROVIDER_ID = exp.PhoneAuthProvider.PROVIDER_ID;\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nconst _assert = exp._assert;\n\nclass RecaptchaVerifier {\n  constructor(container, parameters, app = firebase.app()) {\n    var _a; // API key is required for web client RPC calls.\n\n\n    _assert((_a = app.options) === null || _a === void 0 ? void 0 : _a.apiKey, \"invalid-api-key\"\n    /* INVALID_API_KEY */\n    , {\n      appName: app.name\n    });\n\n    this._delegate = new exp.RecaptchaVerifier(container, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    parameters, // TODO: remove ts-ignore when moving types from auth-types to auth-compat\n    // @ts-ignore\n    app.auth());\n    this.type = this._delegate.type;\n  }\n\n  clear() {\n    this._delegate.clear();\n  }\n\n  render() {\n    return this._delegate.render();\n  }\n\n  verify() {\n    return this._delegate.verify();\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst AUTH_TYPE = 'auth-compat'; // Create auth components to register with firebase.\n// Provides Auth public APIs.\n\nfunction registerAuthCompat(instance) {\n  instance.INTERNAL.registerComponent(new Component(AUTH_TYPE, container => {\n    // getImmediate for FirebaseApp will always succeed\n    const app = container.getProvider('app-compat').getImmediate();\n    const authProvider = container.getProvider('auth');\n    return new Auth(app, authProvider);\n  }, \"PUBLIC\"\n  /* PUBLIC */\n  ).setServiceProps({\n    ActionCodeInfo: {\n      Operation: {\n        EMAIL_SIGNIN: exp.ActionCodeOperation.EMAIL_SIGNIN,\n        PASSWORD_RESET: exp.ActionCodeOperation.PASSWORD_RESET,\n        RECOVER_EMAIL: exp.ActionCodeOperation.RECOVER_EMAIL,\n        REVERT_SECOND_FACTOR_ADDITION: exp.ActionCodeOperation.REVERT_SECOND_FACTOR_ADDITION,\n        VERIFY_AND_CHANGE_EMAIL: exp.ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL,\n        VERIFY_EMAIL: exp.ActionCodeOperation.VERIFY_EMAIL\n      }\n    },\n    EmailAuthProvider: exp.EmailAuthProvider,\n    FacebookAuthProvider: exp.FacebookAuthProvider,\n    GithubAuthProvider: exp.GithubAuthProvider,\n    GoogleAuthProvider: exp.GoogleAuthProvider,\n    OAuthProvider: exp.OAuthProvider,\n    SAMLAuthProvider: exp.SAMLAuthProvider,\n    PhoneAuthProvider: PhoneAuthProvider,\n    PhoneMultiFactorGenerator: exp.PhoneMultiFactorGenerator,\n    RecaptchaVerifier: RecaptchaVerifier,\n    TwitterAuthProvider: exp.TwitterAuthProvider,\n    Auth,\n    AuthCredential: exp.AuthCredential,\n    Error: FirebaseError\n  }).setInstantiationMode(\"LAZY\"\n  /* LAZY */\n  ).setMultipleInstances(false));\n  instance.registerVersion(name, version);\n}\n\nregisterAuthCompat(firebase);","map":{"version":3,"sources":["D:/Sprint02-ProjectCG/Front-End/codegym-cinema-fe/node_modules/@firebase/auth-compat/dist/index.esm2017.js"],"names":["firebase","exp","Component","isBrowserExtension","isReactNative","isNode","getUA","isIE","isIndexedDBAvailable","FirebaseError","name","version","CORDOVA_ONDEVICEREADY_TIMEOUT_MS","_getCurrentScheme","_a","self","location","protocol","_isHttpOrHttps","_isAndroidOrIosCordovaScheme","ua","toLowerCase","match","_isNativeEnvironment","_isIe11","document","documentMode","_isEdge","test","_isLocalStorageNotSynchronized","_isWebStorageSupported","storage","localStorage","key","_generateEventId","e","_isWorker","global","_isPopupRedirectSupported","_isLikelyCordova","_isCordova","Promise","resolve","timeoutId","setTimeout","addEventListener","clearTimeout","_getSelfWindow","window","Persistence","LOCAL","NONE","SESSION","_assert$3","_assert","PERSISTENCE_KEY","_validatePersistenceArgument","auth","persistence","Object","values","includes","_savePersistenceForRedirect","_initializationPromise","session","getSessionStorageIfAvailable","_persistenceKeyName","config","apiKey","setItem","_getPersistence","_getPersistencesFromRedirect","appName","getItem","inMemoryPersistence","indexedDBLocalPersistence","browserSessionPersistence","sessionStorage","_assert$2","CompatPopupRedirectResolver","constructor","browserResolver","_getInstance","browserPopupRedirectResolver","cordovaResolver","cordovaPopupRedirectResolver","underlyingResolver","_redirectPersistence","_completeRedirectFn","_getRedirectResult","_initialize","selectUnderlyingResolver","assertedUnderlyingResolver","_openPopup","provider","authType","eventId","_openRedirect","_isIframeWebStorageSupported","cb","_originValidation","_shouldInitProactively","isCordova","unwrap","object","wrapped","credentialFromResponse","userCredential","credentialFromObject","attachExtraErrorFields","response","customData","_tokenResponse","code","mfaErr","resolver","MultiFactorResolver","getMultiFactorResolver","credential","credErr","tenantId","undefined","email","phoneNumber","PhoneAuthProvider","credentialFromResult","providerId","ProviderId","PASSWORD","GOOGLE","GoogleAuthProvider","FACEBOOK","FacebookAuthProvider","GITHUB","GithubAuthProvider","TWITTER","TwitterAuthProvider","oauthIdToken","oauthAccessToken","oauthTokenSecret","pendingToken","nonce","startsWith","SAMLAuthCredential","_create","OAuthCredential","_fromParams","signInMethod","idToken","accessToken","OAuthProvider","rawNonce","credentialFromError","convertCredential","credentialPromise","catch","then","operationType","user","additionalUserInfo","getAdditionalUserInfo","User","getOrCreate","convertConfirmationResult","confirmationResultPromise","confirmationResultExp","verificationId","confirm","verificationCode","hints","resolveSignIn","assertion","_delegate","multiFactor","USER_MAP","has","set","get","delete","reload","toJSON","getIdTokenResult","forceRefresh","getIdToken","linkAndRetrieveDataWithCredential","linkWithCredential","linkWithPhoneNumber","applicationVerifier","linkWithPopup","linkWithRedirect","_castAuth","reauthenticateAndRetrieveDataWithCredential","reauthenticateWithCredential","reauthenticateWithPhoneNumber","reauthenticateWithPopup","reauthenticateWithRedirect","sendEmailVerification","actionCodeSettings","unlink","updateEmail","newEmail","updatePassword","newPassword","updatePhoneNumber","phoneCredential","updateProfile","profile","verifyBeforeUpdateEmail","emailVerified","isAnonymous","metadata","providerData","refreshToken","displayName","photoURL","uid","WeakMap","_assert$1","Auth","app","isInitialized","getImmediate","linkUnderlyingAuth","options","initialize","buildPersistenceHierarchy","popupRedirectResolver","_updateErrorMap","debugErrorMap","emulatorConfig","currentUser","languageCode","settings","tid","useDeviceLanguage","signOut","useEmulator","url","connectAuthEmulator","applyActionCode","checkActionCode","confirmPasswordReset","createUserWithEmailAndPassword","password","fetchProvidersForEmail","fetchSignInMethodsForEmail","isSignInWithEmailLink","emailLink","getRedirectResult","addFrameworkForLogging","framework","onAuthStateChanged","nextOrObserver","errorFn","completed","next","error","complete","wrapObservers","onIdTokenChanged","sendSignInLinkToEmail","sendPasswordResetEmail","setPersistence","converted","isIndexedDBFullySupported","_isAvailable","browserLocalPersistence","_fail","signInAndRetrieveDataWithCredential","signInWithCredential","signInAnonymously","signInWithCustomToken","token","signInWithEmailAndPassword","signInWithEmailLink","signInWithPhoneNumber","signInWithPopup","signInWithRedirect","updateCurrentUser","verifyPasswordResetCode","_delete","oldNext","newNext","persistences","push","verifyPhoneNumber","phoneInfoOptions","PHONE_SIGN_IN_METHOD","PROVIDER_ID","RecaptchaVerifier","container","parameters","type","clear","render","verify","AUTH_TYPE","registerAuthCompat","instance","INTERNAL","registerComponent","getProvider","authProvider","setServiceProps","ActionCodeInfo","Operation","EMAIL_SIGNIN","ActionCodeOperation","PASSWORD_RESET","RECOVER_EMAIL","REVERT_SECOND_FACTOR_ADDITION","VERIFY_AND_CHANGE_EMAIL","VERIFY_EMAIL","EmailAuthProvider","SAMLAuthProvider","PhoneMultiFactorGenerator","AuthCredential","Error","setInstantiationMode","setMultipleInstances","registerVersion"],"mappings":"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","sourcesContent":["import firebase from '@firebase/app-compat';\nimport * as exp from '@firebase/auth/internal';\nimport { Component } from '@firebase/component';\nimport { isBrowserExtension, isReactNative, isNode, getUA, isIE, isIndexedDBAvailable, FirebaseError } from '@firebase/util';\n\nvar name = \"@firebase/auth-compat\";\nvar version = \"0.2.9\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst CORDOVA_ONDEVICEREADY_TIMEOUT_MS = 1000;\r\nfunction _getCurrentScheme() {\r\n    var _a;\r\n    return ((_a = self === null || self === void 0 ? void 0 : self.location) === null || _a === void 0 ? void 0 : _a.protocol) || null;\r\n}\r\n/**\r\n * @return {boolean} Whether the current environment is http or https.\r\n */\r\nfunction _isHttpOrHttps() {\r\n    return _getCurrentScheme() === 'http:' || _getCurrentScheme() === 'https:';\r\n}\r\n/**\r\n * @param {?string=} ua The user agent.\r\n * @return {boolean} Whether the app is rendered in a mobile iOS or Android\r\n *     Cordova environment.\r\n */\r\nfunction _isAndroidOrIosCordovaScheme(ua = getUA()) {\r\n    return !!((_getCurrentScheme() === 'file:' || _getCurrentScheme() === 'ionic:') &&\r\n        ua.toLowerCase().match(/iphone|ipad|ipod|android/));\r\n}\r\n/**\r\n * @return {boolean} Whether the environment is a native environment, where\r\n *     CORS checks do not apply.\r\n */\r\nfunction _isNativeEnvironment() {\r\n    return isReactNative() || isNode();\r\n}\r\n/**\r\n * Checks whether the user agent is IE11.\r\n * @return {boolean} True if it is IE11.\r\n */\r\nfunction _isIe11() {\r\n    return isIE() && (document === null || document === void 0 ? void 0 : document.documentMode) === 11;\r\n}\r\n/**\r\n * Checks whether the user agent is Edge.\r\n * @param {string} userAgent The browser user agent string.\r\n * @return {boolean} True if it is Edge.\r\n */\r\nfunction _isEdge(ua = getUA()) {\r\n    return /Edge\\/\\d+/.test(ua);\r\n}\r\n/**\r\n * @param {?string=} opt_userAgent The navigator user agent.\r\n * @return {boolean} Whether local storage is not synchronized between an iframe\r\n *     and a popup of the same domain.\r\n */\r\nfunction _isLocalStorageNotSynchronized(ua = getUA()) {\r\n    return _isIe11() || _isEdge(ua);\r\n}\r\n/** @return {boolean} Whether web storage is supported. */\r\nfunction _isWebStorageSupported() {\r\n    try {\r\n        const storage = self.localStorage;\r\n        const key = exp._generateEventId();\r\n        if (storage) {\r\n            // setItem will throw an exception if we cannot access WebStorage (e.g.,\r\n            // Safari in private mode).\r\n            storage['setItem'](key, '1');\r\n            storage['removeItem'](key);\r\n            // For browsers where iframe web storage does not synchronize with a popup\r\n            // of the same domain, indexedDB is used for persistent storage. These\r\n            // browsers include IE11 and Edge.\r\n            // Make sure it is supported (IE11 and Edge private mode does not support\r\n            // that).\r\n            if (_isLocalStorageNotSynchronized()) {\r\n                // In such browsers, if indexedDB is not supported, an iframe cannot be\r\n                // notified of the popup sign in result.\r\n                return isIndexedDBAvailable();\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n    catch (e) {\r\n        // localStorage is not available from a worker. Test availability of\r\n        // indexedDB.\r\n        return _isWorker() && isIndexedDBAvailable();\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * @param {?Object=} global The optional global scope.\r\n * @return {boolean} Whether current environment is a worker.\r\n */\r\nfunction _isWorker() {\r\n    // WorkerGlobalScope only defined in worker environment.\r\n    return (typeof global !== 'undefined' &&\r\n        'WorkerGlobalScope' in global &&\r\n        'importScripts' in global);\r\n}\r\nfunction _isPopupRedirectSupported() {\r\n    return ((_isHttpOrHttps() ||\r\n        isBrowserExtension() ||\r\n        _isAndroidOrIosCordovaScheme()) &&\r\n        // React Native with remote debugging reports its location.protocol as\r\n        // http.\r\n        !_isNativeEnvironment() &&\r\n        // Local storage has to be supported for browser popup and redirect\r\n        // operations to work.\r\n        _isWebStorageSupported() &&\r\n        // DOM, popups and redirects are not supported within a worker.\r\n        !_isWorker());\r\n}\r\n/** Quick check that indicates the platform *may* be Cordova */\r\nfunction _isLikelyCordova() {\r\n    return _isAndroidOrIosCordovaScheme() && typeof document !== 'undefined';\r\n}\r\nasync function _isCordova() {\r\n    if (!_isLikelyCordova()) {\r\n        return false;\r\n    }\r\n    return new Promise(resolve => {\r\n        const timeoutId = setTimeout(() => {\r\n            // We've waited long enough; the telltale Cordova event didn't happen\r\n            resolve(false);\r\n        }, CORDOVA_ONDEVICEREADY_TIMEOUT_MS);\r\n        document.addEventListener('deviceready', () => {\r\n            clearTimeout(timeoutId);\r\n            resolve(true);\r\n        });\r\n    });\r\n}\r\nfunction _getSelfWindow() {\r\n    return typeof window !== 'undefined' ? window : null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst Persistence = {\r\n    LOCAL: 'local',\r\n    NONE: 'none',\r\n    SESSION: 'session'\r\n};\r\nconst _assert$3 = exp._assert;\r\nconst PERSISTENCE_KEY = 'persistence';\r\n/**\r\n * Validates that an argument is a valid persistence value. If an invalid type\r\n * is specified, an error is thrown synchronously.\r\n */\r\nfunction _validatePersistenceArgument(auth, persistence) {\r\n    _assert$3(Object.values(Persistence).includes(persistence), auth, \"invalid-persistence-type\" /* INVALID_PERSISTENCE */);\r\n    // Validate if the specified type is supported in the current environment.\r\n    if (isReactNative()) {\r\n        // This is only supported in a browser.\r\n        _assert$3(persistence !== Persistence.SESSION, auth, \"unsupported-persistence-type\" /* UNSUPPORTED_PERSISTENCE */);\r\n        return;\r\n    }\r\n    if (isNode()) {\r\n        // Only none is supported in Node.js.\r\n        _assert$3(persistence === Persistence.NONE, auth, \"unsupported-persistence-type\" /* UNSUPPORTED_PERSISTENCE */);\r\n        return;\r\n    }\r\n    if (_isWorker()) {\r\n        // In a worker environment, either LOCAL or NONE are supported.\r\n        // If indexedDB not supported and LOCAL provided, throw an error\r\n        _assert$3(persistence === Persistence.NONE ||\r\n            (persistence === Persistence.LOCAL && isIndexedDBAvailable()), auth, \"unsupported-persistence-type\" /* UNSUPPORTED_PERSISTENCE */);\r\n        return;\r\n    }\r\n    // This is restricted by what the browser supports.\r\n    _assert$3(persistence === Persistence.NONE || _isWebStorageSupported(), auth, \"unsupported-persistence-type\" /* UNSUPPORTED_PERSISTENCE */);\r\n}\r\nasync function _savePersistenceForRedirect(auth) {\r\n    await auth._initializationPromise;\r\n    const session = getSessionStorageIfAvailable();\r\n    const key = exp._persistenceKeyName(PERSISTENCE_KEY, auth.config.apiKey, auth.name);\r\n    if (session) {\r\n        session.setItem(key, auth._getPersistence());\r\n    }\r\n}\r\nfunction _getPersistencesFromRedirect(apiKey, appName) {\r\n    const session = getSessionStorageIfAvailable();\r\n    if (!session) {\r\n        return [];\r\n    }\r\n    const key = exp._persistenceKeyName(PERSISTENCE_KEY, apiKey, appName);\r\n    const persistence = session.getItem(key);\r\n    switch (persistence) {\r\n        case Persistence.NONE:\r\n            return [exp.inMemoryPersistence];\r\n        case Persistence.LOCAL:\r\n            return [exp.indexedDBLocalPersistence, exp.browserSessionPersistence];\r\n        case Persistence.SESSION:\r\n            return [exp.browserSessionPersistence];\r\n        default:\r\n            return [];\r\n    }\r\n}\r\n/** Returns session storage, or null if the property access errors */\r\nfunction getSessionStorageIfAvailable() {\r\n    var _a;\r\n    try {\r\n        return ((_a = _getSelfWindow()) === null || _a === void 0 ? void 0 : _a.sessionStorage) || null;\r\n    }\r\n    catch (e) {\r\n        return null;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst _assert$2 = exp._assert;\r\n/** Platform-agnostic popup-redirect resolver */\r\nclass CompatPopupRedirectResolver {\r\n    constructor() {\r\n        // Create both resolvers for dynamic resolution later\r\n        this.browserResolver = exp._getInstance(exp.browserPopupRedirectResolver);\r\n        this.cordovaResolver = exp._getInstance(exp.cordovaPopupRedirectResolver);\r\n        // The actual resolver in use: either browserResolver or cordovaResolver.\r\n        this.underlyingResolver = null;\r\n        this._redirectPersistence = exp.browserSessionPersistence;\r\n        this._completeRedirectFn = exp._getRedirectResult;\r\n    }\r\n    async _initialize(auth) {\r\n        await this.selectUnderlyingResolver();\r\n        return this.assertedUnderlyingResolver._initialize(auth);\r\n    }\r\n    async _openPopup(auth, provider, authType, eventId) {\r\n        await this.selectUnderlyingResolver();\r\n        return this.assertedUnderlyingResolver._openPopup(auth, provider, authType, eventId);\r\n    }\r\n    async _openRedirect(auth, provider, authType, eventId) {\r\n        await this.selectUnderlyingResolver();\r\n        return this.assertedUnderlyingResolver._openRedirect(auth, provider, authType, eventId);\r\n    }\r\n    _isIframeWebStorageSupported(auth, cb) {\r\n        this.assertedUnderlyingResolver._isIframeWebStorageSupported(auth, cb);\r\n    }\r\n    _originValidation(auth) {\r\n        return this.assertedUnderlyingResolver._originValidation(auth);\r\n    }\r\n    get _shouldInitProactively() {\r\n        return _isLikelyCordova() || this.browserResolver._shouldInitProactively;\r\n    }\r\n    get assertedUnderlyingResolver() {\r\n        _assert$2(this.underlyingResolver, \"internal-error\" /* INTERNAL_ERROR */);\r\n        return this.underlyingResolver;\r\n    }\r\n    async selectUnderlyingResolver() {\r\n        if (this.underlyingResolver) {\r\n            return;\r\n        }\r\n        // We haven't yet determined whether or not we're in Cordova; go ahead\r\n        // and determine that state now.\r\n        const isCordova = await _isCordova();\r\n        this.underlyingResolver = isCordova\r\n            ? this.cordovaResolver\r\n            : this.browserResolver;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction unwrap(object) {\r\n    return object.unwrap();\r\n}\r\nfunction wrapped(object) {\r\n    return object.wrapped();\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction credentialFromResponse(userCredential) {\r\n    return credentialFromObject(userCredential);\r\n}\r\nfunction attachExtraErrorFields(auth, e) {\r\n    var _a;\r\n    // The response contains all fields from the server which may or may not\r\n    // actually match the underlying type\r\n    const response = (_a = e.customData) === null || _a === void 0 ? void 0 : _a._tokenResponse;\r\n    if (e.code === 'auth/multi-factor-auth-required') {\r\n        const mfaErr = e;\r\n        mfaErr.resolver = new MultiFactorResolver(auth, exp.getMultiFactorResolver(auth, e));\r\n    }\r\n    else if (response) {\r\n        const credential = credentialFromObject(e);\r\n        const credErr = e;\r\n        if (credential) {\r\n            credErr.credential = credential;\r\n            credErr.tenantId = response.tenantId || undefined;\r\n            credErr.email = response.email || undefined;\r\n            credErr.phoneNumber = response.phoneNumber || undefined;\r\n        }\r\n    }\r\n}\r\nfunction credentialFromObject(object) {\r\n    const { _tokenResponse } = (object instanceof FirebaseError ? object.customData : object);\r\n    if (!_tokenResponse) {\r\n        return null;\r\n    }\r\n    // Handle phone Auth credential responses, as they have a different format\r\n    // from other backend responses (i.e. no providerId). This is also only the\r\n    // case for user credentials (does not work for errors).\r\n    if (!(object instanceof FirebaseError)) {\r\n        if ('temporaryProof' in _tokenResponse && 'phoneNumber' in _tokenResponse) {\r\n            return exp.PhoneAuthProvider.credentialFromResult(object);\r\n        }\r\n    }\r\n    const providerId = _tokenResponse.providerId;\r\n    // Email and password is not supported as there is no situation where the\r\n    // server would return the password to the client.\r\n    if (!providerId || providerId === exp.ProviderId.PASSWORD) {\r\n        return null;\r\n    }\r\n    let provider;\r\n    switch (providerId) {\r\n        case exp.ProviderId.GOOGLE:\r\n            provider = exp.GoogleAuthProvider;\r\n            break;\r\n        case exp.ProviderId.FACEBOOK:\r\n            provider = exp.FacebookAuthProvider;\r\n            break;\r\n        case exp.ProviderId.GITHUB:\r\n            provider = exp.GithubAuthProvider;\r\n            break;\r\n        case exp.ProviderId.TWITTER:\r\n            provider = exp.TwitterAuthProvider;\r\n            break;\r\n        default:\r\n            const { oauthIdToken, oauthAccessToken, oauthTokenSecret, pendingToken, nonce } = _tokenResponse;\r\n            if (!oauthAccessToken &&\r\n                !oauthTokenSecret &&\r\n                !oauthIdToken &&\r\n                !pendingToken) {\r\n                return null;\r\n            }\r\n            // TODO(avolkovi): uncomment this and get it working with SAML & OIDC\r\n            if (pendingToken) {\r\n                if (providerId.startsWith('saml.')) {\r\n                    return exp.SAMLAuthCredential._create(providerId, pendingToken);\r\n                }\r\n                else {\r\n                    // OIDC and non-default providers excluding Twitter.\r\n                    return exp.OAuthCredential._fromParams({\r\n                        providerId,\r\n                        signInMethod: providerId,\r\n                        pendingToken,\r\n                        idToken: oauthIdToken,\r\n                        accessToken: oauthAccessToken\r\n                    });\r\n                }\r\n            }\r\n            return new exp.OAuthProvider(providerId).credential({\r\n                idToken: oauthIdToken,\r\n                accessToken: oauthAccessToken,\r\n                rawNonce: nonce\r\n            });\r\n    }\r\n    return object instanceof FirebaseError\r\n        ? provider.credentialFromError(object)\r\n        : provider.credentialFromResult(object);\r\n}\r\nfunction convertCredential(auth, credentialPromise) {\r\n    return credentialPromise\r\n        .catch(e => {\r\n        if (e instanceof FirebaseError) {\r\n            attachExtraErrorFields(auth, e);\r\n        }\r\n        throw e;\r\n    })\r\n        .then(credential => {\r\n        const operationType = credential.operationType;\r\n        const user = credential.user;\r\n        return {\r\n            operationType,\r\n            credential: credentialFromResponse(credential),\r\n            additionalUserInfo: exp.getAdditionalUserInfo(credential),\r\n            user: User.getOrCreate(user)\r\n        };\r\n    });\r\n}\r\nasync function convertConfirmationResult(auth, confirmationResultPromise) {\r\n    const confirmationResultExp = await confirmationResultPromise;\r\n    return {\r\n        verificationId: confirmationResultExp.verificationId,\r\n        confirm: (verificationCode) => convertCredential(auth, confirmationResultExp.confirm(verificationCode))\r\n    };\r\n}\r\nclass MultiFactorResolver {\r\n    constructor(auth, resolver) {\r\n        this.resolver = resolver;\r\n        this.auth = wrapped(auth);\r\n    }\r\n    get session() {\r\n        return this.resolver.session;\r\n    }\r\n    get hints() {\r\n        return this.resolver.hints;\r\n    }\r\n    resolveSignIn(assertion) {\r\n        return convertCredential(unwrap(this.auth), this.resolver.resolveSignIn(assertion));\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass User {\r\n    constructor(_delegate) {\r\n        this._delegate = _delegate;\r\n        this.multiFactor = exp.multiFactor(_delegate);\r\n    }\r\n    static getOrCreate(user) {\r\n        if (!User.USER_MAP.has(user)) {\r\n            User.USER_MAP.set(user, new User(user));\r\n        }\r\n        return User.USER_MAP.get(user);\r\n    }\r\n    delete() {\r\n        return this._delegate.delete();\r\n    }\r\n    reload() {\r\n        return this._delegate.reload();\r\n    }\r\n    toJSON() {\r\n        return this._delegate.toJSON();\r\n    }\r\n    getIdTokenResult(forceRefresh) {\r\n        return this._delegate.getIdTokenResult(forceRefresh);\r\n    }\r\n    getIdToken(forceRefresh) {\r\n        return this._delegate.getIdToken(forceRefresh);\r\n    }\r\n    linkAndRetrieveDataWithCredential(credential) {\r\n        return this.linkWithCredential(credential);\r\n    }\r\n    async linkWithCredential(credential) {\r\n        return convertCredential(this.auth, exp.linkWithCredential(this._delegate, credential));\r\n    }\r\n    async linkWithPhoneNumber(phoneNumber, applicationVerifier) {\r\n        return convertConfirmationResult(this.auth, exp.linkWithPhoneNumber(this._delegate, phoneNumber, applicationVerifier));\r\n    }\r\n    async linkWithPopup(provider) {\r\n        return convertCredential(this.auth, exp.linkWithPopup(this._delegate, provider, CompatPopupRedirectResolver));\r\n    }\r\n    async linkWithRedirect(provider) {\r\n        await _savePersistenceForRedirect(exp._castAuth(this.auth));\r\n        return exp.linkWithRedirect(this._delegate, provider, CompatPopupRedirectResolver);\r\n    }\r\n    reauthenticateAndRetrieveDataWithCredential(credential) {\r\n        return this.reauthenticateWithCredential(credential);\r\n    }\r\n    async reauthenticateWithCredential(credential) {\r\n        return convertCredential(this.auth, exp.reauthenticateWithCredential(this._delegate, credential));\r\n    }\r\n    reauthenticateWithPhoneNumber(phoneNumber, applicationVerifier) {\r\n        return convertConfirmationResult(this.auth, exp.reauthenticateWithPhoneNumber(this._delegate, phoneNumber, applicationVerifier));\r\n    }\r\n    reauthenticateWithPopup(provider) {\r\n        return convertCredential(this.auth, exp.reauthenticateWithPopup(this._delegate, provider, CompatPopupRedirectResolver));\r\n    }\r\n    async reauthenticateWithRedirect(provider) {\r\n        await _savePersistenceForRedirect(exp._castAuth(this.auth));\r\n        return exp.reauthenticateWithRedirect(this._delegate, provider, CompatPopupRedirectResolver);\r\n    }\r\n    sendEmailVerification(actionCodeSettings) {\r\n        return exp.sendEmailVerification(this._delegate, actionCodeSettings);\r\n    }\r\n    async unlink(providerId) {\r\n        await exp.unlink(this._delegate, providerId);\r\n        return this;\r\n    }\r\n    updateEmail(newEmail) {\r\n        return exp.updateEmail(this._delegate, newEmail);\r\n    }\r\n    updatePassword(newPassword) {\r\n        return exp.updatePassword(this._delegate, newPassword);\r\n    }\r\n    updatePhoneNumber(phoneCredential) {\r\n        return exp.updatePhoneNumber(this._delegate, phoneCredential);\r\n    }\r\n    updateProfile(profile) {\r\n        return exp.updateProfile(this._delegate, profile);\r\n    }\r\n    verifyBeforeUpdateEmail(newEmail, actionCodeSettings) {\r\n        return exp.verifyBeforeUpdateEmail(this._delegate, newEmail, actionCodeSettings);\r\n    }\r\n    get emailVerified() {\r\n        return this._delegate.emailVerified;\r\n    }\r\n    get isAnonymous() {\r\n        return this._delegate.isAnonymous;\r\n    }\r\n    get metadata() {\r\n        return this._delegate.metadata;\r\n    }\r\n    get phoneNumber() {\r\n        return this._delegate.phoneNumber;\r\n    }\r\n    get providerData() {\r\n        return this._delegate.providerData;\r\n    }\r\n    get refreshToken() {\r\n        return this._delegate.refreshToken;\r\n    }\r\n    get tenantId() {\r\n        return this._delegate.tenantId;\r\n    }\r\n    get displayName() {\r\n        return this._delegate.displayName;\r\n    }\r\n    get email() {\r\n        return this._delegate.email;\r\n    }\r\n    get photoURL() {\r\n        return this._delegate.photoURL;\r\n    }\r\n    get providerId() {\r\n        return this._delegate.providerId;\r\n    }\r\n    get uid() {\r\n        return this._delegate.uid;\r\n    }\r\n    get auth() {\r\n        return this._delegate.auth;\r\n    }\r\n}\r\n// Maintain a map so that there's always a 1:1 mapping between new User and\r\n// legacy compat users\r\nUser.USER_MAP = new WeakMap();\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst _assert$1 = exp._assert;\r\nclass Auth {\r\n    constructor(app, provider) {\r\n        this.app = app;\r\n        if (provider.isInitialized()) {\r\n            this._delegate = provider.getImmediate();\r\n            this.linkUnderlyingAuth();\r\n            return;\r\n        }\r\n        const { apiKey } = app.options;\r\n        // TODO: platform needs to be determined using heuristics\r\n        _assert$1(apiKey, \"invalid-api-key\" /* INVALID_API_KEY */, {\r\n            appName: app.name\r\n        });\r\n        // TODO: platform needs to be determined using heuristics\r\n        _assert$1(apiKey, \"invalid-api-key\" /* INVALID_API_KEY */, {\r\n            appName: app.name\r\n        });\r\n        // Only use a popup/redirect resolver in browser environments\r\n        const resolver = typeof window !== 'undefined' ? CompatPopupRedirectResolver : undefined;\r\n        this._delegate = provider.initialize({\r\n            options: {\r\n                persistence: buildPersistenceHierarchy(apiKey, app.name),\r\n                popupRedirectResolver: resolver\r\n            }\r\n        });\r\n        this._delegate._updateErrorMap(exp.debugErrorMap);\r\n        this.linkUnderlyingAuth();\r\n    }\r\n    get emulatorConfig() {\r\n        return this._delegate.emulatorConfig;\r\n    }\r\n    get currentUser() {\r\n        if (!this._delegate.currentUser) {\r\n            return null;\r\n        }\r\n        return User.getOrCreate(this._delegate.currentUser);\r\n    }\r\n    get languageCode() {\r\n        return this._delegate.languageCode;\r\n    }\r\n    set languageCode(languageCode) {\r\n        this._delegate.languageCode = languageCode;\r\n    }\r\n    get settings() {\r\n        return this._delegate.settings;\r\n    }\r\n    get tenantId() {\r\n        return this._delegate.tenantId;\r\n    }\r\n    set tenantId(tid) {\r\n        this._delegate.tenantId = tid;\r\n    }\r\n    useDeviceLanguage() {\r\n        this._delegate.useDeviceLanguage();\r\n    }\r\n    signOut() {\r\n        return this._delegate.signOut();\r\n    }\r\n    useEmulator(url, options) {\r\n        exp.connectAuthEmulator(this._delegate, url, options);\r\n    }\r\n    applyActionCode(code) {\r\n        return exp.applyActionCode(this._delegate, code);\r\n    }\r\n    checkActionCode(code) {\r\n        return exp.checkActionCode(this._delegate, code);\r\n    }\r\n    confirmPasswordReset(code, newPassword) {\r\n        return exp.confirmPasswordReset(this._delegate, code, newPassword);\r\n    }\r\n    async createUserWithEmailAndPassword(email, password) {\r\n        return convertCredential(this._delegate, exp.createUserWithEmailAndPassword(this._delegate, email, password));\r\n    }\r\n    fetchProvidersForEmail(email) {\r\n        return this.fetchSignInMethodsForEmail(email);\r\n    }\r\n    fetchSignInMethodsForEmail(email) {\r\n        return exp.fetchSignInMethodsForEmail(this._delegate, email);\r\n    }\r\n    isSignInWithEmailLink(emailLink) {\r\n        return exp.isSignInWithEmailLink(this._delegate, emailLink);\r\n    }\r\n    async getRedirectResult() {\r\n        _assert$1(_isPopupRedirectSupported(), this._delegate, \"operation-not-supported-in-this-environment\" /* OPERATION_NOT_SUPPORTED */);\r\n        const credential = await exp.getRedirectResult(this._delegate, CompatPopupRedirectResolver);\r\n        if (!credential) {\r\n            return {\r\n                credential: null,\r\n                user: null\r\n            };\r\n        }\r\n        return convertCredential(this._delegate, Promise.resolve(credential));\r\n    }\r\n    // This function should only be called by frameworks (e.g. FirebaseUI-web) to log their usage.\r\n    // It is not intended for direct use by developer apps. NO jsdoc here to intentionally leave it\r\n    // out of autogenerated documentation pages to reduce accidental misuse.\r\n    addFrameworkForLogging(framework) {\r\n        exp.addFrameworkForLogging(this._delegate, framework);\r\n    }\r\n    onAuthStateChanged(nextOrObserver, errorFn, completed) {\r\n        const { next, error, complete } = wrapObservers(nextOrObserver, errorFn, completed);\r\n        return this._delegate.onAuthStateChanged(next, error, complete);\r\n    }\r\n    onIdTokenChanged(nextOrObserver, errorFn, completed) {\r\n        const { next, error, complete } = wrapObservers(nextOrObserver, errorFn, completed);\r\n        return this._delegate.onIdTokenChanged(next, error, complete);\r\n    }\r\n    sendSignInLinkToEmail(email, actionCodeSettings) {\r\n        return exp.sendSignInLinkToEmail(this._delegate, email, actionCodeSettings);\r\n    }\r\n    sendPasswordResetEmail(email, actionCodeSettings) {\r\n        return exp.sendPasswordResetEmail(this._delegate, email, actionCodeSettings || undefined);\r\n    }\r\n    async setPersistence(persistence) {\r\n        _validatePersistenceArgument(this._delegate, persistence);\r\n        let converted;\r\n        switch (persistence) {\r\n            case Persistence.SESSION:\r\n                converted = exp.browserSessionPersistence;\r\n                break;\r\n            case Persistence.LOCAL:\r\n                // Not using isIndexedDBAvailable() since it only checks if indexedDB is defined.\r\n                const isIndexedDBFullySupported = await exp\r\n                    ._getInstance(exp.indexedDBLocalPersistence)\r\n                    ._isAvailable();\r\n                converted = isIndexedDBFullySupported\r\n                    ? exp.indexedDBLocalPersistence\r\n                    : exp.browserLocalPersistence;\r\n                break;\r\n            case Persistence.NONE:\r\n                converted = exp.inMemoryPersistence;\r\n                break;\r\n            default:\r\n                return exp._fail(\"argument-error\" /* ARGUMENT_ERROR */, {\r\n                    appName: this._delegate.name\r\n                });\r\n        }\r\n        return this._delegate.setPersistence(converted);\r\n    }\r\n    signInAndRetrieveDataWithCredential(credential) {\r\n        return this.signInWithCredential(credential);\r\n    }\r\n    signInAnonymously() {\r\n        return convertCredential(this._delegate, exp.signInAnonymously(this._delegate));\r\n    }\r\n    signInWithCredential(credential) {\r\n        return convertCredential(this._delegate, exp.signInWithCredential(this._delegate, credential));\r\n    }\r\n    signInWithCustomToken(token) {\r\n        return convertCredential(this._delegate, exp.signInWithCustomToken(this._delegate, token));\r\n    }\r\n    signInWithEmailAndPassword(email, password) {\r\n        return convertCredential(this._delegate, exp.signInWithEmailAndPassword(this._delegate, email, password));\r\n    }\r\n    signInWithEmailLink(email, emailLink) {\r\n        return convertCredential(this._delegate, exp.signInWithEmailLink(this._delegate, email, emailLink));\r\n    }\r\n    signInWithPhoneNumber(phoneNumber, applicationVerifier) {\r\n        return convertConfirmationResult(this._delegate, exp.signInWithPhoneNumber(this._delegate, phoneNumber, applicationVerifier));\r\n    }\r\n    async signInWithPopup(provider) {\r\n        _assert$1(_isPopupRedirectSupported(), this._delegate, \"operation-not-supported-in-this-environment\" /* OPERATION_NOT_SUPPORTED */);\r\n        return convertCredential(this._delegate, exp.signInWithPopup(this._delegate, provider, CompatPopupRedirectResolver));\r\n    }\r\n    async signInWithRedirect(provider) {\r\n        _assert$1(_isPopupRedirectSupported(), this._delegate, \"operation-not-supported-in-this-environment\" /* OPERATION_NOT_SUPPORTED */);\r\n        await _savePersistenceForRedirect(this._delegate);\r\n        return exp.signInWithRedirect(this._delegate, provider, CompatPopupRedirectResolver);\r\n    }\r\n    updateCurrentUser(user) {\r\n        // remove ts-ignore once overloads are defined for exp functions to accept compat objects\r\n        // @ts-ignore\r\n        return this._delegate.updateCurrentUser(user);\r\n    }\r\n    verifyPasswordResetCode(code) {\r\n        return exp.verifyPasswordResetCode(this._delegate, code);\r\n    }\r\n    unwrap() {\r\n        return this._delegate;\r\n    }\r\n    _delete() {\r\n        return this._delegate._delete();\r\n    }\r\n    linkUnderlyingAuth() {\r\n        this._delegate.wrapped = () => this;\r\n    }\r\n}\r\nAuth.Persistence = Persistence;\r\nfunction wrapObservers(nextOrObserver, error, complete) {\r\n    let next = nextOrObserver;\r\n    if (typeof nextOrObserver !== 'function') {\r\n        ({ next, error, complete } = nextOrObserver);\r\n    }\r\n    // We know 'next' is now a function\r\n    const oldNext = next;\r\n    const newNext = (user) => oldNext(user && User.getOrCreate(user));\r\n    return {\r\n        next: newNext,\r\n        error: error,\r\n        complete\r\n    };\r\n}\r\nfunction buildPersistenceHierarchy(apiKey, appName) {\r\n    // Note this is slightly different behavior: in this case, the stored\r\n    // persistence is checked *first* rather than last. This is because we want\r\n    // to prefer stored persistence type in the hierarchy. This is an empty\r\n    // array if window is not available or there is no pending redirect\r\n    const persistences = _getPersistencesFromRedirect(apiKey, appName);\r\n    // If \"self\" is available, add indexedDB\r\n    if (typeof self !== 'undefined' &&\r\n        !persistences.includes(exp.indexedDBLocalPersistence)) {\r\n        persistences.push(exp.indexedDBLocalPersistence);\r\n    }\r\n    // If \"window\" is available, add HTML Storage persistences\r\n    if (typeof window !== 'undefined') {\r\n        for (const persistence of [\r\n            exp.browserLocalPersistence,\r\n            exp.browserSessionPersistence\r\n        ]) {\r\n            if (!persistences.includes(persistence)) {\r\n                persistences.push(persistence);\r\n            }\r\n        }\r\n    }\r\n    // Add in-memory as a final fallback\r\n    if (!persistences.includes(exp.inMemoryPersistence)) {\r\n        persistences.push(exp.inMemoryPersistence);\r\n    }\r\n    return persistences;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass PhoneAuthProvider {\r\n    constructor() {\r\n        this.providerId = 'phone';\r\n        // TODO: remove ts-ignore when moving types from auth-types to auth-compat\r\n        // @ts-ignore\r\n        this._delegate = new exp.PhoneAuthProvider(unwrap(firebase.auth()));\r\n    }\r\n    static credential(verificationId, verificationCode) {\r\n        return exp.PhoneAuthProvider.credential(verificationId, verificationCode);\r\n    }\r\n    verifyPhoneNumber(phoneInfoOptions, applicationVerifier) {\r\n        return this._delegate.verifyPhoneNumber(\r\n        // The implementation matches but the types are subtly incompatible\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        phoneInfoOptions, applicationVerifier);\r\n    }\r\n    unwrap() {\r\n        return this._delegate;\r\n    }\r\n}\r\nPhoneAuthProvider.PHONE_SIGN_IN_METHOD = exp.PhoneAuthProvider.PHONE_SIGN_IN_METHOD;\r\nPhoneAuthProvider.PROVIDER_ID = exp.PhoneAuthProvider.PROVIDER_ID;\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst _assert = exp._assert;\r\nclass RecaptchaVerifier {\r\n    constructor(container, parameters, app = firebase.app()) {\r\n        var _a;\r\n        // API key is required for web client RPC calls.\r\n        _assert((_a = app.options) === null || _a === void 0 ? void 0 : _a.apiKey, \"invalid-api-key\" /* INVALID_API_KEY */, {\r\n            appName: app.name\r\n        });\r\n        this._delegate = new exp.RecaptchaVerifier(container, \r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        parameters, \r\n        // TODO: remove ts-ignore when moving types from auth-types to auth-compat\r\n        // @ts-ignore\r\n        app.auth());\r\n        this.type = this._delegate.type;\r\n    }\r\n    clear() {\r\n        this._delegate.clear();\r\n    }\r\n    render() {\r\n        return this._delegate.render();\r\n    }\r\n    verify() {\r\n        return this._delegate.verify();\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst AUTH_TYPE = 'auth-compat';\r\n// Create auth components to register with firebase.\r\n// Provides Auth public APIs.\r\nfunction registerAuthCompat(instance) {\r\n    instance.INTERNAL.registerComponent(new Component(AUTH_TYPE, container => {\r\n        // getImmediate for FirebaseApp will always succeed\r\n        const app = container.getProvider('app-compat').getImmediate();\r\n        const authProvider = container.getProvider('auth');\r\n        return new Auth(app, authProvider);\r\n    }, \"PUBLIC\" /* PUBLIC */)\r\n        .setServiceProps({\r\n        ActionCodeInfo: {\r\n            Operation: {\r\n                EMAIL_SIGNIN: exp.ActionCodeOperation.EMAIL_SIGNIN,\r\n                PASSWORD_RESET: exp.ActionCodeOperation.PASSWORD_RESET,\r\n                RECOVER_EMAIL: exp.ActionCodeOperation.RECOVER_EMAIL,\r\n                REVERT_SECOND_FACTOR_ADDITION: exp.ActionCodeOperation.REVERT_SECOND_FACTOR_ADDITION,\r\n                VERIFY_AND_CHANGE_EMAIL: exp.ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL,\r\n                VERIFY_EMAIL: exp.ActionCodeOperation.VERIFY_EMAIL\r\n            }\r\n        },\r\n        EmailAuthProvider: exp.EmailAuthProvider,\r\n        FacebookAuthProvider: exp.FacebookAuthProvider,\r\n        GithubAuthProvider: exp.GithubAuthProvider,\r\n        GoogleAuthProvider: exp.GoogleAuthProvider,\r\n        OAuthProvider: exp.OAuthProvider,\r\n        SAMLAuthProvider: exp.SAMLAuthProvider,\r\n        PhoneAuthProvider: PhoneAuthProvider,\r\n        PhoneMultiFactorGenerator: exp.PhoneMultiFactorGenerator,\r\n        RecaptchaVerifier: RecaptchaVerifier,\r\n        TwitterAuthProvider: exp.TwitterAuthProvider,\r\n        Auth,\r\n        AuthCredential: exp.AuthCredential,\r\n        Error: FirebaseError\r\n    })\r\n        .setInstantiationMode(\"LAZY\" /* LAZY */)\r\n        .setMultipleInstances(false));\r\n    instance.registerVersion(name, version);\r\n}\r\nregisterAuthCompat(firebase);\n"]},"metadata":{},"sourceType":"module"}